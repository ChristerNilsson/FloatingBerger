// Generated by CoffeeScript 2.7.0
  // ½ • ↑ ↓ ← →
var ALFABET, BYE, KEYS, addBord, changeRound, changeTable, convert, createSortEvents, koppla, main, makeBerger, makeFloating, makeURL, parseTextarea, parseURL, readResults, roundsContent, safeGet, savePairing, setAllPR, setByeResults, setCursor, setResult, setScreen, showInfo, showMatrix, showNames, showPlayers, showTables, tableCount, updateLongs,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf,
  hasProp = {}.hasOwnProperty;

import {
  Player
} from './player.js';

import {
  Floating
} from './floating.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

import {
  echo,
  global,
  range
} from './global.js';

ALFABET = '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'; // 100

BYE = "BYE";

KEYS = {
  a: "  b c  ← →       # n e p r  shift← shift→  shift↑↓",
  b: "a   c  ← →  ↑ ↓  0 Space 1  Del            shift↑↓",
  c: "a b    ← →                                 shift↑↓"
};

//# F U N K T I O N E R ##
addBord = function(bord, res, c0, c1) {
  var color, svart, svart_elo, tr, vit, vit_elo;
  // echo 'addBord',bord,res,c0,c1
  vit = global.players[c0].name;
  svart = global.players[c1].name;
  vit_elo = global.players[c0].elo;
  svart_elo = global.players[c1].elo;
  tr = document.createElement('tr');
  color = bord === global.currTable ? 'yellow' : 'white';
  koppla('td', tr, {
    text: bord + global.settings.ONE
  });
  koppla('td', tr, {
    style: "text-align:left",
    text: vit
  });
  koppla('td', tr, {
    style: "text-align:left",
    text: vit_elo
  });
  koppla('td', tr, {
    style: "text-align:left",
    text: svart_elo
  });
  koppla('td', tr, {
    style: "text-align:left",
    text: svart
  });
  koppla('td', tr, {
    style: `text-align:center; background-color:${color}`,
    text: prettyResult(res)
  });
  return tr;
};

changeRound = function(delta) { // byt rond och uppdatera bordslistan
  global.currRound = modulo(global.currRound + delta, global.rounds.length);
  global.currTable = 0;
  setScreen(global.currScreen);
  showTables();
  return showNames();
};

changeTable = function(delta) {
  return global.currTable = modulo(global.currTable + delta, tableCount());
};

convert = function(input, a, b) { // byt alla tecken i input som finns i a mot tecken med samma index i b
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};


// convertLong = (input,a,b) -> # byt alla tecken i input som finns i a mot sträng med samma index i b. b är separerad med |
// 	i = a.indexOf input
// 	b = b.split '|'
// 	if input in a then b[i] else input
createSortEvents = function() { // Spelarlistan sorteras beroende på vilken kolumn man klickar på. # Namn Elo P eller PR
  var j, len, results1, th, ths;
  ths = document.querySelectorAll('#players th');
  results1 = [];
  for (j = 0, len = ths.length; j < len; j++) {
    th = ths[j];
    results1.push((function(th) {
      return th.addEventListener('click', function(event) {
        var key;
        key = th.textContent;
        if (key === '#') {
          global.sortKey = '#';
        }
        if (key === 'Namn') {
          global.sortKey = 'n';
        }
        if (key === 'Elo') {
          global.sortKey = 'e';
        }
        if (key === 'P') {
          global.sortKey = 'p';
        }
        if (key === 'PR') {
          global.sortKey = 'r';
        }
        if (['#', 'Namn', 'Elo', 'P', 'PR'].includes(key)) {
          echo('click', global.sortKey);
          return showPlayers();
        }
      });
    })(th));
  }
  return results1;
};

export var expand = function(games, rounds) { // make a double round from a single round
  var b, j, len, result, round, w;
  result = [];
  for (j = 0, len = rounds.length; j < len; j++) {
    round = rounds[j];
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([w, b]);
      }
      return results1;
    })());
    if (games === 2) {
      result.push((function() {
        var k, len1, results1;
        results1 = [];
        for (k = 0, len1 = round.length; k < len1; k++) {
          [w, b] = round[k];
          results1.push([b, w]);
        }
        return results1;
      })());
    }
  }
  return result;
};

export var findNumberOfDecimals = function(lst) { // leta upp minsta antal decimaler som krävs för unikhet i listan
  var best, i, ibest, item, j, len, ref, unik;
  best = 0;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    unik = _.uniq((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = lst.length; k < len1; k++) {
        item = lst[k];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

koppla = function(typ, parent, attrs = {}) {
  var elem, key;
  elem = document.createElement(typ);
  if ('text' in attrs) {
    elem.textContent = attrs.text;
    delete attrs.text;
  }
  if ('html' in attrs) {
    elem.innerHTML = attrs.html;
    delete attrs.html;
  }
  for (key in attrs) {
    if (!hasProp.call(attrs, key)) continue;
    elem.setAttribute(key, attrs[key]);
  }
  parent.appendChild(elem);
  return elem;
};

export var longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, j, len, ref, res, result, w;
  result = [];
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  result.sort(function(a, b) {
    return a[0] - b[0];
  });
  return result;
};

makeBerger = function() { // lotta en hel berger-turnering.
  var A, half, i, j, len, n, ref;
  n = global.players.length;
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
  global.rounds = [];
  ref = range(global.settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    global.rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return global.rounds;
};

makeFloating = function() { // lotta en hel floating-turnering
  global.floating = new Floating(global.players, global.settings);
  return global.floating.rounds;
};

makeURL = function() {
  var j, k, len, len1, player, r, ref, ref1, s, url;
  url = "./";
  url += `?TITLE=${global.settings.TITLE}`;
  url += `&GAMES=${global.settings.GAMES}`;
  url += `&ROUNDS=${global.settings.ROUNDS}`;
  url += `&SORT=${global.settings.SORT}`;
  url += `&ONE=${global.settings.ONE}`;
  url += `&BALANCE=${global.settings.BALANCE}`;
  url += `&A=${global.settings.A}`;
  url += `&B=${global.settings.B}`;
  url += `&C=${global.settings.C}`;
  ref = global.players;
  for (j = 0, len = ref.length; j < len; j++) {
    player = ref[j];
    url += `&p=${player}`;
  }
  ref1 = range(global.rounds.length);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    r = ref1[k];
    s = global.results[r].join('');
    s = _.trimEnd(s, 'x');
    if (s !== '') {
      url += `&r${r + 1}=${s}`;
    }
  }
  url = url.replaceAll(' ', '+');
  return url;
};

export var other = function(input) {
  return convert(input, "012x", "210x");
};

parseTextarea = function() { // läs in initiala uppgifter om spelarna
  var j, key, len, line, lines, n, raw, url, val;
  raw = document.getElementById("textarea");
  lines = raw.value;
  lines = lines.split("\n");
  global.rounds = null;
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line.length === 0 || line[0] === '#') {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        global.settings.TITLE = val;
      }
      if (key === 'GAMES') {
        global.settings.GAMES = val;
      }
      if (key === 'ROUNDS') {
        global.settings.ROUNDS = val;
      }
      if (key === 'SORT') {
        global.settings.SORT = val;
      }
      if (key === 'ONE') {
        global.settings.ONE = val;
      }
      if (key === 'BALANCE') {
        global.settings.BALANCE = val;
      }
      if (key === 'A') {
        global.settings.A = val;
      }
      if (key === 'B') {
        global.settings.B = val;
      }
      if (key === 'C') {
        global.settings.C = val;
      }
    } else {
      global.players.push(line);
    }
  }
  n = global.players.length;
  if (global.settings.A > n) {
    global.settings.A = n;
  }
  if (global.settings.B > n) {
    global.settings.B = n;
  }
  if (global.settings.C > n) {
    global.settings.C = n;
  }
  if (global.players.length % 2 === 1) {
    global.frirond = global.players.length;
    global.players.push('0000 ' + BYE);
  } else {
    global.frirond = null;
  }
  if (global.settings.ROUNDS === 0) {
    global.settings.ROUNDS = global.players.length - 1;
  }
  if (global.rounds === null) {
    global.rounds = [];
  }
  url = makeURL();
  global.players = [];
  global.rounds = [];
  window.location.href = url;
  return echo('window.location.href = url');
};

parseURL = function() {
  var elo, i, j, k, len, len1, n, name, params, person, persons, ref;
  params = new URLSearchParams(window.location.search);
  global.settings.TITLE = safeGet(params, "TITLE");
  global.settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  global.settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  global.settings.ONE = parseInt(safeGet(params, "ONE", "1"));
  global.settings.BALANCE = parseInt(safeGet(params, "BALANCE", "1"));
  global.settings.A = parseInt(safeGet(params, "A", "29"));
  global.settings.B = parseInt(safeGet(params, "B", "30"));
  global.settings.C = parseInt(safeGet(params, "C", "30"));
  global.players = [];
  persons = params.getAll("p");
  //echo 'href',window.location.href
  if (window.location.href.includes(BYE)) {
    global.frirond = persons.length - 1;
  }
  if (global.settings.SORT === 1) {
    persons.sort().reverse();
  }
  global.settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${global.players.length - 1}`));
  i = 0;
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    i += 1;
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    global.players.push(new Player(global.players.length, name, elo));
  }
  // initialisera rounds med 'x' i alla celler
  n = Math.floor(global.players.length / 2);
  global.rounds = [];
  ref = range(global.settings.GAMES * global.settings.ROUNDS);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    global.rounds.push(new Array(n).fill('x'));
  }
  return readResults(params);
};

export var prettyResult = function(ch) { // översätt interna resultat till externa
  if (ch === 'x') {
    return "-";
  }
  if (ch === '0') {
    return "0 - 1";
  }
  if (ch === '1') {
    return "½ - ½";
  }
  if (ch === '2') {
    return "1 - 0";
  }
};

readResults = function(params) { // Resultaten läses från urlen
  var arr, ch, j, k, len, len1, n, r, ref, result, results1;
  global.results = [];
  n = global.players.length;
  if (global.frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(global.settings.GAMES * global.settings.ROUNDS);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    result = safeGet(params, `r${r + 1}`, new Array(n).fill("x"));
    arr = [];
    for (k = 0, len1 = result.length; k < len1; k++) {
      ch = result[k];
      if (ch === '0') {
        arr.push('0');
      }
      if (ch === '1') {
        arr.push('1');
      }
      if (ch === '2') {
        arr.push('2');
      }
      if (ch === 'x') {
        arr.push('x');
      }
    }
    results1.push(global.results.push(arr));
  }
  return results1;
};

roundsContent = function(long, i, tr) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, j, len, opponent, result, results1, w;
  results1 = [];
  for (j = 0, len = long.length; j < len; j++) {
    [w, b, color, result] = long[j];
    opponent = w === i ? b : w;
    result = convert(result, 'x201FG', ' 10½11');
    attr = color === 'w' ? "right:0px;" : "left:0px;";
    cell = koppla('td', tr, {
      style: "position:relative;"
    });
    koppla('div', cell, {
      style: "position:absolute; top:0px; font-size:0.7em;" + attr,
      text: global.settings.ONE + opponent
    });
    results1.push(koppla('div', cell, {
      style: "position:relative; font-size:1.1em; top:6px",
      text: result
    }));
  }
  return results1;
};

safeGet = function(params, key, standard = "") { // Hämta parametern given av key från urlen
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

savePairing = function(r, A, half, n) { // skapa en bordslista utifrån berger.
  var i, j, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = j = 1, ref = half; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (global.frirond) {
    lst.push(lst.shift());
  }
  return lst.sort();
};

setAllPR = function(delta) {
  var decimals;
  decimals = global.settings.DECIMALS + delta;
  if ((0 <= decimals && decimals <= 6)) {
    global.settings.DECIMALS = decimals;
  }
  return showPlayers();
};

setByeResults = function() {
  var b, j, len, r, ref, results1, round, t, w;
  if (global.frirond === null) {
    return;
  }
  ref = range(global.rounds.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    round = global.rounds[r];
    results1.push((function() {
      var k, len1, ref1, results2;
      ref1 = range(round.length);
      results2 = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        t = ref1[k];
        [w, b] = round[t];
        if (global.berger) {
          if (w === global.frirond) {
            global.results[r][t] = '2';
          }
          if (b === global.frirond) {
            results2.push(global.results[r][t] = '0');
          } else {
            results2.push(void 0);
          }
        } else {
          if (w === global.frirond) {
            global.results[r][t] = '0';
          }
          if (b === global.frirond) {
            results2.push(global.results[r][t] = '2');
          } else {
            results2.push(void 0);
          }
        }
      }
      return results2;
    })());
  }
  return results1;
};

setCursor = function(round, table) { // Den gula bakgrunden uppdateras beroende på piltangenterna
  var color, index, j, k, len, len1, results1, th, ths, tr, trs;
  ths = document.querySelectorAll('#players th');
  for (index = j = 0, len = ths.length; j < len; index = ++j) {
    th = ths[index];
    color = index === global.currRound + 3 ? 'yellow' : 'white';
    th.style = `background-color:${color}`;
  }
  trs = document.querySelectorAll('#tables tr');
  results1 = [];
  for (index = k = 0, len1 = trs.length; k < len1; index = ++k) {
    tr = trs[index];
    color = index === global.currTable + 0 ? 'yellow' : 'white';
    results1.push(tr.children[5].style = `background-color:${color}`);
  }
  return results1;
};

setResult = function(key, res) { // Uppdatera results samt gui:t.
  var b, cell, old, tr, tr5, trs, w;
  old = global.results[global.currRound][global.currTable];
  [w, b] = global.rounds[global.currRound][global.currTable];
  if (global.frirond && (w === global.frirond || b === global.frirond)) {
    return;
  }
  cell = old + res; // transition, 16 possibilities
  if (indexOf.call('xx 00 11 22'.split(' '), cell) >= 0) { // lyckad kontrollinmatning, gå till nästa bord
    global.currTable = modulo(global.currTable + 1, tableCount());
    return;
  }
  //echo 'global.currTable',global.currTable
  if (indexOf.call('01 02 10 12 20 21'.split(' '), cell) >= 0) {
    echo('exit'); // inmatning stämmer ej, lämna
    return;
  }
  
  // uppdatera och gå till nästa bord
  global.results[global.currRound][global.currTable] = res;
  updateLongs();
  // Uppdatera GUI för tables kirurgiskt
  trs = document.querySelectorAll('#tables tr');
  tr = trs[global.currTable];
  tr5 = tr.children[5];
  tr5.textContent = prettyResult(res);
  global.currTable = modulo(global.currTable + 1, tableCount());
  return history.replaceState({}, "", makeURL()); // för att slippa omladdning av sidan
};

setScreen = function(key) {
  var h2, header;
  if (key === 'a') {
    showPlayers(); //global.longs
  }
  if (key === 'b') {
    showTables();
  }
  if (key === 'c') {
    showNames();
  }
  global.currScreen = key;
  header = document.getElementById('header');
  header.innerHTML = '';
  h2 = koppla('h2', header);
  koppla('pre', header, {
    text: KEYS[key]
  });
  if (key === 'a') {
    h2.textContent = "A Ställning för " + global.settings.TITLE;
  }
  if (key === 'b') {
    h2.textContent = `B Bordslista rond ${global.currRound + global.settings.ONE} för ${global.settings.TITLE}`;
  }
  if (key === 'c') {
    h2.textContent = `C Namnlista rond ${global.currRound + global.settings.ONE} för ${global.settings.TITLE}`;
  }
  document.getElementById('players').style.display = key === 'a' ? 'flex' : 'none';
  document.getElementById('tables').style.display = key === 'b' ? 'flex' : 'none';
  return document.getElementById('names').style.display = key === 'c' ? 'flex' : 'none';
};

showInfo = function(message) { // Visa helpText på skärmen
  var div1, div2, pre1, root;
  root = document.getElementById('info');
  root.innerHTML = "";
  div1 = koppla('div', root);
  div2 = koppla('div', div1, {
    class: "help"
  });
  pre1 = koppla('pre', div2);
  return pre1.innerHTML = message;
};

showMatrix = function() { // Visa matrisen Alla mot alla. Dot betyder: inget möte
  var SPACING, i, j, len, line, n, ref, results1;
  SPACING = ' ';
  n = global.players.length;
  if (n > ALFABET.length) {
    n = ALFABET.length;
  }
  echo('    ' + ((function() {
    var j, len, ref, results1;
    ref = range(n);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results1.push(ALFABET[i]);
    }
    return results1;
  })()).join(SPACING));
  ref = range(n);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line = global.floating.matrix[i].slice(0, n);
    results1.push(echo(ALFABET[i] + '   ' + line.join(SPACING) + '   ' + global.players[i].elo)); // + ' ' + Math.round global.players[i].summa
  }
  return results1;
};

showNames = function() {
  var b, columns, container, i, j, len, pb, persons, pw, ref, root, w;
  persons = [];
  ref = global.rounds[global.currRound];
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    [w, b] = ref[i];
    pw = [global.players[w].name, `${i + global.settings.ONE} • W`];
    pb = [global.players[b].name, `${i + global.settings.ONE} • B`];
    if (pw[0] === BYE) {
      pb[1] = BYE;
      persons.push(pb);
    } else if (pb[0] === BYE) {
      pw[1] = BYE;
      persons.push(pw);
    } else {
      persons.push(pw);
      persons.push(pb);
    }
  }
  persons.sort();
  columns = _.chunk(persons, global.settings.C);
  root = document.getElementById('names');
  root.innerHTML = ''; // rensa
  container = koppla('div', root);
  container.className = 'columns';
  return columns.forEach((col) => {
    var colDiv, tabell, thead;
    colDiv = koppla('div', container, {
      class: 'column'
    });
    tabell = koppla('table', colDiv);
    thead = koppla('thead', tabell);
    koppla('th', thead, {
      text: "Namn"
    });
    koppla('th', thead, {
      text: "Plats"
    });
    return col.forEach((p) => {
      var td1, td2, tr1;
      tr1 = koppla('tr', tabell);
      td1 = koppla('td', tr1, {
        style: "text-align:left",
        text: p[0]
      });
      return td2 = koppla('td', tr1, {
        style: "text-align:center",
        text: p[1]
      });
    });
  });
};

showPlayers = function() { // Visa spelarlistan.
  var columns, container, i, j, len, memory, offset, player, ref, root, sortedPlayers;
  ref = global.players;
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    player = ref[i];
    player.update_P_and_PR(global.longs, i);
  }
  sortedPlayers = _.clone(global.players);
  // Tag bort BYE om den finns.
  if (global.frirond !== null) {
    memory = _.first(_.remove(sortedPlayers, function(item) {
      return item.name === BYE;
    }));
  }
  sortedPlayers.sort((a, b) => {
    if (global.sortKey === '#') {
      return a.id - b.id;
    }
    if (global.sortKey === 'n') {
      return a.name.localeCompare(b.name, "sv");
    }
    if (global.sortKey === 'e') {
      return b.elo - a.elo;
    }
    if (global.sortKey === 'p') {
      return b.P - a.P;
    }
    if (global.sortKey === 'r') {
      return b.PR - a.PR;
    }
  });
  // Lägg tillbaka BYE till sists position
  if (global.frirond !== null) {
    sortedPlayers.push(memory);
  }
  columns = _.chunk(sortedPlayers, global.settings.A);
  if (_.last(columns).length === 1 && _.last(columns)[0].name === BYE) {
    columns.pop();
  }
  root = document.getElementById('players');
  root.innerHTML = '';
  container = koppla('div', root);
  container.className = 'columns';
  offset = 0;
  columns.forEach((col) => {
    var colDiv, k, len1, ref1, tabell, thead;
    colDiv = koppla('div', container, {
      class: 'column'
    });
    tabell = koppla('table', colDiv);
    thead = koppla('thead', tabell);
    koppla('th', thead, {
      text: "#"
    });
    koppla('th', thead, {
      text: "Namn"
    });
    koppla('th', thead, {
      text: "Elo"
    });
    ref1 = range(global.rounds.length);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      koppla('th', thead, {
        text: `${i + global.settings.ONE}`
      });
    }
    koppla('th', thead, {
      text: "P"
    });
    koppla('th', thead, {
      text: "PR"
    });
    col.forEach((player) => {
      var l, len2, long, ref2, tr;
      if (player.name === BYE) {
        return;
      }
      tr = koppla('tr', tabell, {
        style: "height: 28px" // 27 ger ojämna höjder
      });
      koppla('td', tr, {
        text: player.id + global.settings.ONE
      });
      koppla('td', tr, {
        style: "text-align:left",
        text: player.name // .slice 0,20
      });
      koppla('td', tr, {
        text: player.elo
      });
      long = global.longs[player.id];
      roundsContent(long, player.id, tr);
      ref2 = range(long.length, global.rounds.length);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        i = ref2[l];
        koppla('td', tr, {
          style: "text-align:left",
          'x': 'x'
        });
      }
      koppla('td', tr, {
        style: "text-align:right",
        text: player.P.toFixed(1)
      });
      return koppla('td', tr, {
        style: "text-align:right",
        text: player.PR.toFixed(global.settings.DECIMALS)
      });
    });
    return offset += global.settings.A;
  });
  return createSortEvents();
};

showTables = function() { // Visa bordslistan
  var columns, container, offset, root, round;
  if (global.rounds.length === 0) {
    return;
  }
  round = global.rounds[global.currRound];
  columns = _.chunk(round, global.settings.B);
  root = document.getElementById('tables');
  root.innerHTML = '';
  container = koppla('div', root);
  container.className = 'columns';
  offset = 0;
  return columns.forEach((col) => {
    var colDiv, tabell, thead;
    colDiv = koppla('div', container, {
      class: 'column'
    });
    tabell = koppla('table', colDiv);
    thead = koppla('thead', tabell);
    koppla('th', thead, {
      text: "Bord"
    });
    koppla('th', thead, {
      text: "Vit"
    });
    koppla('th', thead, {
      text: "Elo"
    });
    koppla('th', thead, {
      text: "Elo"
    });
    koppla('th', thead, {
      text: "Svart"
    });
    koppla('th', thead, {
      text: "Resultat"
    });
    col.forEach(([w, b], iTable) => {
      return tabell.appendChild(addBord(offset + iTable, global.results[global.currRound][offset + iTable], w, b));
    });
    return offset += global.settings.B;
  });
};

tableCount = function() {
  return Math.floor(global.players.length / 2); // Beräkna antal bord
};

updateLongs = function() { // Uppdaterar longs utifrån rounds och results
  var r;
  global.longs = (function() {
    var j, len, ref, results1;
    ref = range(global.rounds.length);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      results1.push(longForm(global.rounds[r], global.results[r]));
    }
    return results1;
  })();
  return global.longs = _.zip(...global.longs); // transponerar matrisen
};

main = function() { // Hämta urlen i första hand, textarean i andra hand.
  var changeGroupSize, floatingFlag, i, j, len, params, ref;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    echo('settings', global.settings);
    showInfo(helpText);
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseURL();
  if (global.players.length < 4) {
    showInfo("Du måste ange minst fyra spelare!");
    return;
  }
  global.berger = global.settings.ROUNDS === global.players.length - 1;
  floatingFlag = global.settings.ROUNDS <= Math.floor(global.players.length / 2);
  if (!global.berger ^ floatingFlag) { //global.settings.ROUNDS >= players.length // 2 and global.settings.ROUNDS != players.length - 1
    showInfo("Antalet ronder du angivit är ej acceptabelt!");
    return;
  }
  global.rounds = global.berger ? makeBerger() : makeFloating();
  global.rounds = expand(global.settings.GAMES, global.rounds);
  ref = range(global.settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    global.results.push(Array(tableCount()).fill('x'));
  }
  global.sortKey = global.berger ? 'p' : 'r';
  readResults(params);
  setByeResults();
  updateLongs();
  showPlayers();
  showTables();
  showNames();
  setScreen('a');
  setCursor(global.currRound, global.currTable);
  document.title = global.settings.TITLE;
  changeGroupSize = function(key, letter) {
    if (key === 'ArrowUp') {
      global.settings[letter] -= 1;
    }
    if (key === 'ArrowDown') {
      global.settings[letter] += 1;
    }
    if (key === 'ArrowDown' || key === 'ArrowUp') {
      if (letter === 'A') {
        showPlayers();
      }
      if (letter === 'B') {
        showTables();
      }
      if (letter === 'C') {
        return showNames();
      }
    }
  };
  return document.addEventListener('keydown', function(event) { // Hanterar alla tangenttryckningar
    var del, key, rad, start;
    start = new Date();
    // echo event.shiftKey, event.altKey, event.metaKey, event.key
    key = event.key;
    if (key === 'ArrowLeft') {
      changeRound(-1);
    }
    if (key === 'ArrowRight') {
      changeRound(+1);
    }
    if (key === 'ArrowUp' && global.currScreen === 'b') {
      changeTable(-1);
    }
    if (key === 'ArrowDown' && global.currScreen === 'b') {
      changeTable(+1);
    }
    del = 'Delete';
    if (key === del && global.currScreen === 'b') {
      setResult(key, 'x'); // "  -  "
    }
    if (key === '0' && global.currScreen === 'b') {
      setResult(key, '0'); // "0 - 1"
    }
    if (key === ' ' && global.currScreen === 'b') {
      setResult(key, '1'); // "½ - ½"
    }
    if (key === '1' && global.currScreen === 'b') {
      setResult(key, '2'); // "1 - 0"
    }
    if (event.shiftKey) {
      if (key === 'ArrowLeft' && global.currScreen === 'a') {
        setAllPR(-1);
      }
      if (key === 'ArrowRight' && global.currScreen === 'a') {
        setAllPR(+1);
      }
    }
    if (key === 'd') {
      echo('Dump', global);
    }
    if (key === 'x') {
      showMatrix();
    }
    if (global.currScreen === 'a' && indexOf.call('#nepr', key) >= 0) {
      global.sortKey = key;
      showPlayers();
    }
    if (event.shiftKey) {
      if (global.currScreen === 'a') {
        changeGroupSize(key, 'A');
      }
      if (global.currScreen === 'b') {
        changeGroupSize(key, 'B');
      }
      if (global.currScreen === 'c') {
        changeGroupSize(key, 'C');
      }
    }
    if (indexOf.call('abc', key) >= 0) {
      setScreen(key);
    }
    setCursor(global.currRound, global.currTable);
    // tvinga bordet att synas
    rad = document.querySelectorAll("#tables table tr")[global.currTable];
    return rad.scrollIntoView({
      behavior: "smooth",
      block: "center"
    });
  });
};

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FloatingBerger\tournament.coffee