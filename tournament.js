// Generated by CoffeeScript 2.7.0
  // ½ •
var ALFABET, ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT, addTable, changeRound, changeTable, convert, convertLong, createSortEvents, currRound, currTable, echo, frirond, invert, longs, main, makeBerger, makeFloating, makeURL, parseTextarea, parseURL, players, range, readResults, results, rounds, roundsContent, safeGet, savePairing, setAllPR, setCursor, setFrirondResults, setP, setPR, setResult, settings, shorts, showInfo, showMatrix, showPlayers, showTables, sorteraKolumn, tableCount, updateLongsAndShorts,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

import {
  Player
} from './player.js';

import {
  Floating
} from './floating.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

import {
  table,
  thead,
  th,
  tr,
  td,
  a,
  div,
  pre,
  p,
  h2
} from './html.js';

echo = console.log;

range = _.range;

ALIGN_LEFT = {
  style: "text-align:left"
};

ALIGN_CENTER = {
  style: "text-align:center"
};

ALIGN_RIGHT = {
  style: "text-align:right"
};

ALFABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

//# V A R I A B L E R ##
settings = {
  TITLE: 'Titel saknas',
  GAMES: 1,
  ROUNDS: 0,
  SORT: 1,
  ONE: 1,
  BALANCE: 1,
  DECIMALS: 0 // ONE = 1 # 0=dev 1=prod
};


// Tillståndet ges av dessa fem variabler:
players = [];

results = []; // ronder x bord. cell: 'x', '0', '1' eller '2'

rounds = []; // ronder x bord. cell: [w,b] 

longs = []; // players x ronder. cell: [w,b,col,res]

shorts = []; // ronder x players. cell: [w,b,col,res]

currRound = 0;

currTable = 0;

frirond = null; // ingen frirond. Annars index för frironden


//# F U N K T I O N E R ##
addTable = function(bord, res, c0, c1) {
  var hash, ref, svart, vit;
  vit = players[c0].name;
  svart = players[c1].name;
  hash = {
    style: `background-color:${(ref = bord === currTable) != null ? ref : {
      'yellow': 'white'
    }}`
  };
  return tr(hash, td({}, bord + settings.ONE), td(ALIGN_LEFT, vit), td(ALIGN_LEFT, svart), td(ALIGN_CENTER, prettyResult(res))); // prettify
};

changeRound = function(delta) { // byt rond och uppdatera bordslistan
  currRound = modulo(currRound + delta, rounds.length);
  currTable = 0;
  return showTables(shorts, currRound);
};

changeTable = function(delta) { // byt bord
  return currTable = modulo(currTable + delta, tableCount());
};

convert = function(input, a, b) { // byt alla tecken i input som finns i a mot tecken med samma index i b
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

convertLong = function(input, a, b) { // byt alla tecken i input som finns i a mot sträng med samma index i b. b är separerad med |
  var i;
  i = a.indexOf(input);
  b = b.split('|');
  if (indexOf.call(a, input) >= 0) {
    return b[i];
  } else {
    return input;
  }
};

sorteraKolumn = function(index, stigande) {
  var j, len, rad, rader, results1, tbody;
  tbody = document.querySelector('#stallning tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  rader.sort(function(a, b) {
    var cellA, cellB, numA, numB;
    cellA = a.children[index].textContent.trim();
    cellB = b.children[index].textContent.trim();
    // Försök jämföra som tal, annars som text
    numA = parseFloat(cellA);
    numB = parseFloat(cellB);
    if (!isNaN(numA) && !isNaN(numB)) {
      if (stigande) {
        return numA - numB;
      } else {
        return numB - numA;
      }
    } else {
      if (stigande) {
        return cellA.localeCompare(cellB);
      } else {
        return cellB.localeCompare(cellA);
      }
    }
  });
// Lägg tillbaka raderna i sorterad ordning
  results1 = [];
  for (j = 0, len = rader.length; j < len; j++) {
    rad = rader[j];
    results1.push(tbody.appendChild(rad));
  }
  return results1;
};

createSortEvents = function() { // Spelarlistan sorteras beroende på vilken kolumn man klickar på. # Namn Elo P eller PR
  var _th, index, j, len, results1, ths;
  ths = document.querySelectorAll('#stallning th');
  index = -1;
  results1 = [];
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index++;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var key;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - settings.ONE;
          showTables(shorts, key);
          return;
        }
        return sorteraKolumn(index, indexOf.call("# Namn".split(' '), key) >= 0);
      });
    })(_th, index));
  }
  return results1;
};

export var expand = function(games, rounds) { // make a double round from a single round
  var b, j, len, result, round, w;
  result = [];
  for (j = 0, len = rounds.length; j < len; j++) {
    round = rounds[j];
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([w, b]);
      }
      return results1;
    })());
    if (games === 2) {
      result.push((function() {
        var k, len1, results1;
        results1 = [];
        for (k = 0, len1 = round.length; k < len1; k++) {
          [w, b] = round[k];
          results1.push([b, w]);
        }
        return results1;
      })());
    }
  }
  // echo players
  return result;
};

export var findNumberOfDecimals = function(lst) { // leta upp minsta antal decimaler som krävs för unikhet i listan
  var best, i, ibest, item, j, len, ref, unik;
  best = 0;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    unik = _.uniq((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = lst.length; k < len1; k++) {
        item = lst[k];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

invert = function(lst) {
  var i, item, j, len, ref, result;
  result = _.clone(lst);
  ref = range(lst.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    item = lst[i];
    result[item] = i;
  }
  return result;
};

export var longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, j, len, ref, res, result, w;
  result = [];
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  result.sort(function(a, b) {
    return a[0] - b[0];
  });
  return result;
};

makeBerger = function() { // lotta en hel berger-turnering.
  var A, half, i, j, len, n, ref;
  n = players.length;
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

makeFloating = function() { // lotta en hel floating-turnering
  var floating;
  floating = new Floating(players, settings);
  showMatrix(floating);
  return floating.rounds;
};

makeURL = function() {
  var j, k, len, len1, player, r, ref, s, url;
  url = "./";
  url += `?TITLE=${settings.TITLE}`;
  url += `&GAMES=${settings.GAMES}`;
  url += `&ROUNDS=${settings.ROUNDS}`;
  url += `&SORT=${settings.SORT}`;
  url += `&ONE=${settings.ONE}`;
  url += `&BALANCE=${settings.BALANCE}`;
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    r = ref[k];
    s = results[r].join('');
    s = _.trimEnd(s, 'x');
    if (s !== '') {
      url += `&r${r + 1}=${s}`;
    }
  }
  url = url.replaceAll(' ', '+');
  return url;
};

export var other = function(input) {
  return convert(input, "012FG", "21022");
};

parseTextarea = function() { // läs in initiala uppgifter om spelarna
  var j, key, len, line, lines, raw, url, val;
  raw = document.getElementById("textarea");
  lines = raw.value;
  lines = lines.split("\n");
  rounds = null;
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line.length === 0 || line[0] === '#') {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        settings.TITLE = val;
      }
      if (key === 'GAMES') {
        settings.GAMES = val;
      }
      if (key === 'ROUNDS') {
        settings.ROUNDS = val;
      }
      if (key === 'SORT') {
        settings.SORT = val;
      }
      if (key === 'ONE') {
        settings.ONE = val;
      }
      if (key === 'BALANCE') {
        settings.BALANCE = val;
      }
    } else {
      players.push(line);
    }
  }
  if (players.length % 2 === 1) {
    frirond = players.length;
    players.push('0000 FRIROND');
  } else {
    frirond = null;
  }
  if (settings.ROUNDS === 0) {
    settings.ROUNDS = players.length - 1;
  }
  if (rounds === null) {
    rounds = [];
  }
  url = makeURL();
  players = [];
  rounds = [];
  window.location.href = url;
  return echo('window.location.href = url');
};

parseURL = function() {
  var elo, i, j, k, len, len1, n, name, params, person, persons, ref;
  params = new URLSearchParams(window.location.search);
  settings.TITLE = safeGet(params, "TITLE");
  settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  settings.ONE = parseInt(safeGet(params, "ONE", "1"));
  settings.BALANCE = parseInt(safeGet(params, "BALANCE", "1"));
  players = [];
  persons = params.getAll("p");
  if (window.location.href.includes('FRIROND')) {
    frirond = persons.length - 1;
  }
  if (settings.SORT === 1) {
    persons.sort().reverse();
  }
  settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  i = 0;
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    i += 1;
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    players.push(new Player(players.length, name, elo));
  }
  // initialisera rounds med 'x' i alla celler
  n = Math.floor(players.length / 2);
  rounds = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    rounds.push(new Array(n).fill('x'));
  }
  return readResults(params);
};

export var prettyResult = function(ch) { // översätt interna resultat till externa
  if (ch === 'x') {
    return "-";
  }
  if (ch === '0') {
    return "0 - 1";
  }
  if (ch === '1') {
    return "½ - ½";
  }
  if (ch === '2') {
    return "1 - 0";
  }
};

readResults = function(params) { // Resultaten läses från urlen
  var arr, ch, j, k, len, len1, n, r, ref, result, results1;
  results = [];
  n = players.length;
  if (frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(settings.GAMES * settings.ROUNDS);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    result = safeGet(params, `r${r + 1}`, new Array(n).fill("x"));
    arr = [];
    for (k = 0, len1 = result.length; k < len1; k++) {
      ch = result[k];
      if (ch === '0') {
        arr.push('0');
      }
      if (ch === '1') {
        arr.push('1');
      }
      if (ch === '2') {
        arr.push('2');
      }
      if (ch === 'x') {
        arr.push('x');
      }
    }
    results1.push(results.push(arr));
  }
  return results1;
};

roundsContent = function(long, i) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, j, len, oppElos, opponent, result, ronder, w;
  ronder = [];
  oppElos = [];
  for (j = 0, len = long.length; j < len; j++) {
    [w, b, color, result] = long[j];
    opponent = settings.ONE + (w === i ? b : w);
    result = convert(result, 'x201FG', ' 10½11');
    attr = color === 'w' ? "right:0px;" : "left:0px;";
    cell = td({
      style: "position:relative;"
    }, div({
      style: "position:absolute; top:0px;  font-size:0.7em;" + attr
    }, opponent), div({
      style: "position:absolute; top:12px; font-size:1.1em; transform: translate(-10%, -10%)"
    }, result));
    ronder.push(cell);
  }
  ronder.push(td(ALIGN_RIGHT, ""));
  ronder.push(td({}, ""));
  return ronder.join("");
};

safeGet = function(params, key, standard = "") { // Hämta parametern given av key från urlen
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

savePairing = function(r, A, half, n) { // skapa en bordslista utifrån berger.
  var i, j, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = j = 1, ref = half; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (frirond) {
    lst.push(lst.shift());
  }
  return lst.sort();
};

setAllPR = function(delta) {
  var _tdPR, decimals, index, j, len, ref, results1, trs;
  decimals = settings.DECIMALS + delta;
  if ((0 <= decimals && decimals <= 6)) {
    settings.DECIMALS = decimals;
  }
  trs = document.querySelectorAll('#stallning tr');
  ref = range(players.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    if (players[index].PR > 0) {
      _tdPR = trs[index + 1].children[4 + settings.GAMES * settings.ROUNDS];
      results1.push(_tdPR.textContent = players[index].PR.toFixed(settings.DECIMALS));
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

setCursor = function(round, table) { // Den gula bakgrunden uppdateras beroende på piltangenterna
  var _th, _tr, color, index, j, k, len, len1, results1, ths, trs;
  ths = document.querySelectorAll('#stallning th');
  index = -1;
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index++;
    color = index === currRound + 3 ? 'yellow' : 'white';
    _th.style = `background-color:${color}`;
  }
  trs = document.querySelectorAll('#tables tr');
  index = -1;
  results1 = [];
  for (k = 0, len1 = trs.length; k < len1; k++) {
    _tr = trs[k];
    index++;
    color = index === currTable + 1 ? 'yellow' : 'white';
    results1.push(_tr.children[3].style = `background-color:${color}`);
  }
  return results1;
};

setP = function(trs, index, translator) {
  var _tdP, andel, ch, elo, elos, j, len, opp, perf, r, ref, scoresP, scoresPR, value;
  scoresP = 0;
  scoresPR = 0;
  elos = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    ch = longs[index][r][3];
    value = '012'.indexOf(ch);
    opp = longs[index][r][1];
    if (value !== -1) {
      elo = players[opp].elo;
      scoresP += value;
      if (elo !== 0) {
        scoresPR += value;
        elos.push(Math.round(elo));
      }
    }
  }
  _tdP = trs[translator[index] + 1].children[3 + settings.GAMES * settings.ROUNDS];
  _tdP.textContent = (scoresP / 2).toFixed(1);
  // kalkylera performance rating mha vinstandel och elo-tal
  andel = scoresPR / 2;
  perf = performance(andel, elos);
  return players[index].PR = perf;
};

setPR = function(trs, index, translator) {
  var _tdPR;
  _tdPR = trs[translator[index] + 1].children[4 + settings.GAMES * settings.ROUNDS];
  return _tdPR.textContent = players[index].PR.toFixed(settings.DECIMALS);
};

setResult = function(key, res) { // Uppdatera results samt gui:t.
  var _td, _tr, b, i, j, len, one, ref, success, tr3, translator, trs, w;
  trs = document.querySelectorAll('#stallning tr');
  translator = [];
  ref = range(1, trs.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    translator.push(Math.round(trs[i].children[0].textContent) - 1);
  }
  translator = invert(translator);
  [w, b] = rounds[currRound][currTable];
  if (frirond && (w === frirond || b === frirond)) {
    return;
  }
  results[currRound][currTable] = res;
  updateLongsAndShorts();
  one = settings.ONE;
  _td = trs[translator[w] + one].children[3 + currRound].children[1];
  _td.textContent = "0½1"[res];
  _td = trs[translator[b] + one].children[3 + currRound].children[1];
  _td.textContent = "1½0"[res];
  setP(trs, b, translator);
  setP(trs, w, translator);
  setPR(trs, b, translator);
  setPR(trs, w, translator);
  // Sätt tables
  trs = document.querySelectorAll('#tables tr');
  _tr = trs[currTable + 1];
  tr3 = _tr.children[3];
  success = false;
  if (key === 'Delete') {
    success = true;
  } else {
    success = tr3.textContent === '-' || tr3.textContent === res;
  }
  if (success) {
    tr3.textContent = prettyResult(res);
    currTable = modulo(currTable + 1, tableCount());
  }
  return history.replaceState({}, "", makeURL()); // för att slippa omladdning av sidan
};

showInfo = function(message = "") { // Visa helpText på skärmen
  return document.getElementById('info').innerHTML = div({}, div({
    class: "help"
  }, pre({}, message + helpText)));
};

showMatrix = function(floating) { // Visa matrisen Alla mot alla. Dot betyder: inget möte
  var i, j, len, line, n, ref, results1;
  n = players.length;
  if (n > ALFABET.length) {
    n = ALFABET.length;
  }
  echo('    ' + ((function() {
    var j, len, ref, results1;
    ref = range(n);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results1.push(ALFABET[i]);
    }
    return results1;
  })()).join('   '));
  ref = range(n);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line = floating.matrix[i].slice(0, n);
    results1.push(echo(ALFABET[i] + '   ' + line.join('   ') + '  ' + players[i].elo));
  }
  return results1;
};

showPlayers = function(longs) { // Visa spelarlistan. (longs lagrad som lista av spelare)
  var i, j, len, long, player, result, rows;
  rows = [];
  for (i = j = 0, len = longs.length; j < len; i = ++j) {
    long = longs[i];
    player = players[i];
    if (player.name === 'FRIROND') {
      continue;
    }
    rows.push(tr({}, td({}, i + settings.ONE), td(ALIGN_LEFT, player.name), td({}, player.elo), roundsContent(long, i)));
  }
  result = div({}, h2({}, settings.TITLE + ` (${settings.ROUNDS === players.length - 1 ? 'Berger' : 'Floating'})`), table({}, thead({}, th({}, "#"), th({}, "Namn"), th({}, "Elo"), ((function() {
    var k, len1, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      results1.push(th({}, `${i + settings.ONE}`));
    }
    return results1;
  })()).join(""), th({}, "P"), th({}, "PR")), rows.join("")));
  return document.getElementById('stallning').innerHTML = result;
};

showTables = function(shorts, selectedRound) { // Visa bordslistan
  var b, bord, color, j, len, ref, res, result, rows, short, w;
  // G1: Filtrera fram vitspelarna. De sätter bordsordningen mha rounds
  // G2: w b w b osv
  if (rounds.length === 0) {
    return;
  }
  rows = [];
  bord = 0;
  ref = shorts[selectedRound];
  for (j = 0, len = ref.length; j < len; j++) {
    short = ref[j];
    [w, b, color, res] = short;
    if (settings.GAMES === 1) {
      if (color === 'w') {
        if (frirond && w === frirond) {
          rows.push(addTable(bord, '0', w, b));
        } else if (frirond && b === frirond) {
          rows.push(addTable(bord, '2', w, b));
        } else {
          rows.push(addTable(bord, res, w, b));
        }
        bord++;
      }
    }
    if (settings.GAMES === 2) {
      if (color === 'w' && selectedRound % 2 === 0) {
        rows.push(addTable(rows.length, res, w, b));
        bord++;
      } else if (color === 'b' && selectedRound % 2 === 1) {
        rows.push(addTable(rows.length, res, b, w));
        bord++;
      }
    }
  }
  result = div({}, h2({}, `Bordslista för rond ${selectedRound + settings.ONE}`), table({}, thead({}, th({}, "Bord"), th({}, "Vit"), th({}, "Svart"), th({}, "Resultat")), rows.join("")));
  return document.getElementById('tables').innerHTML = result;
};

tableCount = function() {
  return Math.floor(players.length / 2); // Beräkna antal bord
};

updateLongsAndShorts = function() { // Uppdaterar longs och shorts utifrån rounds och results
  var r;
  longs = (function() {
    var j, len, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      results1.push(longForm(rounds[r], results[r]));
    }
    return results1;
  })();
  shorts = longs;
  return longs = _.zip(...longs); // transponerar matrisen
};

setFrirondResults = function() {
  var b, j, len, r, ref, results1, round, t, w;
  if (!frirond) {
    return;
  }
  ref = range(rounds.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    round = rounds[r];
    results1.push((function() {
      var k, len1, ref1, results2;
      ref1 = range(round.length);
      results2 = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        t = ref1[k];
        [w, b] = round[t];
        if (w === frirond) {
          results[r][t] = '0';
        }
        if (b === frirond) {
          results2.push(results[r][t] = '2');
        } else {
          results2.push(void 0);
        }
      }
      return results2;
    })());
  }
  return results1;
};

main = function() { // Hämta urlen i första hand, textarean i andra hand.
  var berger, floating, i, j, len, params, ref;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo();
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseURL();
  if (players.length < 4) {
    showInfo("Du måste ange minst fyra spelare!");
    return;
  }
  berger = settings.ROUNDS === players.length - 1;
  floating = settings.ROUNDS <= Math.floor(players.length / 2);
  if (!berger ^ floating) { //settings.ROUNDS >= players.length // 2 and settings.ROUNDS != players.length - 1
    showInfo("Antalet ronder du angivit är ej acceptabelt!");
    return;
  }
  rounds = berger ? makeBerger() : makeFloating();
  rounds = expand(settings.GAMES, rounds);
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(Array(tableCount()).fill('x'));
  }
  readResults(params);
  setFrirondResults();
  updateLongsAndShorts();
  showPlayers(longs);
  showTables(shorts, 0);
  createSortEvents();
  setCursor(currRound, currTable);
  document.title = settings.TITLE;
  return document.addEventListener('keydown', function(event) { // Hanterar alla tangenttryckningar
    var del, gxr, key, ref1, ref2, ref3;
    if (ref1 = event.key, indexOf.call('abc', ref1) >= 0) {
      document.getElementById("stallning").style.display = (ref2 = event.key, indexOf.call("ac", ref2) >= 0) ? "table" : "none";
      document.getElementById("tables").style.display = (ref3 = event.key, indexOf.call("bc", ref3) >= 0) ? "table" : "none";
    }
    if (event.key === 'ArrowLeft') {
      changeRound(-1);
    }
    if (event.key === 'ArrowRight') {
      changeRound(+1);
    }
    if (event.key === 'ArrowUp') {
      changeTable(-1);
    }
    if (event.key === 'ArrowDown') {
      changeTable(+1);
    }
    del = 'Delete';
    key = event.key;
    if (key === del) {
      setResult(key, 'x'); // "  -  "
    }
    if (key === '0') {
      setResult(key, '0'); // "0 - 1"
    }
    if (key === ' ') {
      setResult(key, '1'); // "½ - ½"
    }
    if (key === '1') {
      setResult(key, '2'); // "1 - 0"
    }
    if (key === 'm') {
      setAllPR(+1);
    }
    if (key === 'l') {
      setAllPR(-1);
    }
    if (key === 'd') {
      echo('Dump:');
      echo('  settings', settings);
      // echo '  href',window.location.href
      echo('  players', players);
      echo('  rounds', rounds);
      echo('  results', results);
      echo('  longs', longs);
      echo('  shorts', shorts);
    }
    gxr = settings.GAMES * settings.ROUNDS;
    if (key === '#') {
      sorteraKolumn(0, true);
    }
    if (key === 'n') {
      sorteraKolumn(1, true);
    }
    if (key === 'e') {
      sorteraKolumn(2, false);
    }
    if (key === 'p') {
      sorteraKolumn(3 + gxr, false);
    }
    if (key === 'r') {
      sorteraKolumn(4 + gxr, false);
    }
    return setCursor(currRound, currTable);
  });
};

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2025\013-FloatingBerger\tournament.coffee