// Generated by CoffeeScript 2.7.0
  // ½ • ↑ ↓ ← →
var ALFABET, BYE, KEYS, TOOLTIPS, addBord, calcTime, changeGroupSize, changeRound, changeTable, convert, createSortEvents, handleKey, initTextarea, koppla, main, makeBerger, makeFairPair, makeURL, myChunk, parseTextarea, parseURL, readResults, roundsContent, safeGet, savePairing, setByeResults, setCursor, setDecimals, setMenuZone, setResult, setScreen, showHelp, showInfo, showMatrix, showNames, showPlayers, showTables, tableCount, updateLongs,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf,
  hasProp = {}.hasOwnProperty;

import {
  Player
} from './player.js';

import {
  FairPair
} from './fairpair.js';

import {
  performance
} from './rating.js';

import {
  echo,
  global,
  range,
  settings
} from './global.js';

ALFABET = '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'; // 100

BYE = "BYE";

KEYS = {
  'ABC': "? GAP A B C GAP ArrowLeft ArrowRight GAP I K".split(' '),
  'A': "# N E P R GAP J L".split(' '),
  'B': "ArrowUp ArrowDown GAP 0 _ 1 Delete".split(' '),
  'C': []
};

TOOLTIPS = {
  '?': "Help",
  'A': "Standings",
  'B': "Tables",
  'C': "Names",
  'ArrowLeft': "Previous Round",
  'J': "Fewer PR decimals",
  'L': "More PR decimals",
  'ArrowRight': "Next Round",
  'I': "Fewer Columns",
  'K': "More Columns",
  'ArrowUp': "Previous Table",
  '0': "White Loss",
  '_': "Draw",
  '1': "White Win",
  'Delete': "Remove Result",
  'ArrowDown': "Next Table",
  '#': "Sort on id",
  'N': "Sort on Name",
  'E': "Sort on Elo",
  'P': "Sort on Point",
  'R': "Sort on PR"
};

//# F U N K T I O N E R ##
addBord = function(bord, res, c0, c1) {
  var color, svart, svart_elo, tr, vit, vit_elo;
  vit = global.players[c0].name;
  svart = global.players[c1].name;
  vit_elo = global.players[c0].elo;
  svart_elo = global.players[c1].elo;
  tr = document.createElement('tr');
  tr.addEventListener("click", function() {
    global.currTable = bord;
    return setCursor(global.currRound, global.currTable);
  });
  color = bord === global.currTable ? 'yellow' : 'white';
  koppla('td', tr, {
    text: bord + settings.ONE
  });
  koppla('td', tr, {
    style: "text-align:left",
    text: vit
  });
  koppla('td', tr, {
    style: "text-align:left",
    text: vit_elo
  });
  koppla('td', tr, {
    style: `text-align:center; background-color:${color}`,
    text: prettyResult(res)
  });
  koppla('td', tr, {
    style: "text-align:left",
    text: svart_elo
  });
  koppla('td', tr, {
    style: "text-align:left",
    text: svart
  });
  return tr;
};

calcTime = function() {
  var base, h, incr, m, total;
  base = parseInt(settings.BASE);
  incr = parseInt(settings.INCR);
  total = (base + incr) * 2 * settings.ROUNDS * settings.GAMES;
  h = Math.floor(total / 60);
  m = modulo(total, 60);
  return `${h}h${m}m`;
};

changeGroupSize = function(key, letter) {
  if (key === 'I' && settings[letter] > 1) {
    settings[letter]--;
  }
  if (key === 'K') {
    if (letter === 'B') {
      echo(settings.B, tableCount(), settings.B < tableCount());
      if (settings.B < tableCount()) {
        settings[letter]++;
      }
    } else {
      settings[letter]++;
    }
  }
  if (key === 'I' || key === 'K') {
    if (letter === 'A') {
      showPlayers();
    }
    if (letter === 'B') {
      showTables();
    }
    if (letter === 'C') {
      return showNames();
    }
  }
};

changeRound = function(delta) { // byt rond och uppdatera bordslistan
  global.currRound = modulo(global.currRound + delta, global.rounds.length);
  global.currTable = 0;
  return setScreen(global.currScreen);
};

changeTable = function(delta) {
  return global.currTable = modulo(global.currTable + delta, tableCount());
};

convert = function(input, a, b) { // byt alla tecken i input som finns i a mot tecken med samma index i b
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

createSortEvents = function() { // Spelarlistan sorteras beroende på vilken kolumn man klickar på. # Name Elo P eller PR
  var k, len, results1, th, ths;
  ths = document.querySelectorAll('#players th');
  results1 = [];
  for (k = 0, len = ths.length; k < len; k++) {
    th = ths[k];
    results1.push((function(th) {
      return th.addEventListener('click', function(event) {
        var key;
        key = th.textContent;
        if (key === '#') {
          global.currSort = '#';
        }
        if (key === 'Name') {
          global.currSort = 'N';
        }
        if (key === 'Elo') {
          global.currSort = 'E';
        }
        if (key === 'P') {
          global.currSort = 'P';
        }
        if (key === 'PR') {
          global.currSort = 'R';
        }
        if (key === '#' || key === 'Name' || key === 'Elo' || key === 'P' || key === 'PR') {
          history.replaceState({}, "", makeURL()); // för att slippa omladdning av sidan
          return setScreen('A');
        }
      });
    })(th));
  }
  return results1;
};

export var expand = function(games, rounds) { // make a double round from a single round
  var b, k, len, result, round, w;
  result = [];
  for (k = 0, len = rounds.length; k < len; k++) {
    round = rounds[k];
    result.push((function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = round.length; l < len1; l++) {
        [w, b] = round[l];
        results1.push([w, b]);
      }
      return results1;
    })());
    if (games === 2) {
      result.push((function() {
        var l, len1, results1;
        results1 = [];
        for (l = 0, len1 = round.length; l < len1; l++) {
          [w, b] = round[l];
          results1.push([b, w]);
        }
        return results1;
      })());
    }
  }
  return result;
};

// export findNumberOfDecimals = (lst) -> # leta upp minsta antal decimaler som krävs för unikhet i listan
// 	best = 0
// 	for i in range 6
// 		unik = _.uniq (item.toFixed(i) for item in lst)
// 		if unik.length > best then [best,ibest] = [unik.length,i]
// 	ibest
handleKey = function(key) {
  var del;
  if (key.length === 1) {
    key = key.toUpperCase();
  }
  if (key === '?') {
    showHelp();
  }
  if (key === 'ArrowLeft') {
    changeRound(-1);
  }
  if (key === 'ArrowRight') {
    changeRound(+1);
  }
  if (key === 'ArrowUp' && global.currScreen === 'B') {
    changeTable(-1);
  }
  if (key === 'ArrowDown' && global.currScreen === 'B') {
    changeTable(+1);
  }
  del = 'Delete';
  if (key === del && global.currScreen === 'B') {
    setResult(key, 'x'); // "  -  "
  }
  if (key === '0' && global.currScreen === 'B') {
    setResult(key, '0'); // "0 - 1"
  }
  if (indexOf.call(' _', key) >= 0 && global.currScreen === 'B') {
    setResult(key, '1'); // "½ - ½"
  }
  if (key === '1' && global.currScreen === 'B') {
    setResult(key, '2'); // "1 - 0"
  }
  if (key === 'J' && global.currScreen === 'A') {
    setDecimals(-1);
  }
  if (key === 'L' && global.currScreen === 'A') {
    setDecimals(+1);
  }
  if (key === 'X') {
    showMatrix();
  }
  if (key === 'Y') {
    echo('Dump', global);
  }
  if (global.currScreen === 'A' && indexOf.call('#NEPR', key) >= 0) { // then handleKey key
    global.currSort = key;
    setScreen('A');
  }
  if (global.currScreen === 'A') {
    changeGroupSize(key, 'A');
  }
  if (global.currScreen === 'B') {
    changeGroupSize(key, 'B');
  }
  if (global.currScreen === 'C') {
    changeGroupSize(key, 'C');
  }
  if (key === 'A') {
    setScreen('A');
  }
  if (key === 'B') {
    setScreen('B');
  }
  if (key === 'C') {
    setScreen('C');
  }
  setCursor(global.currRound, global.currTable);
  if (indexOf.call(' _', key) >= 0 || indexOf.call('Delete 0 1 # N E P R'.split(' '), key) >= 0) {
    return history.replaceState({}, "", makeURL()); // för att slippa omladdning av sidan
  }
};

initTextarea = function() {
  var i, lines, offset, t;
  t = document.getElementById('textarea');
  lines = t.value.split('\n');
  offset = 0;
  i = 0;
  while (lines[i].length > 0) {
    offset += lines[i].length + 1;
    i++;
  }
  t.focus();
  return t.setSelectionRange(offset + 1, t.value.length);
};

koppla = function(typ, parent, attrs = {}) {
  var elem, key;
  elem = document.createElement(typ);
  if ('text' in attrs) {
    elem.textContent = attrs.text;
    delete attrs.text;
  }
  if ('html' in attrs) {
    elem.innerHTML = attrs.html;
    delete attrs.html;
  }
  for (key in attrs) {
    if (!hasProp.call(attrs, key)) continue;
    elem.setAttribute(key, attrs[key]);
  }
  parent.appendChild(elem);
  return elem;
};

export var longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, k, len, ref, res, result, w;
  result = [];
  ref = range(rounds.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  result.sort(function(a, b) {
    return a[0] - b[0];
  });
  return result;
};

makeBerger = function() { // lotta en hel berger-turnering.
  var A, half, i, k, len, n, ref;
  n = global.players.length;
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var k = 0; 0 <= n ? k < n : k > n; 0 <= n ? k++ : k--){ results1.push(k); }
    return results1;
  }).apply(this);
  global.rounds = [];
  ref = range(settings.ROUNDS);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    global.rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return global.rounds;
};

makeFairPair = function() { // lotta en hel fairpair-turnering
  global.fairpair = new FairPair(global.players, settings);
  return global.fairpair.rounds;
};

makeURL = function() {
  var k, l, len, len1, player, r, ref, ref1, s, url;
  url = "./";
  url += `?TITLE=${settings.TITLE}`;
  url += `&GAMES=${settings.GAMES}`;
  url += `&ROUNDS=${settings.ROUNDS}`;
  url += `&SORT=${settings.SORT}`;
  url += `&BASE=${settings.BASE}`;
  url += `&INCR=${settings.INCR}`;
  url += `&currSort=${global.currSort}`.replace('#', '%23');
  url += `&ONE=${settings.ONE}`;
  url += `&BALANCE=${settings.BALANCE}`;
  url += `&A=${settings.A}`;
  url += `&B=${settings.B}`;
  url += `&C=${settings.C}`;
  ref = global.players;
  for (k = 0, len = ref.length; k < len; k++) {
    player = ref[k];
    url += `&p=${player}`;
  }
  ref1 = range(global.rounds.length);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    r = ref1[l];
    s = global.results[r].join('');
    s = _.trimEnd(s, 'x');
    if (s !== '') {
      url += `&r${r + 1}=${s}`;
    }
  }
  url = url.replaceAll(' ', '+');
  return url;
};

myChunk = function(items, groups) {
  var n, size;
  n = items.length;
  size = Math.floor(n / groups);
  if (n % groups > 0) {
    size++;
  }
  return _.chunk(items, size);
};

export var other = function(input) {
  return convert(input, "012x", "210x");
};

parseTextarea = function() { // läs in initiala uppgifter om spelarna
  var elo, k, key, l, len, len1, line, lines, n, name, person, persons, raw, url, val;
  raw = document.getElementById("textarea");
  lines = raw.value;
  lines = lines.split("\n");
  global.rounds = null;
  global.players = [];
  persons = [];
  for (k = 0, len = lines.length; k < len; k++) {
    line = lines[k];
    if (line.length === 0 || line[0] === '#') {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (indexOf.call("TITLE GAMES ROUNDS BASE INCR SORT ONE BALANCE A B C P".split(' '), key) >= 0) {
        settings[key] = val;
      }
    } else {
      persons.push(line);
    }
  }
  if ('P' in settings && settings.P !== 0) {
    persons = persons.slice(0, settings.P);
  }
  persons.sort().reverse();
  for (l = 0, len1 = persons.length; l < len1; l++) {
    person = persons[l];
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    global.players.push(new Player(global.players.length, name, elo));
  }
  n = global.players.length;
  if (settings.A > n) {
    settings.A = n;
  }
  if (settings.B > n) {
    settings.B = n;
  }
  if (settings.C > n) {
    settings.C = n;
  }
  if (global.players.length % 2 === 1) {
    global.frirond = global.players.length;
    global.players.push('0000 ' + BYE);
  } else {
    global.frirond = null;
  }
  if (settings.ROUNDS === 0) {
    settings.ROUNDS = global.players.length - 1;
  }
  if (global.rounds === null) {
    global.rounds = [];
  }
  url = makeURL();
  global.players = [];
  global.rounds = [];
  window.location.href = url;
  return echo('window.location.href = url');
};

parseURL = function() {
  var elo, i, k, l, len, len1, n, name, params, person, persons, ref;
  params = new URLSearchParams(window.location.search);
  settings.TITLE = safeGet(params, "TITLE");
  settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  settings.BASE = safeGet(params, 'BASE', "10");
  settings.INCR = safeGet(params, 'INCR', "5");
  global.currSort = safeGet(params, "currSort", "#");
  settings.ONE = parseInt(safeGet(params, "ONE", "1"));
  settings.BALANCE = parseInt(safeGet(params, "BALANCE", "1"));
  settings.A = parseInt(safeGet(params, "A", "1"));
  settings.B = parseInt(safeGet(params, "B", "1"));
  settings.C = parseInt(safeGet(params, "C", "1"));
  global.players = [];
  persons = params.getAll("p");
  // settings.P = parseInt safeGet params, "P", persons.length
  if (window.location.href.includes(BYE)) {
    global.frirond = persons.length - 1;
  }
  if (settings.SORT === 1) {
    persons.sort().reverse();
  }
//.slice 0, settings.P
  for (k = 0, len = persons.length; k < len; k++) {
    person = persons[k];
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    global.players.push(new Player(global.players.length, name, elo));
  }
  settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${global.players.length - 1}`));
  // initialisera rounds med 'x' i alla celler
  n = Math.floor(global.players.length / 2);
  global.rounds = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    global.rounds.push(new Array(n).fill('x'));
  }
  return readResults(params);
};

export var prettyResult = function(ch) { // översätt interna resultat till externa
  if (ch === 'x') {
    return "-";
  }
  if (ch === '0') {
    return "0 - 1";
  }
  if (ch === '1') {
    return "½ - ½";
  }
  if (ch === '2') {
    return "1 - 0";
  }
};

readResults = function(params) { // Resultaten läses från urlen
  var arr, ch, k, l, len, len1, n, r, ref, result, results1;
  global.results = [];
  n = global.players.length;
  if (global.frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(settings.GAMES * settings.ROUNDS);
  results1 = [];
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    result = safeGet(params, `r${r + 1}`, new Array(n).fill("x"));
    arr = [];
    for (l = 0, len1 = result.length; l < len1; l++) {
      ch = result[l];
      if (ch === '0') {
        arr.push('0');
      }
      if (ch === '1') {
        arr.push('1');
      }
      if (ch === '2') {
        arr.push('2');
      }
      if (ch === 'x') {
        arr.push('x');
      }
    }
    results1.push(global.results.push(arr));
  }
  return results1;
};

roundsContent = function(long, i, tr) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, k, len, opponent, result, results1, w;
  results1 = [];
  for (k = 0, len = long.length; k < len; k++) {
    [w, b, color, result] = long[k];
    opponent = w === i ? b : w;
    result = convert(result, 'x012', ' 0½1');
    attr = color === 'w' ? "right:0px;" : "left:0px;";
    cell = koppla('td', tr, {
      style: "position:relative;"
    });
    koppla('div', cell, {
      style: "position:absolute; top:0px; font-size:0.7em;" + attr,
      text: settings.ONE + opponent
    });
    results1.push(koppla('div', cell, {
      style: "position:relative; font-size:1.1em; top:6px",
      text: result
    }));
  }
  return results1;
};

safeGet = function(params, key, standard = "") { // Hämta parametern given av key från urlen
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

savePairing = function(r, A, half, n) { // skapa en bordslista utifrån berger.
  var i, k, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = k = 1, ref = half; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (global.frirond) {
    lst.push(lst.shift());
  }
  return lst.sort();
};

setByeResults = function() {
  var b, k, len, r, ref, results1, round, t, w;
  if (global.frirond === null) {
    return;
  }
  ref = range(global.rounds.length);
  results1 = [];
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    round = global.rounds[r];
    results1.push((function() {
      var l, len1, ref1, results2;
      ref1 = range(round.length);
      results2 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        t = ref1[l];
        [w, b] = round[t];
        if (global.berger) {
          if (w === global.frirond) {
            global.results[r][t] = '2';
          }
          if (b === global.frirond) {
            results2.push(global.results[r][t] = '0');
          } else {
            results2.push(void 0);
          }
        } else {
          if (w === global.frirond) {
            global.results[r][t] = '0';
          }
          if (b === global.frirond) {
            results2.push(global.results[r][t] = '2');
          } else {
            results2.push(void 0);
          }
        }
      }
      return results2;
    })());
  }
  return results1;
};

setCursor = function(round, table) { // Den gula bakgrunden uppdateras beroende på piltangenterna
  var bgColor, color, index, k, l, len, len1, results1, th, ths, tr, trs;
  if (global.currScreen === 'A') {
    ths = document.querySelectorAll('#players th');
    for (index = k = 0, len = ths.length; k < len; index = ++k) {
      th = ths[index];
      if (index === global.currRound + 3) {
        bgColor = 'yellow';
        color = 'black';
      } else {
        bgColor = '2f4f6f';
        color = 'white';
      }
      th.style = `background-color:${bgColor}; color:${color};`;
    }
  }
  if (global.currScreen === 'B') {
    trs = document.querySelectorAll('#tables tr');
    results1 = [];
    for (index = l = 0, len1 = trs.length; l < len1; index = ++l) {
      tr = trs[index];
      color = index === global.currTable + 0 ? 'yellow' : 'white';
      results1.push(tr.children[5 - 2].style = `background-color:${color}`);
    }
    return results1;
  }
};

setDecimals = function(delta) {
  var decimals;
  decimals = settings.DECIMALS + delta;
  if ((0 <= decimals && decimals <= 6)) {
    settings.DECIMALS = decimals;
  }
  return showPlayers();
};

setMenuZone = function(key, zone) {
  var btn, k, len, ref, results1, skey;
  ref = KEYS[key];
  results1 = [];
  for (k = 0, len = ref.length; k < len; k++) {
    key = ref[k];
    skey = (function() {
      switch (key) {
        case 'ArrowLeft':
          return skey = '←';
        case 'ArrowRight':
          return skey = '→';
        case 'ArrowUp':
          return skey = '↑';
        case 'ArrowDown':
          return skey = '↓';
        case 'Delete':
          return skey = 'Del';
        default:
          return key;
      }
    })();
    if (key === 'GAP') {
      results1.push(koppla('span', zone, {
        style: "display: inline-block; width: 0.5rem;"
      }));
    } else {
      // echo 'xxx',key,global.currSort
      if (key === global.currScreen || key === global.currSort) {
        koppla('span', zone, {
          class: 'pseudo-btn',
          text: skey
        });
      } else {
        btn = koppla('button', zone, {
          text: skey,
          title: TOOLTIPS[key]
        });
        (function(key) {
          return btn.addEventListener('click', function() {
            return handleKey(key);
          });
        })(key);
      }
      if (key === '_') {
        btn.style = "color: transparent";
        results1.push(key = ' ');
      } else {
        results1.push(void 0);
      }
    }
  }
  return results1;
};

setResult = function(key, res) { // Uppdatera results samt gui:t.
  var b, cell, old, tr, tr5, trs, w;
  old = global.results[global.currRound][global.currTable];
  [w, b] = global.rounds[global.currRound][global.currTable];
  if (global.frirond && (w === global.frirond || b === global.frirond)) {
    return;
  }
  cell = old + res; // transition, 16 possibilities
  if (indexOf.call('xx 00 11 22'.split(' '), cell) >= 0) { // lyckad kontrollinmatning, gå till nästa bord
    global.currTable = modulo(global.currTable + 1, tableCount());
    return;
  }
  if (indexOf.call('01 02 10 12 20 21'.split(' '), cell) >= 0) {
    echo('exit'); // inmatning stämmer ej, lämna
    return;
  }
  
  // uppdatera och gå till nästa bord
  global.results[global.currRound][global.currTable] = res;
  updateLongs();
  // Uppdatera GUI för tables kirurgiskt
  trs = document.querySelectorAll('#tables tr');
  tr = trs[global.currTable];
  tr5 = tr.children[5 - 2];
  tr5.textContent = prettyResult(res);
  return global.currTable = modulo(global.currTable + 1, tableCount());
};

setScreen = function(letter) {
  var h3, hdr, leftZone, menu, rightZone, spacer;
  global.currScreen = letter;
  if (letter === 'A') {
    showPlayers();
  }
  if (letter === 'B') {
    showTables();
  }
  if (letter === 'C') {
    showNames();
  }
  hdr = document.getElementById('hdr');
  hdr.innerHTML = '';
  menu = koppla('header', hdr, {
    class: "menu no-print",
    style: "position:fixed"
  });
  
  // två underbehållare
  leftZone = koppla('div', menu, {
    class: 'zone left'
  });
  rightZone = koppla('div', menu, {
    class: 'zone right'
  });
  setMenuZone("ABC", leftZone);
  setMenuZone(letter, rightZone);
  spacer = koppla('div', hdr, {
    class: "no-print",
    style: "height:1px;"
  });
  h3 = koppla('h3', hdr);
  if (letter === 'A') {
    h3.textContent = "Standings for " + settings.TITLE;
  }
  if (letter === 'B') {
    h3.textContent = `Tables round ${global.currRound + settings.ONE} for ${settings.TITLE}`;
  }
  if (letter === 'C') {
    h3.textContent = `Names round ${global.currRound + settings.ONE} for ${settings.TITLE}`;
  }
  document.getElementById('players').style.display = letter === 'A' ? 'flex' : 'none';
  document.getElementById('tables').style.display = letter === 'B' ? 'flex' : 'none';
  return document.getElementById('names').style.display = letter === 'C' ? 'flex' : 'none';
};

showHelp = async function() {
  var mdText, r, win;
  r = (await fetch("help.md"));
  mdText = (await r.text());
  win = window.open("", "_blank");
  win.document.write(`<html><head><title>Help</title> <link rel='stylesheet' href='style.css'> </head><body>${marked.parse(mdText)}</body></html>`);
  win.document.close();
  return initTextarea();
};

showInfo = function(message) { // Visa helpText på skärmen
  var pre;
  pre = document.getElementById('info');
  pre.className = "help";
  return pre.innerHTML = message;
};

showMatrix = function() { // Visa matrisen Alla mot alla. Dot betyder: inget möte
  var SPACING, i, j, k, l, len, len1, len2, len3, line, m, n, o, q, r, ref, ref1, ref2, results1, results2, round;
  SPACING = ' ';
  n = global.players.length;
  if (n > ALFABET.length) {
    n = ALFABET.length;
  }
  if (global.berger) {
    if (settings.GAMES === 2) {
      return;
    }
    global.matrix = (function() {
      var k, len, ref, results1;
      ref = range(n);
      results1 = [];
      for (k = 0, len = ref.length; k < len; k++) {
        j = ref[k];
        results1.push((function() {
          var l, len1, ref1, results2;
          ref1 = range(n);
          results2 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            i = ref1[l];
            results2.push("•");
          }
          return results2;
        })());
      }
      return results1;
    })();
    m = global.matrix;
    ref = range(global.rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      round = global.rounds[r];
      for (l = 0, len1 = round.length; l < len1; l++) {
        [i, j] = round[l];
        if (i === m.length || j === m[0].length) {
          continue;
        }
        m[i][j] = `${'123456789abcdefgh'[r]}`;
        m[j][i] = `${'123456789abcdefgh'[r]}`;
      }
    }
    echo('    ' + ((function() {
      var len2, o, ref1, results1;
      ref1 = range(n);
      results1 = [];
      for (o = 0, len2 = ref1.length; o < len2; o++) {
        i = ref1[o];
        results1.push(ALFABET[i]);
      }
      return results1;
    })()).join(SPACING));
    ref1 = range(n);
    results1 = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      i = ref1[o];
      line = m[i].slice(0, n);
      results1.push(echo(ALFABET[i] + '   ' + line.join(SPACING) + '   ' + global.players[i].elo)); // + ' ' + Math.round global.players[i].summa
    }
    return results1;
  } else {
    echo('    ' + ((function() {
      var len3, q, ref2, results2;
      ref2 = range(n);
      results2 = [];
      for (q = 0, len3 = ref2.length; q < len3; q++) {
        i = ref2[q];
        results2.push(ALFABET[i]);
      }
      return results2;
    })()).join(SPACING));
    ref2 = range(n);
    results2 = [];
    for (q = 0, len3 = ref2.length; q < len3; q++) {
      i = ref2[q];
      line = global.fairpair.matrix[i].slice(0, n);
      results2.push(echo(ALFABET[i] + '   ' + line.join(SPACING) + '   ' + global.players[i].elo)); // + ' ' + Math.round global.players[i].summa
    }
    return results2;
  }
};

showNames = function() {
  var b, container, groups, i, k, len, pb, persons, pw, ref, w;
  persons = [];
  ref = global.rounds[global.currRound];
  for (i = k = 0, len = ref.length; k < len; i = ++k) {
    [w, b] = ref[i];
    pw = [global.players[w].name, `${i + settings.ONE} • W`];
    pb = [global.players[b].name, `${i + settings.ONE} • B`];
    if (pw[0] === BYE) {
      pb[1] = BYE;
      persons.push(pb);
    } else if (pb[0] === BYE) {
      pw[1] = BYE;
      persons.push(pw);
    } else {
      persons.push(pw);
      persons.push(pb);
    }
  }
  persons.sort();
  groups = myChunk(persons, settings.C);
  container = document.getElementById('names');
  container.innerHTML = ''; // rensa
  container.className = 'groups';
  return groups.forEach((group) => {
    var tabell, thead;
    tabell = koppla('table', container, {
      class: 'group'
    });
    thead = koppla('thead', tabell);
    koppla('th', thead, {
      text: "Name"
    });
    koppla('th', thead, {
      text: "Table"
    });
    return group.forEach((p) => {
      var td1, td2, tr1;
      tr1 = koppla('tr', tabell);
      td1 = koppla('td', tr1, {
        style: "text-align:left",
        text: p[0]
      });
      return td2 = koppla('td', tr1, {
        style: "text-align:center",
        text: p[1]
      });
    });
  });
};

showPlayers = function() { // Visa spelarlistan.
  var container, groups, i, k, len, memory, offset, player, ref, sortedPlayers;
  ref = global.players;
  for (i = k = 0, len = ref.length; k < len; i = ++k) {
    player = ref[i];
    player.update_P_and_PR(global.longs, i);
  }
  sortedPlayers = _.clone(global.players);
  // Tag bort BYE om den finns.
  if (global.frirond !== null) {
    memory = _.first(_.remove(sortedPlayers, function(item) {
      return item.name === BYE;
    }));
  }
  sortedPlayers.sort((a, b) => {
    if (global.currSort === '#') {
      return a.id - b.id;
    }
    if (global.currSort === 'N') {
      return a.name.localeCompare(b.name, "sv");
    }
    if (global.currSort === 'E') {
      return b.elo - a.elo;
    }
    if (global.currSort === 'P') {
      return b.P - a.P;
    }
    if (global.currSort === 'R') {
      return b.PR - a.PR;
    }
  });
  // Lägg tillbaka BYE i slutet
  // if global.frirond != null then sortedPlayers.push memory
  groups = myChunk(sortedPlayers, settings.A);
  // if _.last(groups).length == 1 and _.last(groups)[0].name == BYE then groups.pop()
  container = document.getElementById('players');
  container.innerHTML = '';
  container.className = 'groups';
  offset = 0;
  groups.forEach((group) => {
    var l, len1, ref1, tabell, thead;
    tabell = koppla('table', container, {
      class: 'group'
    });
    thead = koppla('thead', tabell);
    koppla('th', thead, {
      text: "#",
      class: 'clickableCols'
    });
    koppla('th', thead, {
      text: "Name",
      class: 'clickableCols'
    });
    koppla('th', thead, {
      text: "Elo",
      class: 'clickableCols'
    });
    ref1 = range(global.rounds.length);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      koppla('th', thead, {
        text: `${i + settings.ONE}`
      });
    }
    koppla('th', thead, {
      text: "P",
      class: 'clickableCols'
    });
    koppla('th', thead, {
      text: "PR",
      class: 'clickableCols'
    });
    group.forEach((player) => {
      var len2, long, o, ref2, tr;
      if (player.name === BYE) {
        return;
      }
      tr = koppla('tr', tabell, {
        style: "height: 28px" // 27 ger ojämna höjder
      });
      koppla('td', tr, {
        text: player.id + settings.ONE
      });
      koppla('td', tr, {
        style: "text-align:left",
        text: player.name // .slice 0,20
      });
      koppla('td', tr, {
        text: player.elo
      });
      long = global.longs[player.id];
      roundsContent(long, player.id, tr);
      ref2 = range(long.length, global.rounds.length);
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        i = ref2[o];
        koppla('td', tr, {
          style: "text-align:left",
          'x': 'x'
        });
      }
      koppla('td', tr, {
        style: "text-align:right",
        text: player.P.toFixed(1)
      });
      return koppla('td', tr, {
        style: "text-align:right",
        text: player.PR.toFixed(settings.DECIMALS)
      });
    });
    return offset += group.length; // settings.A
  });
  return createSortEvents();
};

showTables = function() { // Visa bordslistan
  var container, groups, offset, round;
  if (global.rounds.length === 0) {
    return;
  }
  round = global.rounds[global.currRound];
  groups = myChunk(round, settings.B);
  container = document.getElementById('tables');
  container.innerHTML = '';
  container.className = 'groups';
  offset = 0;
  return groups.forEach((group) => {
    var k, len, ref, rubrik, tabell, thead;
    tabell = koppla('table', container, {
      class: 'group clickableRows'
    });
    thead = koppla('thead', tabell);
    ref = "Table White Elo Result Elo Black".split(' ');
    for (k = 0, len = ref.length; k < len; k++) {
      rubrik = ref[k];
      koppla('th', thead, {
        text: rubrik
      });
    }
    group.forEach(([w, b], iTable) => {
      return tabell.appendChild(addBord(offset + iTable, global.results[global.currRound][offset + iTable], w, b));
    });
    return offset += group.length; //settings.B
  });
};

tableCount = function() {
  return Math.floor(global.players.length / 2); // Beräkna antal bord
};

updateLongs = function() { // Uppdaterar longs utifrån rounds och results
  var r;
  global.longs = (function() {
    var k, len, ref, results1;
    ref = range(global.rounds.length);
    results1 = [];
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      results1.push(longForm(global.rounds[r], global.results[r]));
    }
    return results1;
  })();
  return global.longs = _.zip(...global.longs); // transponerar matrisen
};

main = function() { // Hämta urlen i första hand, textarean i andra hand.
  var fairpairFlag, i, k, len, params, ref;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    initTextarea();
    document.getElementById("help").addEventListener("click", showHelp);
    document.getElementById("continue").addEventListener("click", parseTextarea);
    return;
  }
  document.getElementById("help").style = 'display: none';
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("panel").style = 'display: none';
  document.getElementById("continue").style = 'display: none';
  parseURL();
  if (global.players.length < 4) {
    showInfo("You must have four or more players!");
    return;
  }
  global.berger = settings.ROUNDS === global.players.length - 1;
  fairpairFlag = settings.ROUNDS <= Math.floor(global.players.length / 2);
  if (!global.berger ^ fairpairFlag) { //settings.ROUNDS >= players.length // 2 and settings.ROUNDS != players.length - 1
    showInfo("The number of rounds is not accepted!");
    return;
  }
  global.rounds = global.berger ? makeBerger() : makeFairPair();
  global.rounds = expand(settings.GAMES, global.rounds);
  ref = range(settings.ROUNDS);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    global.results.push(Array(tableCount()).fill('x'));
  }
  readResults(params);
  setByeResults();
  updateLongs();
  setScreen('A');
  setCursor(global.currRound, global.currTable);
  document.title = calcTime() + ' ' + settings.TITLE;
  return document.addEventListener('keydown', function(event) { // Hanterar alla tangenttryckningar
    var rad, ref1;
    if (event.ctrlKey || event.metaKey || event.altKey) { // förhindrar att ctrl p sorterar på poäng
      return;
    }
    if ((ref1 = event.key) === 'ArrowDown' || ref1 === 'ArrowUp' || ref1 === ' ') {
      event.preventDefault();
    }
    handleKey(event.key);
    // tvinga bordet att synas
    if (global.currScreen === 'B') {
      rad = document.querySelectorAll("#tables table tr")[global.currTable];
      return rad.scrollIntoView({
        behavior: "smooth",
        block: "center"
      });
    }
  });
};

main();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FloatingBerger\tournament.coffee