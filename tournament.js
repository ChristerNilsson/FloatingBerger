// Generated by CoffeeScript 2.7.0
  // ½ •
var ALFABET, ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT, NAME_COLS, addBord, changeRound, changeTable, convert, convertLong, createSortEvents, currRound, currScreen, currTable, echo, flip, frirond, invert, koppla, longs, main, makeBerger, makeFloating, makeURL, parseTextarea, parseURL, players, range, readResults, results, rounds, roundsContent, safeGet, savePairing, setAllPR, setByeResults, setCursor, setP, setPR, setResult, setScreen, settings, showInfo, showMatrix, showNames, showPlayers, showTables, sortColumn, tableCount, updateLongs,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf,
  hasProp = {}.hasOwnProperty;

import {
  Player
} from './player.js';

import {
  Floating
} from './floating.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

// import {table,thead,th,tr,td,a,div,pre,p,h2} from './html.js'
echo = console.log;

range = _.range;

ALIGN_LEFT = {
  style: "text-align:left"
};

ALIGN_CENTER = {
  style: "text-align:center"
};

ALIGN_RIGHT = {
  style: "text-align:right"
};

ALFABET = '12345678901234567890123456789012345678901234567890';

NAME_COLS = 5;

//# V A R I A B L E R ##
settings = {
  TITLE: 'Titel saknas',
  GAMES: 1,
  ROUNDS: 0,
  SORT: 1,
  ONE: 1,
  BALANCE: 1,
  DECIMALS: 0 // ONE = 1 # 0=dev 1=prod
};


// Tillståndet ges av dessa variabler:
players = [];

results = []; // ronder x bord. cell: 'x', '0', '1' eller '2'

rounds = []; // ronder x bord. cell: [w,b] 

longs = []; // players x ronder. cell: [w,b,col,res]

currScreen = 'a';

currRound = 0;

currTable = 0;

frirond = null; // ingen frirond. Annars index för frironden


//# F U N K T I O N E R ##
addBord = function(bord, res, c0, c1) {
  var color, svart, svart_elo, tr1, vit, vit_elo;
  vit = players[c0].name;
  svart = players[c1].name;
  vit_elo = players[c0].elo;
  svart_elo = players[c1].elo;
  tr1 = document.createElement('tr');
  color = bord === currTable ? 'yellow' : 'white';
  koppla('td', tr1, {
    textContent: bord + settings.ONE
  });
  koppla('td', tr1, {
    style: "text-align:left",
    textContent: vit
  });
  koppla('td', tr1, {
    style: "text-align:left",
    textContent: vit_elo
  });
  koppla('td', tr1, {
    style: "text-align:left",
    textContent: svart_elo
  });
  koppla('td', tr1, {
    style: "text-align:left",
    textContent: svart
  });
  koppla('td', tr1, {
    style: `text-align:center; background-color:${color}`,
    textContent: prettyResult(res)
  });
  return tr1;
};

changeRound = function(delta) { // byt rond och uppdatera bordslistan
  currRound = modulo(currRound + delta, rounds.length);
  currTable = 0;
  setScreen(currScreen);
  showTables();
  return showNames();
};

changeTable = function(delta) { // byt bord
  return currTable = modulo(currTable + delta, tableCount());
};

convert = function(input, a, b) { // byt alla tecken i input som finns i a mot tecken med samma index i b
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

convertLong = function(input, a, b) { // byt alla tecken i input som finns i a mot sträng med samma index i b. b är separerad med |
  var i;
  i = a.indexOf(input);
  b = b.split('|');
  if (indexOf.call(a, input) >= 0) {
    return b[i];
  } else {
    return input;
  }
};

createSortEvents = function() { // Spelarlistan sorteras beroende på vilken kolumn man klickar på. # Namn Elo P eller PR
  var _th, index, j, len, results1, ths;
  ths = document.querySelectorAll('#stallning th');
  index = -1;
  results1 = [];
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index++;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var key;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - settings.ONE;
          showTables(); // key
          return;
        }
        return sortColumn(index, indexOf.call("# Namn".split(' '), key) >= 0);
      });
    })(_th, index));
  }
  return results1;
};

export var expand = function(games, rounds) { // make a double round from a single round
  var b, j, len, result, round, w;
  result = [];
  for (j = 0, len = rounds.length; j < len; j++) {
    round = rounds[j];
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([w, b]);
      }
      return results1;
    })());
    if (games === 2) {
      result.push((function() {
        var k, len1, results1;
        results1 = [];
        for (k = 0, len1 = round.length; k < len1; k++) {
          [w, b] = round[k];
          results1.push([b, w]);
        }
        return results1;
      })());
    }
  }
  // echo players
  return result;
};

export var findNumberOfDecimals = function(lst) { // leta upp minsta antal decimaler som krävs för unikhet i listan
  var best, i, ibest, item, j, len, ref, unik;
  best = 0;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    unik = _.uniq((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = lst.length; k < len1; k++) {
        item = lst[k];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

flip = function(flag, id) {
  flag = 1 - flag;
  document.getElementById(id).style.display = ["none", "table"][flag];
  return flag;
};

invert = function(lst) {
  var i, item, j, len, ref, result;
  result = _.clone(lst);
  ref = range(lst.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    item = lst[i];
    result[item] = i;
  }
  return result;
};

koppla = function(typ, parent, attrs = {}) {
  var elem, key;
  elem = document.createElement(typ);
  if ('textContent' in attrs) {
    elem.textContent = attrs.textContent;
    delete attrs.textContent;
  }
  if ('html' in attrs) {
    elem.innerHTML = attrs.html;
    delete attrs.html;
  }
  for (key in attrs) {
    if (!hasProp.call(attrs, key)) continue;
    elem.setAttribute(key, attrs[key]);
  }
  parent.appendChild(elem);
  return elem;
};

export var longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, j, len, ref, res, result, w;
  result = [];
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  result.sort(function(a, b) {
    return a[0] - b[0];
  });
  return result;
};

makeBerger = function() { // lotta en hel berger-turnering.
  var A, half, i, j, len, n, ref;
  
  n = players.length;
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

makeFloating = function() { // lotta en hel floating-turnering
  var floating;
  floating = new Floating(players, settings);
  showMatrix(floating);
  return floating.rounds;
};

makeURL = function() {
  var j, k, len, len1, player, r, ref, s, url;
  url = "./";
  url += `?TITLE=${settings.TITLE}`;
  url += `&GAMES=${settings.GAMES}`;
  url += `&ROUNDS=${settings.ROUNDS}`;
  url += `&SORT=${settings.SORT}`;
  url += `&ONE=${settings.ONE}`;
  url += `&BALANCE=${settings.BALANCE}`;
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    r = ref[k];
    s = results[r].join('');
    s = _.trimEnd(s, 'x');
    if (s !== '') {
      url += `&r${r + 1}=${s}`;
    }
  }
  url = url.replaceAll(' ', '+');
  return url;
};

export var other = function(input) {
  return convert(input, "012FG", "21022");
};

parseTextarea = function() { // läs in initiala uppgifter om spelarna
  var j, key, len, line, lines, raw, url, val;
  raw = document.getElementById("textarea");
  lines = raw.value;
  lines = lines.split("\n");
  rounds = null;
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line.length === 0 || line[0] === '#') {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        settings.TITLE = val;
      }
      if (key === 'GAMES') {
        settings.GAMES = val;
      }
      if (key === 'ROUNDS') {
        settings.ROUNDS = val;
      }
      if (key === 'SORT') {
        settings.SORT = val;
      }
      if (key === 'ONE') {
        settings.ONE = val;
      }
      if (key === 'BALANCE') {
        settings.BALANCE = val;
      }
    } else {
      players.push(line);
    }
  }
  if (players.length % 2 === 1) {
    frirond = players.length;
    players.push('0000 FRIROND');
  } else {
    frirond = null;
  }
  if (settings.ROUNDS === 0) {
    settings.ROUNDS = players.length - 1;
  }
  if (rounds === null) {
    rounds = [];
  }
  url = makeURL();
  players = [];
  rounds = [];
  window.location.href = url;
  return echo('window.location.href = url');
};

parseURL = function() {
  var elo, i, j, k, len, len1, n, name, params, person, persons, ref;
  params = new URLSearchParams(window.location.search);
  settings.TITLE = safeGet(params, "TITLE");
  settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  settings.ONE = parseInt(safeGet(params, "ONE", "1"));
  settings.BALANCE = parseInt(safeGet(params, "BALANCE", "1"));
  players = [];
  persons = params.getAll("p");
  if (window.location.href.includes('FRIROND')) {
    frirond = persons.length - 1;
  }
  if (settings.SORT === 1) {
    persons.sort().reverse();
  }
  settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  i = 0;
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    i += 1;
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    players.push(new Player(players.length, name, elo));
  }
  // initialisera rounds med 'x' i alla celler
  n = Math.floor(players.length / 2);
  rounds = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    rounds.push(new Array(n).fill('x'));
  }
  return readResults(params);
};

export var prettyResult = function(ch) { // översätt interna resultat till externa
  if (ch === 'x') {
    return "-";
  }
  if (ch === '0') {
    return "0 - 1";
  }
  if (ch === '1') {
    return "½ - ½";
  }
  if (ch === '2') {
    return "1 - 0";
  }
};

readResults = function(params) { // Resultaten läses från urlen
  var arr, ch, j, k, len, len1, n, r, ref, result, results1;
  results = [];
  n = players.length;
  if (frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(settings.GAMES * settings.ROUNDS);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    result = safeGet(params, `r${r + 1}`, new Array(n).fill("x"));
    arr = [];
    for (k = 0, len1 = result.length; k < len1; k++) {
      ch = result[k];
      if (ch === '0') {
        arr.push('0');
      }
      if (ch === '1') {
        arr.push('1');
      }
      if (ch === '2') {
        arr.push('2');
      }
      if (ch === 'x') {
        arr.push('x');
      }
    }
    results1.push(results.push(arr));
  }
  return results1;
};

safeGet = function(params, key, standard = "") { // Hämta parametern given av key från urlen
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

savePairing = function(r, A, half, n) { // skapa en bordslista utifrån berger.
  var i, j, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = j = 1, ref = half; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (frirond) {
    lst.push(lst.shift());
  }
  return lst.sort();
};

setAllPR = function(delta) {
  var _tdPR, decimals, index, j, len, ref, results1, trs;
  decimals = settings.DECIMALS + delta;
  if ((0 <= decimals && decimals <= 6)) {
    settings.DECIMALS = decimals;
  }
  trs = document.querySelectorAll('#stallning tr');
  ref = range(players.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    if (players[index].PR > 0) {
      _tdPR = trs[index + 1].children[4 + settings.GAMES * settings.ROUNDS];
      results1.push(_tdPR.textContent = players[index].PR.toFixed(settings.DECIMALS));
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

setByeResults = function() {
  var b, j, len, r, ref, results1, round, t, w;
  if (!frirond) {
    return;
  }
  ref = range(rounds.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    round = rounds[r];
    results1.push((function() {
      var k, len1, ref1, results2;
      ref1 = range(round.length);
      results2 = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        t = ref1[k];
        [w, b] = round[t];
        if (w === frirond) {
          results[r][t] = '0';
        }
        if (b === frirond) {
          results2.push(results[r][t] = '2');
        } else {
          results2.push(void 0);
        }
      }
      return results2;
    })());
  }
  return results1;
};

setCursor = function(round, table) { // Den gula bakgrunden uppdateras beroende på piltangenterna
  var _th, _tr, color, index, j, k, len, len1, results1, ths, trs;
  ths = document.querySelectorAll('#stallning th');
// index = -1
  for (index = j = 0, len = ths.length; j < len; index = ++j) {
    _th = ths[index];
    // index++
    color = index === currRound + 3 ? 'yellow' : 'white';
    _th.style = `background-color:${color}`;
  }
  trs = document.querySelectorAll('#tables tr');
// index = -1
  results1 = [];
  for (index = k = 0, len1 = trs.length; k < len1; index = ++k) {
    _tr = trs[index];
    // index++
    color = index === currTable + 0 ? 'yellow' : 'white';
    results1.push(_tr.children[5].style = `background-color:${color}`);
  }
  return results1;
};

setP = function(trs, index, translator) {
  var _tdP, andel, ch, elo, elos, j, len, opp, perf, r, ref, scoresP, scoresPR, value;
  scoresP = 0;
  scoresPR = 0;
  elos = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    ch = longs[index][r][3];
    value = '012'.indexOf(ch);
    opp = longs[index][r][1];
    if (value !== -1) {
      elo = players[opp].elo;
      scoresP += value;
      if (elo !== 0) {
        scoresPR += value;
        elos.push(Math.round(elo));
      }
    }
  }
  _tdP = trs[translator[index] + 1 - 1].children[3 + settings.GAMES * settings.ROUNDS];
  _tdP.textContent = elos.length === 0 ? '' : (scoresP / 2).toFixed(1);
  // kalkylera performance rating mha vinstandel och elo-tal
  if (elos.length === 0) {
    return players[index].PR = 0;
  } else {
    andel = scoresPR / 2;
    perf = performance(andel, elos);
    return players[index].PR = perf;
  }
};

setPR = function(trs, index, translator) {
  var _tdPR;
  _tdPR = trs[translator[index] + 1 - 1].children[4 + settings.GAMES * settings.ROUNDS];
  return _tdPR.textContent = players[index].PR === 0 ? '' : players[index].PR.toFixed(settings.DECIMALS);
};

setResult = function(key, res) { // Uppdatera results samt gui:t.
  var _td, _tr, b, cell, i, j, len, old, one, ref, tr5, translator, trs, w;
  //echo 'setResult'
  trs = document.querySelectorAll('#stallning tr');
  old = results[currRound][currTable];
  [w, b] = rounds[currRound][currTable];
  if (frirond && (w === frirond || b === frirond)) {
    return;
  }
  cell = old + res; // transition, 16 possibilities
  //echo 'cell',cell
  if (indexOf.call('xx 00 11 22'.split(' '), cell) >= 0) { // lyckad kontrollinmatning, gå till nästa bord
    currTable = modulo(currTable + 1, tableCount());
    echo('currTable', currTable);
    return;
  }
  if (indexOf.call('01 02 10 12 20 21'.split(' '), cell) >= 0) {
    echo('exit'); // inmatning stämmer ej, lämna
    return;
  }
  
  // uppdatera och gå till nästa bord
  results[currRound][currTable] = res;
  updateLongs();
  one = settings.ONE;
  translator = [];
  ref = range(trs.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    translator.push(Math.round(trs[i].children[0].textContent) - 1);
  }
  translator = invert(translator);
  //echo 'translator',translator
  _td = trs[translator[w] + one - one].children[3 + currRound].children[1];
  _td.textContent = "0½1"[res];
  _td = trs[translator[b] + one - one].children[3 + currRound].children[1];
  _td.textContent = "1½0"[res];
  setP(trs, b, translator);
  setP(trs, w, translator);
  setPR(trs, b, translator);
  setPR(trs, w, translator);
  // Sätt tables
  trs = document.querySelectorAll('#tables tr');
  //	echo (item.textContent for item in trs)
  _tr = trs[currTable + 0];
  //echo _tr
  tr5 = _tr.children[5];
  tr5.textContent = prettyResult(res);
  currTable = modulo(currTable + 1, tableCount());
  return history.replaceState({}, "", makeURL()); // för att slippa omladdning av sidan
};

setScreen = function(key) {
  var _h2, header;
  currScreen = key;
  header = document.getElementById('header');
  header.innerHTML = '';
  _h2 = koppla('h2', header);
  if (key === 'a') {
    _h2.textContent = "A Ställning för " + settings.TITLE;
  }
  if (key === 'b') {
    _h2.textContent = `B Bordslista rond ${currRound + settings.ONE} för ${settings.TITLE}`;
  }
  if (key === 'c') {
    _h2.textContent = `C Namnlista rond ${currRound + settings.ONE} för ${settings.TITLE}`;
  }
  document.getElementById('stallning').style.display = key === 'a' ? 'flex' : 'none';
  document.getElementById('tables').style.display = key === 'b' ? 'flex' : 'none';
  return document.getElementById('names').style.display = key === 'c' ? 'flex' : 'none';
};

showInfo = function(message) { // Visa helpText på skärmen
  var div1, div2, pre1, root;
  root = document.getElementById('info');
  root.innerHTML = "";
  div1 = koppla('div', root);
  div2 = koppla('div', div1, {
    class: "help"
  });
  pre1 = koppla('pre', div2);
  return pre1.innerHTML = message;
};

showMatrix = function(floating) { // Visa matrisen Alla mot alla. Dot betyder: inget möte
  var i, j, len, line, n, ref, results1;
  n = players.length;
  if (n > ALFABET.length) {
    n = ALFABET.length;
  }
  echo('    ' + ((function() {
    var j, len, ref, results1;
    ref = range(n);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results1.push(ALFABET[i]);
    }
    return results1;
  })()).join('   '));
  ref = range(n);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line = floating.matrix[i].slice(0, n);
    results1.push(echo(ALFABET[i] + '   ' + line.join('   ') + '  ' + players[i].elo));
  }
  return results1;
};

showNames = function() {
  var ROWS_PER_COL, b, chunkIntoColumns, columns, container, i, j, len, pb, persons, pw, ref, root, w;
  persons = [];
  ref = rounds[currRound];
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    [w, b] = ref[i];
    pw = [players[w].name, `${i + 1} • W`];
    pb = [players[b].name, `${i + 1} • B`];
    if (pw[0] === 'FRIROND') {
      pb[1] = 'BYE';
      persons.push(pb);
    } else if (pb[0] === 'FRIROND') {
      pw[1] = 'BYE';
      persons.push(pw);
    } else {
      persons.push(pw);
      persons.push(pb);
    }
  }
  persons.sort();
  ROWS_PER_COL = 30;
  // Dela upp i kolumner om max 30 spelare vardera
  chunkIntoColumns = function(items, size) {
    var cols, k, len1, ref1;
    cols = [];
    ref1 = range(0, items.length, size);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      cols.push(items.slice(i, i + size));
    }
    return cols;
  };
  // Bygg kolumnerna (fylls kolumnvis: 30 + 30 + 30 + 10)
  columns = chunkIntoColumns(persons, ROWS_PER_COL);
  root = document.getElementById('names');
  root.innerHTML = ''; // rensa
  container = koppla('div', root);
  container.className = 'columns';
  return columns.forEach((col) => {
    var colDiv, tabell;
    colDiv = koppla('div', container, {
      class: 'column'
    });
    tabell = koppla('table', colDiv);
    return col.forEach((p) => {
      var td1, td2, tr1;
      tr1 = koppla('tr', tabell);
      td1 = koppla('td', tr1, {
        class: 'name',
        textContent: p[0]
      });
      return td2 = koppla('td', tr1, {
        class: 'seat',
        textContent: p[1]
      });
    });
  });
};

roundsContent = function(long, i, _tr) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, div1, div2, div3, div4, j, len, opponent, result, w;
  for (j = 0, len = long.length; j < len; j++) {
    [w, b, color, result] = long[j];
    opponent = settings.ONE + (w === i ? b : w);
    result = convert(result, 'x201FG', ' 10½11');
    attr = color === 'w' ? "right:0px;" : "left:0px;";
    cell = koppla('td', _tr, {
      style: "position:relative;"
    });
    div1 = koppla('div', cell, {
      style: "position:absolute; top:0px;  font-size:0.7em;" + attr,
      textContent: opponent
    });
    div2 = koppla('div', cell, {
      style: "position:absolute; top:12px; font-size:1.1em; transform: translate(-10%, -10%)" + attr,
      textContent: result
    });
  }
  div3 = koppla('td', _tr, {
    style: "text-align:right" // P
  });
  return div4 = koppla('td', _tr, {
    style: "text-align:right" // PR
  });
};

showPlayers = function(longs) { // Visa spelarlistan. (longs lagrad som lista av spelare)
  var _div, _table, _thead, _tr, i, j, k, len, len1, long, player, ref, results1, root;
  
  // rows = []
  root = document.getElementById('stallning');
  root.innerHTML = '';
  _div = koppla('div', root);
  _table = koppla('table', _div);
  _thead = koppla('thead', _table);
  koppla('th', _thead, {
    textContent: "#"
  });
  koppla('th', _thead, {
    textContent: "Namn"
  });
  koppla('th', _thead, {
    textContent: "Elo"
  });
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    koppla('th', _thead, {
      textContent: `${i + settings.ONE}`
    });
  }
  koppla('th', _thead, {
    textContent: "P"
  });
  koppla('th', _thead, {
    textContent: "PR"
  });
  results1 = [];
  for (i = k = 0, len1 = longs.length; k < len1; i = ++k) {
    long = longs[i];
    player = players[i];
    if (player.name === 'FRIROND') {
      continue;
    }
    _tr = koppla('tr', _table);
    koppla('td', _tr, {
      textContent: `${i + settings.ONE}`
    });
    koppla('td', _tr, {
      style: "text-align:left",
      textContent: player.name
    });
    koppla('td', _tr, {
      style: "text-align:left",
      textContent: player.elo
    });
    results1.push(roundsContent(long, i, _tr));
  }
  return results1;
};

showTables = function() { // Visa bordslistan
  var _div, _table, _thead, b, iTable, j, len, ref, results1, root, w;
  if (rounds.length === 0) {
    return;
  }
  root = document.getElementById('tables');
  root.innerHTML = '';
  _div = koppla('div', root);
  _table = koppla('table', _div);
  _thead = koppla('thead', _table);
  koppla('th', _thead, {
    textContent: "Bord"
  });
  koppla('th', _thead, {
    textContent: "Vit"
  });
  koppla('th', _thead, {
    textContent: "Elo"
  });
  koppla('th', _thead, {
    textContent: "Elo"
  });
  koppla('th', _thead, {
    textContent: "Svart"
  });
  koppla('th', _thead, {
    textContent: "Resultat"
  });
  ref = rounds[currRound];
  results1 = [];
  for (iTable = j = 0, len = ref.length; j < len; iTable = ++j) {
    [w, b] = ref[iTable];
    results1.push(_table.appendChild(addBord(iTable, results[currRound][iTable], w, b)));
  }
  return results1;
};

sortColumn = function(index, stigande) {
  var j, len, rad, rader, results1, tbody;
  tbody = document.querySelector('#stallning tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  rader.sort(function(a, b) {
    var cellA, cellB, numA, numB;
    cellA = a.children[index].textContent.trim();
    cellB = b.children[index].textContent.trim();
    // Försök jämföra som tal, annars som text
    numA = parseFloat(cellA);
    numB = parseFloat(cellB);
    if (!isNaN(numA) && !isNaN(numB)) {
      if (stigande) {
        return numA - numB;
      } else {
        return numB - numA;
      }
    } else {
      if (stigande) {
        return cellA.localeCompare(cellB);
      } else {
        return cellB.localeCompare(cellA);
      }
    }
  });
// Lägg tillbaka raderna i sorterad ordning
  results1 = [];
  for (j = 0, len = rader.length; j < len; j++) {
    rad = rader[j];
    results1.push(tbody.appendChild(rad));
  }
  return results1;
};

tableCount = function() {
  return Math.floor(players.length / 2); // Beräkna antal bord
};

updateLongs = function() { // Uppdaterar longs utifrån rounds och results
  var r;
  longs = (function() {
    var j, len, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      results1.push(longForm(rounds[r], results[r]));
    }
    return results1;
  })();
  return longs = _.zip(...longs); // transponerar matrisen
};

main = function() { // Hämta urlen i första hand, textarean i andra hand.
  var berger, floating, i, j, len, params, ref;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo(helpText);
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseURL();
  if (players.length < 4) {
    showInfo("Du måste ange minst fyra spelare!");
    return;
  }
  berger = settings.ROUNDS === players.length - 1;
  floating = settings.ROUNDS <= Math.floor(players.length / 2);
  if (!berger ^ floating) { //settings.ROUNDS >= players.length // 2 and settings.ROUNDS != players.length - 1
    showInfo("Antalet ronder du angivit är ej acceptabelt!");
    return;
  }
  rounds = berger ? makeBerger() : makeFloating();
  rounds = expand(settings.GAMES, rounds);
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(Array(tableCount()).fill('x'));
  }
  readResults(params);
  setByeResults();
  updateLongs();
  showPlayers(longs);
  showTables();
  showNames();
  setScreen('b');
  createSortEvents();
  setCursor(currRound, currTable);
  document.title = settings.TITLE;
  return document.addEventListener('keydown', function(event) { // Hanterar alla tangenttryckningar
    var del, gxr, key;
    key = event.key;
    // echo 'keydown',key,currTable
    if (key === 'a' || key === 'b' || key === 'c') {
      setScreen(key);
    }
    if (key === 'ArrowLeft') {
      changeRound(-1);
    }
    if (key === 'ArrowRight') {
      changeRound(+1);
    }
    if (key === 'ArrowUp') {
      changeTable(-1);
    }
    if (key === 'ArrowDown') {
      changeTable(+1);
    }
    del = 'Delete';
    if (key === del) {
      setResult(key, 'x'); // "  -  "
    }
    if (key === '0') {
      setResult(key, '0'); // "0 - 1"
    }
    if (key === ' ') {
      setResult(key, '1'); // "½ - ½"
    }
    if (key === '1') {
      setResult(key, '2'); // "1 - 0"
    }
    if (key === 'm') {
      setAllPR(+1);
    }
    if (key === 'l') {
      setAllPR(-1);
    }
    if (key === 'd') {
      echo('Dump:');
      echo('currRound', currRound);
      echo('currTable', currTable);
      echo('  settings', settings);
      echo('  players', players);
      echo('  rounds', rounds);
      echo('  results', results);
      echo('  longs', longs);
    }
    gxr = settings.GAMES * settings.ROUNDS;
    if (key === '#') {
      sortColumn(0, true);
    }
    if (key === 'n') {
      sortColumn(1, true);
    }
    if (key === 'e') {
      sortColumn(2, false);
    }
    if (key === 'p') {
      sortColumn(3 + gxr, false);
    }
    if (key === 'r') {
      sortColumn(4 + gxr, false);
    }
    return setCursor(currRound, currTable);
  });
};

main();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91cm5hbWVudC5qcyIsInNvdXJjZVJvb3QiOiJcXCIsInNvdXJjZXMiOlsidG91cm5hbWVudC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFLO0FBQUEsSUFBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLEVBQUEsU0FBQSxFQUFBLE9BQUEsRUFBQSxXQUFBLEVBQUEsV0FBQSxFQUFBLE9BQUEsRUFBQSxXQUFBLEVBQUEsZ0JBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsVUFBQSxFQUFBLFlBQUEsRUFBQSxPQUFBLEVBQUEsYUFBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLGFBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsV0FBQSxFQUFBLFVBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLFdBQUE7RUFBQTs7OztBQUVMLE9BQUE7RUFBUSxNQUFSO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsUUFBUjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLFFBQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxXQUFSO0NBQUEsTUFBQSxjQUxLOzs7QUFRTCxJQUFBLEdBQU8sT0FBTyxDQUFDOztBQUNmLEtBQUEsR0FBUSxDQUFDLENBQUM7O0FBRVYsVUFBQSxHQUFlO0VBQUMsS0FBQSxFQUFPO0FBQVI7O0FBQ2YsWUFBQSxHQUFlO0VBQUMsS0FBQSxFQUFPO0FBQVI7O0FBQ2YsV0FBQSxHQUFlO0VB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QSxDQUFXLENBQUEsR0FBRSxHQUFiLEVBQWlCLEtBQWpCLEVBQW5COztJQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7TUFBbUIsVUFBQSxDQUFXLENBQUEsR0FBRSxHQUFiLEVBQWlCLEtBQWpCLEVBQW5COztXQUVBLFNBQUEsQ0FBVSxTQUFWLEVBQW9CLFNBQXBCO0VBckNvQyxDQUFyQztBQS9DTTs7QUFzRlAsSUFBQSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIyDCvSDigKJcclxuXHJcbmltcG9ydCB7UGxheWVyfSBmcm9tICcuL3BsYXllci5qcydcclxuaW1wb3J0IHtGbG9hdGluZ30gZnJvbSAnLi9mbG9hdGluZy5qcydcclxuaW1wb3J0IHtoZWxwVGV4dH0gZnJvbSAnLi90ZXh0cy5qcydcclxuaW1wb3J0IHtwZXJmb3JtYW5jZX0gZnJvbSAnLi9yYXRpbmcuanMnXHJcbiMgaW1wb3J0IHt0YWJsZSx0aGVhZCx0aCx0cix0ZCxhLGRpdixwcmUscCxoMn0gZnJvbSAnLi9odG1sLmpzJ1xyXG5cclxuZWNobyA9IGNvbnNvbGUubG9nXHJcbnJhbmdlID0gXy5yYW5nZVxyXG5cclxuQUxJR05fTEVGVCAgID0ge3N0eWxlOiBcInRleHQtYWxpZ246bGVmdFwifVxyXG5BTElHTl9DRU5URVIgPSB7c3R5bGU6IFwidGV4dC1hbGlnbjpjZW50ZXJcIn1cclxuQUxJR05fUklHSFQgID0ge3N0eWxlOiBcInRleHQtYWxpZ246cmlnaHRcIn1cclxuXHJcbkFMRkFCRVQgPSAnMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAnXHJcblxyXG5OQU1FX0NPTFMgPSA1XHJcblxyXG4jIyBWIEEgUiBJIEEgQiBMIEUgUiAjI1xyXG5cclxuc2V0dGluZ3MgPSB7VElUTEU6J1RpdGVsIHNha25hcycsIEdBTUVTOjEsIFJPVU5EUzowLCBTT1JUOjEsIE9ORToxLCBCQUxBTkNFOjEsIERFQ0lNQUxTOjB9ICMgT05FID0gMSAjIDA9ZGV2IDE9cHJvZFxyXG5cclxuIyBUaWxsc3TDpW5kZXQgZ2VzIGF2IGRlc3NhIHZhcmlhYmxlcjpcclxucGxheWVycyA9IFtdXHJcblxyXG5yZXN1bHRzID0gW10gIyByb25kZXIgeCBib3JkLiBjZWxsOiAneCcsICcwJywgJzEnIGVsbGVyICcyJ1xyXG5yb3VuZHMgID0gW10gIyByb25kZXIgeCBib3JkLiBjZWxsOiBbdyxiXSBcclxubG9uZ3MgICA9IFtdICMgcGxheWVycyB4IHJvbmRlci4gY2VsbDogW3csYixjb2wscmVzXVxyXG5cclxuY3VyclNjcmVlbiA9ICdhJ1xyXG5jdXJyUm91bmQgPSAwXHJcbmN1cnJUYWJsZSA9IDBcclxuXHJcbmZyaXJvbmQgPSBudWxsICMgaW5nZW4gZnJpcm9uZC4gQW5uYXJzIGluZGV4IGbDtnIgZnJpcm9uZGVuXHJcblxyXG4jIyBGIFUgTiBLIFQgSSBPIE4gRSBSICMjXHJcblxyXG5hZGRCb3JkID0gKGJvcmQscmVzLGMwLGMxKSAtPlxyXG5cdHZpdCA9IHBsYXllcnNbYzBdLm5hbWVcclxuXHRzdmFydCA9IHBsYXllcnNbYzFdLm5hbWVcclxuXHR2aXRfZWxvID0gcGxheWVyc1tjMF0uZWxvXHJcblx0c3ZhcnRfZWxvID0gcGxheWVyc1tjMV0uZWxvXHJcblx0dHIxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAndHInXHJcblx0Y29sb3IgPSBpZiBib3JkID09IGN1cnJUYWJsZSB0aGVuICd5ZWxsb3cnIGVsc2UgJ3doaXRlJ1xyXG5cclxuXHRrb3BwbGEgJ3RkJywgdHIxLCB7dGV4dENvbnRlbnQgOiBib3JkICsgc2V0dGluZ3MuT05FfVxyXG5cdGtvcHBsYSAndGQnLCB0cjEsIHtzdHlsZTpcInRleHQtYWxpZ246bGVmdFwiLCB0ZXh0Q29udGVudCA6IHZpdH1cclxuXHRrb3BwbGEgJ3RkJywgdHIxLCB7c3R5bGU6XCJ0ZXh0LWFsaWduOmxlZnRcIiwgdGV4dENvbnRlbnQgOiB2aXRfZWxvfVxyXG5cdGtvcHBsYSAndGQnLCB0cjEsIHtzdHlsZTpcInRleHQtYWxpZ246bGVmdFwiLCB0ZXh0Q29udGVudCA6IHN2YXJ0X2Vsb31cclxuXHRrb3BwbGEgJ3RkJywgdHIxLCB7c3R5bGU6XCJ0ZXh0LWFsaWduOmxlZnRcIiwgdGV4dENvbnRlbnQgOiBzdmFydH1cclxuXHRrb3BwbGEgJ3RkJywgdHIxLCB7c3R5bGU6XCJ0ZXh0LWFsaWduOmNlbnRlcjsgYmFja2dyb3VuZC1jb2xvcjoje2NvbG9yfVwiLCB0ZXh0Q29udGVudCA6IHByZXR0eVJlc3VsdCByZXN9XHJcblx0dHIxXHJcblx0XHJcbmNoYW5nZVJvdW5kID0gKGRlbHRhKSAtPiAjIGJ5dCByb25kIG9jaCB1cHBkYXRlcmEgYm9yZHNsaXN0YW5cclxuXHRjdXJyUm91bmQgPSAoY3VyclJvdW5kICsgZGVsdGEpICUlIHJvdW5kcy5sZW5ndGhcclxuXHRjdXJyVGFibGUgPSAwXHJcblx0XHJcblx0c2V0U2NyZWVuIGN1cnJTY3JlZW5cclxuXHRzaG93VGFibGVzKClcclxuXHRzaG93TmFtZXMoKVxyXG5cclxuY2hhbmdlVGFibGUgPSAoZGVsdGEpIC0+ICMgYnl0IGJvcmRcclxuXHRjdXJyVGFibGUgPSAoY3VyclRhYmxlICsgZGVsdGEpICUlIHRhYmxlQ291bnQoKVxyXG5cclxuY29udmVydCA9IChpbnB1dCxhLGIpIC0+ICMgYnl0IGFsbGEgdGVja2VuIGkgaW5wdXQgc29tIGZpbm5zIGkgYSBtb3QgdGVja2VuIG1lZCBzYW1tYSBpbmRleCBpIGJcclxuXHRpZiBpbnB1dCBpbiBhIHRoZW4gYlthLmluZGV4T2YgaW5wdXRdIGVsc2UgaW5wdXQgIyBhIG9jaCBiIMOkciBzdHLDpG5nYXJcclxuXHJcbmNvbnZlcnRMb25nID0gKGlucHV0LGEsYikgLT4gIyBieXQgYWxsYSB0ZWNrZW4gaSBpbnB1dCBzb20gZmlubnMgaSBhIG1vdCBzdHLDpG5nIG1lZCBzYW1tYSBpbmRleCBpIGIuIGIgw6RyIHNlcGFyZXJhZCBtZWQgfFxyXG5cdGkgPSBhLmluZGV4T2YgaW5wdXRcclxuXHRiID0gYi5zcGxpdCAnfCdcclxuXHRpZiBpbnB1dCBpbiBhIHRoZW4gYltpXSBlbHNlIGlucHV0XHJcblxyXG5jcmVhdGVTb3J0RXZlbnRzID0gLT4gIyBTcGVsYXJsaXN0YW4gc29ydGVyYXMgYmVyb2VuZGUgcMOlIHZpbGtlbiBrb2x1bW4gbWFuIGtsaWNrYXIgcMOlLiAjIE5hbW4gRWxvIFAgZWxsZXIgUFJcclxuXHJcblx0dGhzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnI3N0YWxsbmluZyB0aCdcclxuXHJcblx0aW5kZXggPSAtMVxyXG5cdGZvciBfdGggaW4gdGhzXHJcblx0XHRpbmRleCsrXHJcblx0XHRkbyAoX3RoLGluZGV4KSAtPlxyXG5cdFx0XHRfdGguYWRkRXZlbnRMaXN0ZW5lciAnY2xpY2snLCAoZXZlbnQpIC0+XHJcblx0XHRcdFx0a2V5ID0gX3RoLnRleHRDb250ZW50XHJcblx0XHRcdFx0aWYgIWlzTmFOIHBhcnNlSW50IGtleVxyXG5cdFx0XHRcdFx0a2V5ID0gcGFyc2VJbnQoa2V5KSAtIHNldHRpbmdzLk9ORVxyXG5cdFx0XHRcdFx0c2hvd1RhYmxlcygpICMga2V5XHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRzb3J0Q29sdW1uIGluZGV4LCBrZXkgaW4gXCIjIE5hbW5cIi5zcGxpdCAnICdcclxuXHJcbmV4cG9ydCBleHBhbmQgPSAoZ2FtZXMsIHJvdW5kcykgLT4gIyBtYWtlIGEgZG91YmxlIHJvdW5kIGZyb20gYSBzaW5nbGUgcm91bmRcclxuXHRyZXN1bHQgPSBbXVxyXG5cdGZvciByb3VuZCBpbiByb3VuZHNcclxuXHRcdHJlc3VsdC5wdXNoIChbdyxiXSBmb3IgW3csYl0gaW4gcm91bmQpXHJcblx0XHRpZiBnYW1lcyA9PSAyIHRoZW4gcmVzdWx0LnB1c2ggKFtiLHddIGZvciBbdyxiXSBpbiByb3VuZClcclxuXHQjIGVjaG8gcGxheWVyc1xyXG5cdHJldHVybiByZXN1bHRcclxuXHJcbmV4cG9ydCBmaW5kTnVtYmVyT2ZEZWNpbWFscyA9IChsc3QpIC0+ICMgbGV0YSB1cHAgbWluc3RhIGFudGFsIGRlY2ltYWxlciBzb20ga3LDpHZzIGbDtnIgdW5pa2hldCBpIGxpc3RhblxyXG5cdGJlc3QgPSAwXHJcblx0Zm9yIGkgaW4gcmFuZ2UgNlxyXG5cdFx0dW5payA9IF8udW5pcSAoaXRlbS50b0ZpeGVkKGkpIGZvciBpdGVtIGluIGxzdClcclxuXHRcdGlmIHVuaWsubGVuZ3RoID4gYmVzdCB0aGVuIFtiZXN0LGliZXN0XSA9IFt1bmlrLmxlbmd0aCxpXVxyXG5cdGliZXN0XHJcblxyXG5mbGlwID0gKGZsYWcsaWQpIC0+XHJcblx0ZmxhZyA9IDEgLSBmbGFnXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnN0eWxlLmRpc3BsYXkgPSBbXCJub25lXCIsXCJ0YWJsZVwiXVtmbGFnXVxyXG5cdGZsYWdcclxuXHJcbmludmVydCA9IChsc3QpIC0+XHJcblx0cmVzdWx0ID0gXy5jbG9uZSBsc3RcclxuXHRmb3IgaSBpbiByYW5nZSBsc3QubGVuZ3RoXHJcblx0XHRpdGVtID0gbHN0W2ldXHJcblx0XHRyZXN1bHRbaXRlbV0gPSBpXHJcblx0cmVzdWx0XHJcblxyXG5rb3BwbGEgPSAodHlwLCBwYXJlbnQsIGF0dHJzID0ge30pIC0+XHJcbiAgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgdHlwXHJcblxyXG4gIGlmICd0ZXh0Q29udGVudCcgb2YgYXR0cnNcclxuICAgIGVsZW0udGV4dENvbnRlbnQgPSBhdHRycy50ZXh0Q29udGVudFxyXG4gICAgZGVsZXRlIGF0dHJzLnRleHRDb250ZW50XHJcblxyXG4gIGlmICdodG1sJyBvZiBhdHRyc1xyXG4gICAgZWxlbS5pbm5lckhUTUwgPSBhdHRycy5odG1sXHJcbiAgICBkZWxldGUgYXR0cnMuaHRtbFxyXG5cclxuICBmb3Igb3duIGtleSBvZiBhdHRyc1xyXG4gICAgZWxlbS5zZXRBdHRyaWJ1dGUga2V5LCBhdHRyc1trZXldXHJcblxyXG4gIHBhcmVudC5hcHBlbmRDaGlsZCBlbGVtXHJcbiAgZWxlbVxyXG5cclxuZXhwb3J0IGxvbmdGb3JtID0gKHJvdW5kcywgcmVzdWx0cykgLT4gIyBwcm9kdWNlcyB0aGUgbG9uZyBmb3JtIGZvciBPTkUgcm91bmQgKHNwZWxhcmxpc3RhbikuIElmIHRoZXJlIGlzIGEgQllFLCBwdXQgaXQgbGFzdCBpbiB0aGUgbGlzdFxyXG5cdHJlc3VsdCA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aFxyXG5cdFx0W3csYl0gPSByb3VuZHNbaV1cclxuXHRcdHJlcyA9IHJlc3VsdHNbaV1cclxuXHRcdHJlc3VsdC5wdXNoIFt3LGIsJ3cnLHJlc11cclxuXHRcdHJlc3VsdC5wdXNoIFtiLHcsJ2InLG90aGVyIHJlc11cclxuXHJcblx0cmVzdWx0LnNvcnQgKGEsYikgLT4gYVswXSAtIGJbMF1cclxuXHRyZXN1bHRcclxuXHJcbm1ha2VCZXJnZXIgPSAtPiAjIGxvdHRhIGVuIGhlbCBiZXJnZXItdHVybmVyaW5nLlxyXG4jIFxyXG5cdG4gPSBwbGF5ZXJzLmxlbmd0aFxyXG5cdGhhbGYgPSBuIC8vIDIgXHJcblx0QSA9IFswLi4ubl1cclxuXHRyb3VuZHMgPSBbXVxyXG5cdGZvciBpIGluIHJhbmdlIHNldHRpbmdzLlJPVU5EU1xyXG5cdFx0cm91bmRzLnB1c2ggc2F2ZVBhaXJpbmcgaSwgQSwgaGFsZiwgblxyXG5cdFx0QS5wb3AoKVxyXG5cdFx0QSA9IEEuc2xpY2UoaGFsZikuY29uY2F0IEEuc2xpY2UoMCxoYWxmKVxyXG5cdFx0QS5wdXNoIG4tMVxyXG5cdHJvdW5kc1xyXG5cclxubWFrZUZsb2F0aW5nID0gLT4gIyBsb3R0YSBlbiBoZWwgZmxvYXRpbmctdHVybmVyaW5nXHJcblx0ZmxvYXRpbmcgPSBuZXcgRmxvYXRpbmcgcGxheWVycywgc2V0dGluZ3NcclxuXHRzaG93TWF0cml4IGZsb2F0aW5nXHJcblx0ZmxvYXRpbmcucm91bmRzXHJcblxyXG5tYWtlVVJMID0gLT5cclxuXHR1cmwgPSBcIi4vXCJcclxuXHJcblx0dXJsICs9IFwiP1RJVExFPSN7c2V0dGluZ3MuVElUTEV9XCJcclxuXHR1cmwgKz0gXCImR0FNRVM9I3tzZXR0aW5ncy5HQU1FU31cIlxyXG5cdHVybCArPSBcIiZST1VORFM9I3tzZXR0aW5ncy5ST1VORFN9XCJcclxuXHR1cmwgKz0gXCImU09SVD0je3NldHRpbmdzLlNPUlR9XCJcclxuXHR1cmwgKz0gXCImT05FPSN7c2V0dGluZ3MuT05FfVwiXHJcblx0dXJsICs9IFwiJkJBTEFOQ0U9I3tzZXR0aW5ncy5CQUxBTkNFfVwiXHJcblxyXG5cdGZvciBwbGF5ZXIgaW4gcGxheWVyc1xyXG5cdFx0dXJsICs9IFwiJnA9I3twbGF5ZXJ9XCJcclxuXHJcblx0Zm9yIHIgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aFxyXG5cdFx0cyA9IHJlc3VsdHNbcl0uam9pbiAnJ1xyXG5cdFx0cyA9IF8udHJpbUVuZCBzLCAneCdcclxuXHRcdGlmIHMgIT0gJycgdGhlbiB1cmwgKz0gXCImciN7cisxfT0je3N9XCJcclxuXHJcblx0dXJsID0gdXJsLnJlcGxhY2VBbGwgJyAnLCAnKydcclxuXHR1cmxcclxuXHJcbmV4cG9ydCBvdGhlciA9IChpbnB1dCkgLT4gY29udmVydCBpbnB1dCwgXCIwMTJGR1wiLFwiMjEwMjJcIlxyXG5cclxucGFyc2VUZXh0YXJlYSA9IC0+ICMgbMOkcyBpbiBpbml0aWFsYSB1cHBnaWZ0ZXIgb20gc3BlbGFybmFcclxuXHRyYXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBcInRleHRhcmVhXCJcclxuXHJcblx0bGluZXMgPSByYXcudmFsdWVcclxuXHRsaW5lcyA9IGxpbmVzLnNwbGl0IFwiXFxuXCJcclxuXHJcblx0cm91bmRzID0gbnVsbFxyXG5cclxuXHRmb3IgbGluZSBpbiBsaW5lcyBcclxuXHRcdGlmIGxpbmUubGVuZ3RoID09IDAgb3IgbGluZVswXSA9PSAnIycgdGhlbiBjb250aW51ZVxyXG5cdFx0aWYgbGluZS5pbmNsdWRlcyAnPSdcclxuXHRcdFx0W2tleSwgdmFsXSA9IGxpbmUuc3BsaXQgJz0nXHJcblx0XHRcdGtleSA9IGtleS50cmltKClcclxuXHRcdFx0dmFsID0gdmFsLnRyaW0oKVxyXG5cdFx0XHRpZiBrZXkgPT0gJ1RJVExFJyB0aGVuIHNldHRpbmdzLlRJVExFID0gdmFsXHJcblx0XHRcdGlmIGtleSA9PSAnR0FNRVMnIHRoZW4gc2V0dGluZ3MuR0FNRVMgPSB2YWxcclxuXHRcdFx0aWYga2V5ID09ICdST1VORFMnIHRoZW4gc2V0dGluZ3MuUk9VTkRTID0gdmFsXHJcblx0XHRcdGlmIGtleSA9PSAnU09SVCcgdGhlbiBzZXR0aW5ncy5TT1JUID0gdmFsXHJcblx0XHRcdGlmIGtleSA9PSAnT05FJyB0aGVuIHNldHRpbmdzLk9ORSA9IHZhbFxyXG5cdFx0XHRpZiBrZXkgPT0gJ0JBTEFOQ0UnIHRoZW4gc2V0dGluZ3MuQkFMQU5DRSA9IHZhbFxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRwbGF5ZXJzLnB1c2ggbGluZVxyXG5cclxuXHRpZiBwbGF5ZXJzLmxlbmd0aCAlIDIgPT0gMVxyXG5cdFx0ZnJpcm9uZCA9IHBsYXllcnMubGVuZ3RoXHJcblx0XHRwbGF5ZXJzLnB1c2ggJzAwMDAgRlJJUk9ORCdcclxuXHRlbHNlXHJcblx0XHRmcmlyb25kID0gbnVsbFxyXG5cclxuXHRpZiBzZXR0aW5ncy5ST1VORFMgPT0gMCB0aGVuIHNldHRpbmdzLlJPVU5EUyA9IHBsYXllcnMubGVuZ3RoIC0gMVxyXG5cclxuXHRpZiByb3VuZHMgPT0gbnVsbCB0aGVuIHJvdW5kcyA9IFtdXHJcblxyXG5cdHVybCA9IG1ha2VVUkwoKVxyXG5cdHBsYXllcnMgPSBbXVxyXG5cdHJvdW5kcyA9IFtdXHJcblx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmxcclxuXHRlY2hvICd3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybCdcclxuXHJcbnBhcnNlVVJMID0gLT4gXHJcblx0cGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyB3aW5kb3cubG9jYXRpb24uc2VhcmNoXHJcblxyXG5cdHNldHRpbmdzLlRJVExFID0gc2FmZUdldCBwYXJhbXMsIFwiVElUTEVcIlxyXG5cdHNldHRpbmdzLkdBTUVTID0gcGFyc2VJbnQgc2FmZUdldCBwYXJhbXMsIFwiR0FNRVNcIiwgXCIxXCJcclxuXHRzZXR0aW5ncy5TT1JUID0gcGFyc2VJbnQgc2FmZUdldCBwYXJhbXMsIFwiU09SVFwiLCBcIjFcIlxyXG5cdHNldHRpbmdzLk9ORSA9IHBhcnNlSW50IHNhZmVHZXQgcGFyYW1zLCBcIk9ORVwiLCBcIjFcIlxyXG5cdHNldHRpbmdzLkJBTEFOQ0UgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJCQUxBTkNFXCIsIFwiMVwiXHJcblxyXG5cdHBsYXllcnMgPSBbXVxyXG5cdHBlcnNvbnMgPSBwYXJhbXMuZ2V0QWxsIFwicFwiXHJcblxyXG5cdGlmIHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluY2x1ZGVzICdGUklST05EJyB0aGVuIGZyaXJvbmQgPSBwZXJzb25zLmxlbmd0aCAtIDFcclxuXHRpZiBzZXR0aW5ncy5TT1JUID09IDEgdGhlbiBwZXJzb25zLnNvcnQoKS5yZXZlcnNlKClcclxuXHJcblx0c2V0dGluZ3MuUk9VTkRTID0gcGFyc2VJbnQgc2FmZUdldCBwYXJhbXMsIFwiUk9VTkRTXCIsIFwiI3twbGF5ZXJzLmxlbmd0aC0xfVwiXHJcblxyXG5cdGkgPSAwXHJcblx0Zm9yIHBlcnNvbiBpbiBwZXJzb25zXHJcblx0XHRpICs9IDFcclxuXHRcdGVsbyA9IHBhcnNlSW50IHBlcnNvbi5zbGljZSAwLDRcclxuXHRcdG5hbWUgPSBwZXJzb24uc2xpY2UoNCkudHJpbSgpXHJcblx0XHRwbGF5ZXJzLnB1c2ggbmV3IFBsYXllciBwbGF5ZXJzLmxlbmd0aCwgbmFtZSwgZWxvXHJcblxyXG5cdCMgaW5pdGlhbGlzZXJhIHJvdW5kcyBtZWQgJ3gnIGkgYWxsYSBjZWxsZXJcclxuXHRuID0gcGxheWVycy5sZW5ndGggLy8gMlxyXG5cdHJvdW5kcyA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2Ugc2V0dGluZ3MuR0FNRVMgKiBzZXR0aW5ncy5ST1VORFNcclxuXHRcdHJvdW5kcy5wdXNoIG5ldyBBcnJheShuKS5maWxsICd4J1xyXG5cclxuXHRyZWFkUmVzdWx0cyBwYXJhbXNcclxuXHJcbmV4cG9ydCBwcmV0dHlSZXN1bHQgPSAoY2gpIC0+ICMgw7Z2ZXJzw6R0dCBpbnRlcm5hIHJlc3VsdGF0IHRpbGwgZXh0ZXJuYVxyXG5cdGlmIGNoID09ICd4JyB0aGVuIHJldHVybiBcIi1cIlxyXG5cdGlmIGNoID09ICcwJyB0aGVuIHJldHVybiBcIjAgLSAxXCJcclxuXHRpZiBjaCA9PSAnMScgdGhlbiByZXR1cm4gXCLCvSAtIMK9XCJcclxuXHRpZiBjaCA9PSAnMicgdGhlbiByZXR1cm4gXCIxIC0gMFwiXHJcblxyXG5yZWFkUmVzdWx0cyA9IChwYXJhbXMpIC0+ICMgUmVzdWx0YXRlbiBsw6RzZXMgZnLDpW4gdXJsZW5cclxuXHRyZXN1bHRzID0gW11cclxuXHRuID0gcGxheWVycy5sZW5ndGhcclxuXHRpZiBmcmlyb25kIHRoZW4gbiAtPSAyXHJcblx0biAvLz0gMlxyXG5cdFxyXG5cdGZvciByIGluIHJhbmdlIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRyZXN1bHQgPSBzYWZlR2V0IHBhcmFtcywgXCJyI3tyKzF9XCIsIG5ldyBBcnJheShuKS5maWxsIFwieFwiXHJcblx0XHRhcnIgPSBbXVxyXG5cdFx0Zm9yIGNoIGluIHJlc3VsdCBcclxuXHRcdFx0aWYgY2g9PScwJyB0aGVuIGFyci5wdXNoICcwJ1xyXG5cdFx0XHRpZiBjaD09JzEnIHRoZW4gYXJyLnB1c2ggJzEnXHJcblx0XHRcdGlmIGNoPT0nMicgdGhlbiBhcnIucHVzaCAnMidcclxuXHRcdFx0aWYgY2g9PSd4JyB0aGVuIGFyci5wdXNoICd4J1xyXG5cdFx0cmVzdWx0cy5wdXNoIGFyclxyXG5cclxuXHJcbnNhZmVHZXQgPSAocGFyYW1zLGtleSxzdGFuZGFyZD1cIlwiKSAtPiAjIEjDpG10YSBwYXJhbWV0ZXJuIGdpdmVuIGF2IGtleSBmcsOlbiB1cmxlblxyXG5cdGlmIHBhcmFtcy5nZXQga2V5IHRoZW4gcmV0dXJuIHBhcmFtcy5nZXQoa2V5KS50cmltKClcclxuXHRpZiBwYXJhbXMuZ2V0ICcgJyArIGtleSB0aGVuIHJldHVybiBwYXJhbXMuZ2V0KCcgJyArIGtleSkudHJpbSgpXHJcblx0c3RhbmRhcmRcclxuXHJcbnNhdmVQYWlyaW5nID0gKHIsIEEsIGhhbGYsIG4pIC0+ICMgc2thcGEgZW4gYm9yZHNsaXN0YSB1dGlmcsOlbiBiZXJnZXIuXHJcblx0bHN0ID0gaWYgciAlIDIgPT0gMSB0aGVuIFtbQVtuIC0gMV0sIEFbMF1dXSBlbHNlIFtbQVswXSwgQVtuIC0gMV1dXVxyXG5cdGZvciBpIGluIFsxLi4uaGFsZl1cclxuXHRcdGxzdC5wdXNoIFtBW2ldLCBBW24gLSAxIC0gaV1dXHJcblx0aWYgZnJpcm9uZCB0aGVuIGxzdC5wdXNoIGxzdC5zaGlmdCgpXHJcblx0bHN0LnNvcnQoKVxyXG5cclxuc2V0QWxsUFIgPSAoZGVsdGEpIC0+XHJcblx0ZGVjaW1hbHMgPSBzZXR0aW5ncy5ERUNJTUFMUyArIGRlbHRhXHJcblx0aWYgMCA8PSBkZWNpbWFscyA8PSA2IHRoZW4gc2V0dGluZ3MuREVDSU1BTFMgPSBkZWNpbWFsc1xyXG5cclxuXHR0cnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICcjc3RhbGxuaW5nIHRyJ1xyXG5cdGZvciBpbmRleCBpbiByYW5nZSBwbGF5ZXJzLmxlbmd0aFxyXG5cdFx0aWYgcGxheWVyc1tpbmRleF0uUFIgPiAwXHJcblx0XHRcdF90ZFBSID0gdHJzW2luZGV4ICsgMV0uY2hpbGRyZW5bNCArIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXVxyXG5cdFx0XHRfdGRQUi50ZXh0Q29udGVudCA9IHBsYXllcnNbaW5kZXhdLlBSLnRvRml4ZWQgc2V0dGluZ3MuREVDSU1BTFNcclxuXHJcbnNldEJ5ZVJlc3VsdHMgPSAtPlxyXG5cdGlmIG5vdCBmcmlyb25kIHRoZW4gcmV0dXJuXHJcblx0Zm9yIHIgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aFxyXG5cdFx0cm91bmQgPSByb3VuZHNbcl1cclxuXHRcdGZvciB0IGluIHJhbmdlIHJvdW5kLmxlbmd0aFxyXG5cdFx0XHRbdyxiXSA9IHJvdW5kW3RdXHJcblx0XHRcdGlmIHcgPT0gZnJpcm9uZCB0aGVuIHJlc3VsdHNbcl1bdF0gPSAnMCdcclxuXHRcdFx0aWYgYiA9PSBmcmlyb25kIHRoZW4gcmVzdWx0c1tyXVt0XSA9ICcyJ1xyXG5cclxuc2V0Q3Vyc29yID0gKHJvdW5kLCB0YWJsZSkgLT4gIyBEZW4gZ3VsYSBiYWtncnVuZGVuIHVwcGRhdGVyYXMgYmVyb2VuZGUgcMOlIHBpbHRhbmdlbnRlcm5hXHJcblx0dGhzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnI3N0YWxsbmluZyB0aCdcclxuXHQjIGluZGV4ID0gLTFcclxuXHRmb3IgX3RoLGluZGV4IGluIHRoc1xyXG5cdFx0IyBpbmRleCsrXHJcblx0XHRjb2xvciA9IGlmIGluZGV4ID09IGN1cnJSb3VuZCArIDMgdGhlbiAneWVsbG93JyBlbHNlICd3aGl0ZSdcclxuXHRcdF90aC5zdHlsZSA9IFwiYmFja2dyb3VuZC1jb2xvcjoje2NvbG9yfVwiXHJcblxyXG5cdHRycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJyN0YWJsZXMgdHInXHJcblx0IyBpbmRleCA9IC0xXHJcblx0Zm9yIF90cixpbmRleCBpbiB0cnNcclxuXHRcdCMgaW5kZXgrK1xyXG5cdFx0Y29sb3IgPSBpZiBpbmRleCA9PSBjdXJyVGFibGUgKyAwIHRoZW4gJ3llbGxvdycgZWxzZSAnd2hpdGUnXHJcblx0XHRfdHIuY2hpbGRyZW5bNV0uc3R5bGUgPSBcImJhY2tncm91bmQtY29sb3I6I3tjb2xvcn1cIlxyXG5cclxuc2V0UCA9ICh0cnMsIGluZGV4LCB0cmFuc2xhdG9yKSAtPlxyXG5cdHNjb3Jlc1AgPSAwXHJcblx0c2NvcmVzUFIgPSAwXHJcblx0ZWxvcyA9IFtdXHJcblx0Zm9yIHIgaW4gcmFuZ2Ugc2V0dGluZ3MuR0FNRVMgKiBzZXR0aW5ncy5ST1VORFNcclxuXHRcdGNoID0gbG9uZ3NbaW5kZXhdW3JdWzNdXHJcblx0XHR2YWx1ZSA9ICcwMTInLmluZGV4T2YgY2hcclxuXHRcdG9wcCA9IGxvbmdzW2luZGV4XVtyXVsxXVxyXG5cdFx0aWYgdmFsdWUgIT0gLTFcclxuXHRcdFx0ZWxvID0gcGxheWVyc1tvcHBdLmVsb1xyXG5cdFx0XHRzY29yZXNQICs9IHZhbHVlXHJcblx0XHRcdGlmIGVsbyAhPSAwXHJcblx0XHRcdFx0c2NvcmVzUFIgKz0gdmFsdWVcclxuXHRcdFx0XHRlbG9zLnB1c2ggTWF0aC5yb3VuZCBlbG9cclxuXHJcblx0X3RkUCAgPSB0cnNbdHJhbnNsYXRvcltpbmRleF0gKyAxIC0gMV0uY2hpbGRyZW5bMyArIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXVxyXG5cdF90ZFAudGV4dENvbnRlbnQgPSBpZiBlbG9zLmxlbmd0aCA9PSAwIHRoZW4gJycgZWxzZSAoc2NvcmVzUC8yKS50b0ZpeGVkIDFcclxuXHJcblx0IyBrYWxreWxlcmEgcGVyZm9ybWFuY2UgcmF0aW5nIG1oYSB2aW5zdGFuZGVsIG9jaCBlbG8tdGFsXHJcblx0aWYgZWxvcy5sZW5ndGggPT0gMCBcclxuXHRcdHBsYXllcnNbaW5kZXhdLlBSID0gMFxyXG5cdGVsc2VcclxuXHRcdGFuZGVsID0gc2NvcmVzUFIvMlxyXG5cdFx0cGVyZiA9IHBlcmZvcm1hbmNlIGFuZGVsLCBlbG9zXHJcblx0XHRwbGF5ZXJzW2luZGV4XS5QUiA9IHBlcmZcclxuXHJcbnNldFBSID0gKHRycywgaW5kZXgsIHRyYW5zbGF0b3IpIC0+XHJcblx0X3RkUFIgPSB0cnNbdHJhbnNsYXRvcltpbmRleF0gKyAxIC0gMV0uY2hpbGRyZW5bNCArIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXVxyXG5cdF90ZFBSLnRleHRDb250ZW50ID0gaWYgcGxheWVyc1tpbmRleF0uUFIgPT0gMCB0aGVuICcnIGVsc2UgcGxheWVyc1tpbmRleF0uUFIudG9GaXhlZCBzZXR0aW5ncy5ERUNJTUFMU1xyXG5cclxuc2V0UmVzdWx0ID0gKGtleSwgcmVzKSAtPiAjIFVwcGRhdGVyYSByZXN1bHRzIHNhbXQgZ3VpOnQuXHJcblx0I2VjaG8gJ3NldFJlc3VsdCdcclxuXHR0cnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICcjc3RhbGxuaW5nIHRyJ1xyXG5cclxuXHRvbGQgPSByZXN1bHRzW2N1cnJSb3VuZF1bY3VyclRhYmxlXVxyXG5cdFt3LGJdID0gcm91bmRzW2N1cnJSb3VuZF1bY3VyclRhYmxlXVxyXG5cdGlmIGZyaXJvbmQgYW5kICh3PT1mcmlyb25kIG9yIGI9PWZyaXJvbmQpIHRoZW4gcmV0dXJuXHJcblxyXG5cdGNlbGwgPSBvbGQgKyByZXMgIyB0cmFuc2l0aW9uLCAxNiBwb3NzaWJpbGl0aWVzXHJcblx0I2VjaG8gJ2NlbGwnLGNlbGxcclxuXHJcblx0aWYgY2VsbCBpbiAneHggMDAgMTEgMjInLnNwbGl0ICcgJyAjIGx5Y2thZCBrb250cm9sbGlubWF0bmluZywgZ8OlIHRpbGwgbsOkc3RhIGJvcmRcclxuXHRcdGN1cnJUYWJsZSA9IChjdXJyVGFibGUgKyAxKSAlJSB0YWJsZUNvdW50KClcclxuXHRcdGVjaG8gJ2N1cnJUYWJsZScsY3VyclRhYmxlXHJcblx0XHRyZXR1cm5cclxuXHJcblx0aWYgY2VsbCBpbiAnMDEgMDIgMTAgMTIgMjAgMjEnLnNwbGl0ICcgJ1xyXG5cdFx0ZWNobyAnZXhpdCdcclxuXHRcdHJldHVybiAjIGlubWF0bmluZyBzdMOkbW1lciBlaiwgbMOkbW5hXHJcblxyXG5cdCMgdXBwZGF0ZXJhIG9jaCBnw6UgdGlsbCBuw6RzdGEgYm9yZFxyXG5cdHJlc3VsdHNbY3VyclJvdW5kXVtjdXJyVGFibGVdID0gcmVzXHJcblxyXG5cdHVwZGF0ZUxvbmdzKClcclxuXHJcblx0b25lID0gc2V0dGluZ3MuT05FXHJcblxyXG5cdHRyYW5zbGF0b3IgPSBbXVxyXG5cdGZvciBpIGluIHJhbmdlIHRycy5sZW5ndGhcclxuXHRcdHRyYW5zbGF0b3IucHVzaCBNYXRoLnJvdW5kKHRyc1tpXS5jaGlsZHJlblswXS50ZXh0Q29udGVudCkgLSAxXHJcblx0dHJhbnNsYXRvciA9IGludmVydCB0cmFuc2xhdG9yXHJcblxyXG5cdCNlY2hvICd0cmFuc2xhdG9yJyx0cmFuc2xhdG9yXHJcblxyXG5cdF90ZCA9IHRyc1t0cmFuc2xhdG9yW3ddICsgb25lIC0gb25lXS5jaGlsZHJlblszICsgY3VyclJvdW5kXS5jaGlsZHJlblsxXVxyXG5cdF90ZC50ZXh0Q29udGVudCA9IFwiMMK9MVwiW3Jlc11cclxuXHJcblx0X3RkID0gdHJzW3RyYW5zbGF0b3JbYl0gKyBvbmUgLSBvbmVdLmNoaWxkcmVuWzMgKyBjdXJyUm91bmRdLmNoaWxkcmVuWzFdXHJcblx0X3RkLnRleHRDb250ZW50ID0gXCIxwr0wXCJbcmVzXVxyXG5cclxuXHRzZXRQIHRycywgYiwgdHJhbnNsYXRvclxyXG5cdHNldFAgdHJzLCB3LCB0cmFuc2xhdG9yXHJcblxyXG5cdHNldFBSIHRycywgYiwgdHJhbnNsYXRvclxyXG5cdHNldFBSIHRycywgdywgdHJhbnNsYXRvclxyXG5cclxuXHQjIFPDpHR0IHRhYmxlc1xyXG5cdHRycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJyN0YWJsZXMgdHInXHJcbiNcdGVjaG8gKGl0ZW0udGV4dENvbnRlbnQgZm9yIGl0ZW0gaW4gdHJzKVxyXG5cdF90ciA9IHRyc1tjdXJyVGFibGUgKyAwXSAjIFNrYSB2YXJhIE5PTEwhXHJcblx0I2VjaG8gX3RyXHJcblx0dHI1ID0gX3RyLmNoaWxkcmVuWzVdXHJcblxyXG5cdHRyNS50ZXh0Q29udGVudCA9IHByZXR0eVJlc3VsdCByZXNcclxuXHRjdXJyVGFibGUgPSAoY3VyclRhYmxlICsgMSkgJSUgdGFibGVDb3VudCgpXHJcblxyXG5cdGhpc3RvcnkucmVwbGFjZVN0YXRlIHt9LCBcIlwiLCBtYWtlVVJMKCkgIyBmw7ZyIGF0dCBzbGlwcGEgb21sYWRkbmluZyBhdiBzaWRhblxyXG5cclxuc2V0U2NyZWVuID0gKGtleSkgLT5cclxuXHJcblx0Y3VyclNjcmVlbiA9IGtleVxyXG5cclxuXHRoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAnaGVhZGVyJ1xyXG5cdGhlYWRlci5pbm5lckhUTUwgPSAnJ1xyXG5cdF9oMiA9IGtvcHBsYSAnaDInLCBoZWFkZXJcclxuXHJcblx0aWYga2V5ID09ICdhJyB0aGVuIF9oMi50ZXh0Q29udGVudCA9IFwiQSBTdMOkbGxuaW5nIGbDtnIgXCIgKyBzZXR0aW5ncy5USVRMRVxyXG5cdGlmIGtleSA9PSAnYicgdGhlbiBfaDIudGV4dENvbnRlbnQgPSBcIkIgQm9yZHNsaXN0YSByb25kICN7Y3VyclJvdW5kICsgc2V0dGluZ3MuT05FfSBmw7ZyICN7c2V0dGluZ3MuVElUTEV9XCJcclxuXHRpZiBrZXkgPT0gJ2MnIHRoZW4gX2gyLnRleHRDb250ZW50ID0gXCJDIE5hbW5saXN0YSByb25kICN7Y3VyclJvdW5kICsgc2V0dGluZ3MuT05FfSBmw7ZyICN7c2V0dGluZ3MuVElUTEV9XCJcclxuXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YWxsbmluZycpLnN0eWxlLmRpc3BsYXkgPSBpZiBrZXk9PSdhJyB0aGVuICdmbGV4JyBlbHNlICdub25lJ1xyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJsZXMnKS5zdHlsZS5kaXNwbGF5ICAgID0gaWYga2V5PT0nYicgdGhlbiAnZmxleCcgZWxzZSAnbm9uZSdcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZXMnKS5zdHlsZS5kaXNwbGF5ICAgICA9IGlmIGtleT09J2MnIHRoZW4gJ2ZsZXgnIGVsc2UgJ25vbmUnXHJcblxyXG5zaG93SW5mbyA9IChtZXNzYWdlKSAtPiAjIFZpc2EgaGVscFRleHQgcMOlIHNrw6RybWVuXHJcblx0cm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvJylcclxuXHRyb290LmlubmVySFRNTCA9IFwiXCJcclxuXHRkaXYxID0ga29wcGxhICdkaXYnLCByb290XHJcblx0ZGl2MiA9IGtvcHBsYSAnZGl2JywgZGl2MSwge2NsYXNzOlwiaGVscFwifSBcclxuXHRwcmUxID0ga29wcGxhICdwcmUnLCBkaXYyXHJcblx0cHJlMS5pbm5lckhUTUwgPSBtZXNzYWdlXHJcblxyXG5zaG93TWF0cml4ID0gKGZsb2F0aW5nKSAtPiAjIFZpc2EgbWF0cmlzZW4gQWxsYSBtb3QgYWxsYS4gRG90IGJldHlkZXI6IGluZ2V0IG3DtnRlXHJcblx0biA9IHBsYXllcnMubGVuZ3RoXHJcblx0aWYgbiA+IEFMRkFCRVQubGVuZ3RoIHRoZW4gbiA9IEFMRkFCRVQubGVuZ3RoXHJcblx0ZWNobyAnICAgICcgKyAoQUxGQUJFVFtpXSBmb3IgaSBpbiByYW5nZSBuKS5qb2luICcgICAnXHJcblx0Zm9yIGkgaW4gcmFuZ2UgblxyXG5cdFx0bGluZSA9IGZsb2F0aW5nLm1hdHJpeFtpXS5zbGljZSAwLG5cclxuXHRcdGVjaG8gQUxGQUJFVFtpXSArICcgICAnICsgbGluZS5qb2luKCcgICAnKSArICcgICcgKyBwbGF5ZXJzW2ldLmVsb1xyXG5cclxuc2hvd05hbWVzID0gLT5cclxuXHRwZXJzb25zID0gW11cclxuXHRmb3IgW3csYl0saSBpbiByb3VuZHNbY3VyclJvdW5kXVxyXG5cdFx0cHcgPSBbcGxheWVyc1t3XS5uYW1lLCBcIiN7aSsxfSDigKIgV1wiXVxyXG5cdFx0cGIgPSBbcGxheWVyc1tiXS5uYW1lLCBcIiN7aSsxfSDigKIgQlwiXVxyXG5cdFx0aWYgcHdbMF0gPT0gJ0ZSSVJPTkQnIFxyXG5cdFx0XHRwYlsxXSA9ICdCWUUnXHJcblx0XHRcdHBlcnNvbnMucHVzaCBwYlxyXG5cdFx0ZWxzZSBpZiBwYlswXSA9PSAnRlJJUk9ORCcgXHJcblx0XHRcdHB3WzFdID0gJ0JZRSdcclxuXHRcdFx0cGVyc29ucy5wdXNoIHB3XHJcblx0XHRlbHNlXHJcblx0XHRcdHBlcnNvbnMucHVzaCBwd1xyXG5cdFx0XHRwZXJzb25zLnB1c2ggcGJcclxuXHJcblx0cGVyc29ucy5zb3J0KClcclxuXHRcclxuXHRST1dTX1BFUl9DT0wgPSAzMFxyXG5cclxuXHQjIERlbGEgdXBwIGkga29sdW1uZXIgb20gbWF4IDMwIHNwZWxhcmUgdmFyZGVyYVxyXG5cdGNodW5rSW50b0NvbHVtbnMgPSAoaXRlbXMsIHNpemUpIC0+XHJcblx0XHRjb2xzID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlIDAsIGl0ZW1zLmxlbmd0aCwgc2l6ZVxyXG5cdFx0XHRjb2xzLnB1c2ggaXRlbXMuc2xpY2UgaSwgaSArIHNpemVcclxuXHRcdGNvbHNcclxuXHJcblx0IyBCeWdnIGtvbHVtbmVybmEgKGZ5bGxzIGtvbHVtbnZpczogMzAgKyAzMCArIDMwICsgMTApXHJcblx0Y29sdW1ucyA9IGNodW5rSW50b0NvbHVtbnMgcGVyc29ucywgUk9XU19QRVJfQ09MXHJcblxyXG5cdHJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAnbmFtZXMnXHJcblx0cm9vdC5pbm5lckhUTUwgPSAnJyAjIHJlbnNhXHJcblxyXG5cdGNvbnRhaW5lciA9IGtvcHBsYSAnZGl2Jywgcm9vdFxyXG5cdGNvbnRhaW5lci5jbGFzc05hbWUgPSAnY29sdW1ucydcclxuXHJcblx0Y29sdW1ucy5mb3JFYWNoIChjb2wpID0+XHJcblx0XHRjb2xEaXYgPSBrb3BwbGEgJ2RpdicsIGNvbnRhaW5lciwge2NsYXNzOidjb2x1bW4nfVxyXG5cdFx0dGFiZWxsID0ga29wcGxhICd0YWJsZScsIGNvbERpdlxyXG5cclxuXHRcdGNvbC5mb3JFYWNoIChwKSA9PiBcclxuXHRcdFx0dHIxID0ga29wcGxhICd0cicsdGFiZWxsXHJcblx0XHRcdHRkMSA9IGtvcHBsYSAndGQnLHRyMSwge2NsYXNzOiduYW1lJywgdGV4dENvbnRlbnQ6cFswXX1cclxuXHRcdFx0dGQyID0ga29wcGxhICd0ZCcsdHIxLCB7Y2xhc3M6J3NlYXQnLCB0ZXh0Q29udGVudDpwWzFdfVxyXG4gIFxyXG5yb3VuZHNDb250ZW50ID0gKGxvbmcsIGksIF90cikgLT4gIyByb25kZXJuYXMgZGF0YSArIHBvw6RuZyArIFBSLiBpIGFuZ2VyIHNwZWxhcm51bW1lclxyXG5cdGZvciBbdyxiLGNvbG9yLHJlc3VsdF0gaW4gbG9uZ1xyXG5cdFx0b3Bwb25lbnQgPSBzZXR0aW5ncy5PTkUgKyBpZiB3ID09IGkgdGhlbiBiIGVsc2Ugd1xyXG5cdFx0cmVzdWx0ID0gY29udmVydCByZXN1bHQsICd4MjAxRkcnLCAnIDEwwr0xMSdcclxuXHRcdGF0dHIgPSBpZiBjb2xvciA9PSAndycgdGhlbiBcInJpZ2h0OjBweDtcIiBlbHNlIFwibGVmdDowcHg7XCJcclxuXHRcdGNlbGwgPSBrb3BwbGEgJ3RkJywgX3RyLCB7c3R5bGU6IFwicG9zaXRpb246cmVsYXRpdmU7XCJ9XHJcblx0XHRkaXYxID0ga29wcGxhICdkaXYnLCBjZWxsLCB7c3R5bGU6IFwicG9zaXRpb246YWJzb2x1dGU7IHRvcDowcHg7ICBmb250LXNpemU6MC43ZW07XCIgKyBhdHRyLCB0ZXh0Q29udGVudDogb3Bwb25lbnR9XHJcblx0XHRkaXYyID0ga29wcGxhICdkaXYnLCBjZWxsLCB7c3R5bGU6IFwicG9zaXRpb246YWJzb2x1dGU7IHRvcDoxMnB4OyBmb250LXNpemU6MS4xZW07IHRyYW5zZm9ybTogdHJhbnNsYXRlKC0xMCUsIC0xMCUpXCIgKyBhdHRyLCB0ZXh0Q29udGVudDogcmVzdWx0fVxyXG5cdGRpdjMgPSBrb3BwbGEgJ3RkJywgX3RyLCB7c3R5bGUgOiBcInRleHQtYWxpZ246cmlnaHRcIn0gIyBQXHJcblx0ZGl2NCA9IGtvcHBsYSAndGQnLCBfdHIsIHtzdHlsZSA6IFwidGV4dC1hbGlnbjpyaWdodFwifSAjIFBSXHJcblxyXG5zaG93UGxheWVycyA9IChsb25ncykgLT4gIyBWaXNhIHNwZWxhcmxpc3Rhbi4gKGxvbmdzIGxhZ3JhZCBzb20gbGlzdGEgYXYgc3BlbGFyZSlcclxuXHJcblx0IyByb3dzID0gW11cclxuXHRyb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgJ3N0YWxsbmluZydcclxuXHRyb290LmlubmVySFRNTCA9ICcnXHJcblxyXG5cdF9kaXYgPSBrb3BwbGEgJ2RpdicsIHJvb3RcclxuXHRfdGFibGUgPSBrb3BwbGEgJ3RhYmxlJywgX2RpdlxyXG5cdF90aGVhZCA9IGtvcHBsYSAndGhlYWQnLCBfdGFibGVcclxuXHRrb3BwbGEgJ3RoJywgX3RoZWFkLCB7dGV4dENvbnRlbnQ6XCIjXCJ9XHJcblx0a29wcGxhICd0aCcsIF90aGVhZCwge3RleHRDb250ZW50OlwiTmFtblwifVxyXG5cdGtvcHBsYSAndGgnLCBfdGhlYWQsIHt0ZXh0Q29udGVudDpcIkVsb1wifVxyXG5cclxuXHRmb3IgaSBpbiByYW5nZSByb3VuZHMubGVuZ3RoXHJcblx0XHRrb3BwbGEgJ3RoJywgX3RoZWFkLCB7dGV4dENvbnRlbnQ6XCIje2kgKyBzZXR0aW5ncy5PTkV9XCJ9XHJcblxyXG5cdGtvcHBsYSAndGgnLCBfdGhlYWQsIHt0ZXh0Q29udGVudDpcIlBcIn1cclxuXHRrb3BwbGEgJ3RoJywgX3RoZWFkLCB7dGV4dENvbnRlbnQ6XCJQUlwifVxyXG5cclxuXHRmb3IgbG9uZywgaSBpbiBsb25nc1xyXG5cdFx0cGxheWVyID0gcGxheWVyc1tpXVxyXG5cdFx0aWYgcGxheWVyLm5hbWUgPT0gJ0ZSSVJPTkQnIHRoZW4gY29udGludWVcclxuXHRcdF90ciA9IGtvcHBsYSAndHInLCBfdGFibGVcclxuXHRcdGtvcHBsYSAndGQnLCBfdHIsIHt0ZXh0Q29udGVudDogXCIje2kgKyBzZXR0aW5ncy5PTkV9XCJ9XHJcblx0XHRrb3BwbGEgJ3RkJywgX3RyLCB7c3R5bGU6XCJ0ZXh0LWFsaWduOmxlZnRcIiAsIHRleHRDb250ZW50OiBwbGF5ZXIubmFtZX1cclxuXHRcdGtvcHBsYSAndGQnLCBfdHIsIHtzdHlsZTpcInRleHQtYWxpZ246bGVmdFwiICwgdGV4dENvbnRlbnQ6IHBsYXllci5lbG99XHJcblx0XHRyb3VuZHNDb250ZW50IGxvbmcsIGksIF90clxyXG5cclxuc2hvd1RhYmxlcyA9IC0+ICMgVmlzYSBib3Jkc2xpc3RhblxyXG5cclxuXHRpZiByb3VuZHMubGVuZ3RoID09IDAgdGhlbiByZXR1cm5cclxuXHJcblx0cm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkICd0YWJsZXMnXHJcblx0cm9vdC5pbm5lckhUTUwgPSAnJ1xyXG5cclxuXHRfZGl2ID0ga29wcGxhICdkaXYnLCByb290XHJcblx0X3RhYmxlID0ga29wcGxhICd0YWJsZScsIF9kaXZcclxuXHRfdGhlYWQgPSBrb3BwbGEgJ3RoZWFkJywgX3RhYmxlXHJcblx0a29wcGxhICd0aCcsIF90aGVhZCwge3RleHRDb250ZW50OlwiQm9yZFwifVxyXG5cdGtvcHBsYSAndGgnLCBfdGhlYWQsIHt0ZXh0Q29udGVudDpcIlZpdFwifVxyXG5cdGtvcHBsYSAndGgnLCBfdGhlYWQsIHt0ZXh0Q29udGVudDpcIkVsb1wifVxyXG5cdGtvcHBsYSAndGgnLCBfdGhlYWQsIHt0ZXh0Q29udGVudDpcIkVsb1wifVxyXG5cdGtvcHBsYSAndGgnLCBfdGhlYWQsIHt0ZXh0Q29udGVudDpcIlN2YXJ0XCJ9XHJcblx0a29wcGxhICd0aCcsIF90aGVhZCwge3RleHRDb250ZW50OlwiUmVzdWx0YXRcIn1cclxuXHRcclxuXHRmb3IgW3csYl0sIGlUYWJsZSBpbiByb3VuZHNbY3VyclJvdW5kXVxyXG5cdFx0X3RhYmxlLmFwcGVuZENoaWxkIGFkZEJvcmQgaVRhYmxlLCByZXN1bHRzW2N1cnJSb3VuZF1baVRhYmxlXSwgdywgYlxyXG5cclxuc29ydENvbHVtbiA9IChpbmRleCxzdGlnYW5kZSkgLT5cclxuXHR0Ym9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IgJyNzdGFsbG5pbmcgdGJvZHknXHJcblx0cmFkZXIgPSBBcnJheS5mcm9tIHRib2R5LnF1ZXJ5U2VsZWN0b3JBbGwgJ3RyJ1xyXG5cclxuXHRyYWRlci5zb3J0IChhLCBiKSAtPlxyXG5cdFx0Y2VsbEEgPSBhLmNoaWxkcmVuW2luZGV4XS50ZXh0Q29udGVudC50cmltKClcclxuXHRcdGNlbGxCID0gYi5jaGlsZHJlbltpbmRleF0udGV4dENvbnRlbnQudHJpbSgpXHJcblxyXG5cdFx0IyBGw7Zyc8O2ayBqw6RtZsO2cmEgc29tIHRhbCwgYW5uYXJzIHNvbSB0ZXh0XHJcblx0XHRudW1BID0gcGFyc2VGbG9hdCBjZWxsQVxyXG5cdFx0bnVtQiA9IHBhcnNlRmxvYXQgY2VsbEJcclxuXHRcdGlmICFpc05hTihudW1BKSBhbmQgIWlzTmFOKG51bUIpXHJcblx0XHRcdHJldHVybiBpZiBzdGlnYW5kZSB0aGVuIG51bUEgLSBudW1CIGVsc2UgbnVtQiAtIG51bUFcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIGlmIHN0aWdhbmRlIHRoZW4gY2VsbEEubG9jYWxlQ29tcGFyZSBjZWxsQiBlbHNlIGNlbGxCLmxvY2FsZUNvbXBhcmUgY2VsbEFcclxuXHJcblx0IyBMw6RnZyB0aWxsYmFrYSByYWRlcm5hIGkgc29ydGVyYWQgb3JkbmluZ1xyXG5cdGZvciByYWQgaW4gcmFkZXJcclxuXHRcdHRib2R5LmFwcGVuZENoaWxkIHJhZFxyXG5cclxudGFibGVDb3VudCA9IC0+IHBsYXllcnMubGVuZ3RoIC8vIDIgIyBCZXLDpGtuYSBhbnRhbCBib3JkXHJcblxyXG51cGRhdGVMb25ncyA9IC0+ICMgVXBwZGF0ZXJhciBsb25ncyB1dGlmcsOlbiByb3VuZHMgb2NoIHJlc3VsdHNcclxuXHRsb25ncyA9IChsb25nRm9ybSByb3VuZHNbcl0scmVzdWx0c1tyXSBmb3IgciBpbiByYW5nZSByb3VuZHMubGVuZ3RoKVxyXG5cdGxvbmdzID0gXy56aXAgLi4ubG9uZ3MgIyB0cmFuc3BvbmVyYXIgbWF0cmlzZW5cclxuXHJcbm1haW4gPSAtPiAjIEjDpG10YSB1cmxlbiBpIGbDtnJzdGEgaGFuZCwgdGV4dGFyZWFuIGkgYW5kcmEgaGFuZC5cclxuXHJcblx0cGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyB3aW5kb3cubG9jYXRpb24uc2VhcmNoXHJcblxyXG5cdGlmIHBhcmFtcy5zaXplID09IDAgXHJcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyIFwiY2xpY2tcIiwgcGFyc2VUZXh0YXJlYVxyXG5cdFx0c2hvd0luZm8gaGVscFRleHRcclxuXHRcdHJldHVyblxyXG5cclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRleHRhcmVhXCIpLnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmUnXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25cIikuc3R5bGUgPSAnZGlzcGxheTogbm9uZSdcclxuXHJcblx0cGFyc2VVUkwoKVxyXG5cclxuXHRpZiBwbGF5ZXJzLmxlbmd0aCA8IDRcclxuXHRcdHNob3dJbmZvIFwiRHUgbcOlc3RlIGFuZ2UgbWluc3QgZnlyYSBzcGVsYXJlIVwiXHJcblx0XHRyZXR1cm5cclxuXHJcblx0YmVyZ2VyID0gc2V0dGluZ3MuUk9VTkRTID09IHBsYXllcnMubGVuZ3RoIC0gMVxyXG5cdGZsb2F0aW5nID0gc2V0dGluZ3MuUk9VTkRTIDw9IHBsYXllcnMubGVuZ3RoIC8vIDJcclxuXHJcblx0aWYgbm90IGJlcmdlciBeIGZsb2F0aW5nICNzZXR0aW5ncy5ST1VORFMgPj0gcGxheWVycy5sZW5ndGggLy8gMiBhbmQgc2V0dGluZ3MuUk9VTkRTICE9IHBsYXllcnMubGVuZ3RoIC0gMVxyXG5cdFx0c2hvd0luZm8gXCJBbnRhbGV0IHJvbmRlciBkdSBhbmdpdml0IMOkciBlaiBhY2NlcHRhYmVsdCFcIlxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdHJvdW5kcyA9IGlmIGJlcmdlciB0aGVuIG1ha2VCZXJnZXIoKSBlbHNlIG1ha2VGbG9hdGluZygpXHJcblx0cm91bmRzID0gZXhwYW5kIHNldHRpbmdzLkdBTUVTLCByb3VuZHNcclxuXHJcblx0Zm9yIGkgaW4gcmFuZ2Ugc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRyZXN1bHRzLnB1c2ggQXJyYXkodGFibGVDb3VudCgpKS5maWxsICd4J1xyXG5cclxuXHRyZWFkUmVzdWx0cyBwYXJhbXNcclxuXHJcblx0c2V0QnllUmVzdWx0cygpXHJcblxyXG5cdHVwZGF0ZUxvbmdzKClcclxuXHRzaG93UGxheWVycyBsb25nc1xyXG5cdHNob3dUYWJsZXMoKVxyXG5cdHNob3dOYW1lcygpXHJcblxyXG5cdHNldFNjcmVlbiAnYidcclxuXHJcblx0Y3JlYXRlU29ydEV2ZW50cygpXHJcblx0c2V0Q3Vyc29yIGN1cnJSb3VuZCxjdXJyVGFibGVcclxuXHJcblx0ZG9jdW1lbnQudGl0bGUgPSBzZXR0aW5ncy5USVRMRVxyXG5cclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICdrZXlkb3duJywgKGV2ZW50KSAtPiAjIEhhbnRlcmFyIGFsbGEgdGFuZ2VudHRyeWNrbmluZ2FyXHJcblx0XHRrZXkgPSBldmVudC5rZXlcclxuXHRcdCMgZWNobyAna2V5ZG93bicsa2V5LGN1cnJUYWJsZVxyXG5cdFx0aWYga2V5IGluIFsnYScsJ2InLCdjJ10gdGhlbiBzZXRTY3JlZW4ga2V5XHJcblx0XHRcclxuXHRcdGlmIGtleSA9PSAnQXJyb3dMZWZ0JyAgdGhlbiBjaGFuZ2VSb3VuZCAtMVxyXG5cdFx0aWYga2V5ID09ICdBcnJvd1JpZ2h0JyB0aGVuIGNoYW5nZVJvdW5kICsxXHJcblx0XHRpZiBrZXkgPT0gJ0Fycm93VXAnICAgIHRoZW4gY2hhbmdlVGFibGUgLTFcclxuXHRcdGlmIGtleSA9PSAnQXJyb3dEb3duJyAgdGhlbiBjaGFuZ2VUYWJsZSArMVxyXG5cclxuXHRcdGRlbCA9ICdEZWxldGUnXHJcblx0XHRpZiBrZXkgPT0gZGVsIHRoZW4gc2V0UmVzdWx0IGtleSwgJ3gnICMgXCIgIC0gIFwiXHJcblx0XHRpZiBrZXkgPT0gJzAnIHRoZW4gc2V0UmVzdWx0IGtleSwgJzAnICMgXCIwIC0gMVwiXHJcblx0XHRpZiBrZXkgPT0gJyAnIHRoZW4gc2V0UmVzdWx0IGtleSwgJzEnICMgXCLCvSAtIMK9XCJcclxuXHRcdGlmIGtleSA9PSAnMScgdGhlbiBzZXRSZXN1bHQga2V5LCAnMicgIyBcIjEgLSAwXCJcclxuXHJcblx0XHRpZiBrZXkgPT0gJ20nIHRoZW4gc2V0QWxsUFIgKzFcclxuXHRcdGlmIGtleSA9PSAnbCcgdGhlbiBzZXRBbGxQUiAtMVxyXG5cclxuXHRcdGlmIGtleSA9PSAnZCdcclxuXHRcdFx0ZWNobyAnRHVtcDonXHJcblx0XHRcdGVjaG8gJ2N1cnJSb3VuZCcsY3VyclJvdW5kXHJcblx0XHRcdGVjaG8gJ2N1cnJUYWJsZScsY3VyclRhYmxlXHJcblx0XHRcdGVjaG8gJyAgc2V0dGluZ3MnLHNldHRpbmdzXHJcblx0XHRcdGVjaG8gJyAgcGxheWVycycscGxheWVyc1xyXG5cdFx0XHRlY2hvICcgIHJvdW5kcycscm91bmRzXHJcblx0XHRcdGVjaG8gJyAgcmVzdWx0cycsIHJlc3VsdHNcclxuXHRcdFx0ZWNobyAnICBsb25ncycsbG9uZ3NcclxuXHJcblx0XHRneHIgPSBzZXR0aW5ncy5HQU1FUyAqIHNldHRpbmdzLlJPVU5EU1xyXG5cclxuXHRcdGlmIGtleSA9PSAnIycgdGhlbiBzb3J0Q29sdW1uIDAsICAgIHRydWVcclxuXHRcdGlmIGtleSA9PSAnbicgdGhlbiBzb3J0Q29sdW1uIDEsICAgIHRydWVcclxuXHRcdGlmIGtleSA9PSAnZScgdGhlbiBzb3J0Q29sdW1uIDIsICAgIGZhbHNlXHJcblx0XHRpZiBrZXkgPT0gJ3AnIHRoZW4gc29ydENvbHVtbiAzK2d4cixmYWxzZVxyXG5cdFx0aWYga2V5ID09ICdyJyB0aGVuIHNvcnRDb2x1bW4gNCtneHIsZmFsc2VcclxuXHJcblx0XHRzZXRDdXJzb3IgY3VyclJvdW5kLGN1cnJUYWJsZVxyXG5cclxubWFpbigpXHJcbiJdfQ==
//# sourceURL=c:\github\FloatingBerger\tournament.coffee