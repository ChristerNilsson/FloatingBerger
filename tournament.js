// Generated by CoffeeScript 2.7.0
  // ½ •
var ALFABET, ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT, NAME_COLS, addBord, changeRound, changeTable, convert, convertLong, createSortEvents, currRound, currScreen, currTable, echo, flip, frirond, invert, koppla, longs, main, makeBerger, makeFloating, makeURL, parseTextarea, parseURL, players, range, readResults, results, rounds, roundsContent, safeGet, savePairing, setAllPR, setByeResults, setCursor, setP, setPR, setResult, setScreen, settings, shorts, showInfo, showMatrix, showNames, showPlayers, showTables, sortColumn, tableCount, updateLongsAndShorts,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf,
  hasProp = {}.hasOwnProperty;

import {
  Player
} from './player.js';

import {
  Floating
} from './floating.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

import {
  table,
  thead,
  th,
  tr,
  td,
  a,
  div,
  pre,
  p,
  h2
} from './html.js';

echo = console.log;

range = _.range;

ALIGN_LEFT = {
  style: "text-align:left"
};

ALIGN_CENTER = {
  style: "text-align:center"
};

ALIGN_RIGHT = {
  style: "text-align:right"
};

ALFABET = '12345678901234567890123456789012345678901234567890';

NAME_COLS = 5;

//# V A R I A B L E R ##
settings = {
  TITLE: 'Titel saknas',
  GAMES: 1,
  ROUNDS: 0,
  SORT: 1,
  ONE: 1,
  BALANCE: 1,
  DECIMALS: 0 // ONE = 1 # 0=dev 1=prod
};


// Tillståndet ges av dessa variabler:
players = [];

results = []; // ronder x bord. cell: 'x', '0', '1' eller '2'

rounds = []; // ronder x bord. cell: [w,b] 

longs = []; // players x ronder. cell: [w,b,col,res]

shorts = []; // ronder x players. cell: [w,b,col,res]

currScreen = 'a';

currRound = 0;

currTable = 0;

frirond = null; // ingen frirond. Annars index för frironden


//# F U N K T I O N E R ##
addBord = function(bord, res, c0, c1) {
  var color, svart, svart_elo, tr1, vit, vit_elo;
  vit = players[c0].name;
  svart = players[c1].name;
  vit_elo = players[c0].elo;
  svart_elo = players[c1].elo;
  tr1 = document.createElement('tr');
  color = bord === currTable ? 'yellow' : 'white';
  echo(color);
  // echo 'addBord',bord,currTable,"background-color:#{bord == currTable ? 'yellow' : 'white'}"
  // tr1.style = "background-color:#{if bord == currTable then 'yellow' else 'white'}"
  //tr1.setAttribute 'style', "background-color:#{bord == currTable ? 'yellow' : 'white'}"
  koppla('td', tr1, {
    textContent: bord + settings.ONE
  });
  koppla('td', tr1, {
    style: "text-align:left",
    textContent: vit
  });
  koppla('td', tr1, {
    style: "text-align:left",
    textContent: vit_elo
  });
  koppla('td', tr1, {
    style: "text-align:left",
    textContent: svart_elo
  });
  koppla('td', tr1, {
    style: "text-align:left",
    textContent: svart
  });
  koppla('td', tr1, {
    style: `text-align:center; background-color:${color}`,
    textContent: prettyResult(res)
  });
  return tr1;
};

changeRound = function(delta) { // byt rond och uppdatera bordslistan
  currRound = modulo(currRound + delta, rounds.length);
  currTable = 0;
  setScreen(currScreen);
  showTables(currRound);
  return showNames();
};

changeTable = function(delta) { // byt bord
  return currTable = modulo(currTable + delta, tableCount());
};

convert = function(input, a, b) { // byt alla tecken i input som finns i a mot tecken med samma index i b
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

convertLong = function(input, a, b) { // byt alla tecken i input som finns i a mot sträng med samma index i b. b är separerad med |
  var i;
  i = a.indexOf(input);
  b = b.split('|');
  if (indexOf.call(a, input) >= 0) {
    return b[i];
  } else {
    return input;
  }
};

createSortEvents = function() { // Spelarlistan sorteras beroende på vilken kolumn man klickar på. # Namn Elo P eller PR
  var _th, index, j, len, results1, ths;
  ths = document.querySelectorAll('#stallning th');
  index = -1;
  results1 = [];
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index++;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var key;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - settings.ONE;
          showTables(key);
          return;
        }
        return sortColumn(index, indexOf.call("# Namn".split(' '), key) >= 0);
      });
    })(_th, index));
  }
  return results1;
};

export var expand = function(games, rounds) { // make a double round from a single round
  var b, j, len, result, round, w;
  result = [];
  for (j = 0, len = rounds.length; j < len; j++) {
    round = rounds[j];
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([w, b]);
      }
      return results1;
    })());
    if (games === 2) {
      result.push((function() {
        var k, len1, results1;
        results1 = [];
        for (k = 0, len1 = round.length; k < len1; k++) {
          [w, b] = round[k];
          results1.push([b, w]);
        }
        return results1;
      })());
    }
  }
  // echo players
  return result;
};

export var findNumberOfDecimals = function(lst) { // leta upp minsta antal decimaler som krävs för unikhet i listan
  var best, i, ibest, item, j, len, ref, unik;
  best = 0;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    unik = _.uniq((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = lst.length; k < len1; k++) {
        item = lst[k];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

flip = function(flag, id) {
  flag = 1 - flag;
  document.getElementById(id).style.display = ["none", "table"][flag];
  return flag;
};

invert = function(lst) {
  var i, item, j, len, ref, result;
  result = _.clone(lst);
  ref = range(lst.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    item = lst[i];
    result[item] = i;
  }
  return result;
};

koppla = function(typ, parent, attrs = {}) {
  var elem, key;
  elem = document.createElement(typ);
  if ('textContent' in attrs) {
    elem.textContent = attrs.textContent;
    delete attrs.textContent;
  }
  if ('html' in attrs) {
    elem.innerHTML = attrs.html;
    delete attrs.html;
  }
  for (key in attrs) {
    if (!hasProp.call(attrs, key)) continue;
    elem.setAttribute(key, attrs[key]);
  }
  parent.appendChild(elem);
  return elem;
};

export var longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, j, len, ref, res, result, w;
  result = [];
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  result.sort(function(a, b) {
    return a[0] - b[0];
  });
  return result;
};

makeBerger = function() { // lotta en hel berger-turnering.
  var A, half, i, j, len, n, ref;
  n = players.length;
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

makeFloating = function() { // lotta en hel floating-turnering
  var floating;
  floating = new Floating(players, settings);
  showMatrix(floating);
  return floating.rounds;
};

makeURL = function() {
  var j, k, len, len1, player, r, ref, s, url;
  url = "./";
  url += `?TITLE=${settings.TITLE}`;
  url += `&GAMES=${settings.GAMES}`;
  url += `&ROUNDS=${settings.ROUNDS}`;
  url += `&SORT=${settings.SORT}`;
  url += `&ONE=${settings.ONE}`;
  url += `&BALANCE=${settings.BALANCE}`;
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    r = ref[k];
    s = results[r].join('');
    s = _.trimEnd(s, 'x');
    if (s !== '') {
      url += `&r${r + 1}=${s}`;
    }
  }
  url = url.replaceAll(' ', '+');
  return url;
};

export var other = function(input) {
  return convert(input, "012FG", "21022");
};

parseTextarea = function() { // läs in initiala uppgifter om spelarna
  var j, key, len, line, lines, raw, url, val;
  raw = document.getElementById("textarea");
  lines = raw.value;
  lines = lines.split("\n");
  rounds = null;
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line.length === 0 || line[0] === '#') {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        settings.TITLE = val;
      }
      if (key === 'GAMES') {
        settings.GAMES = val;
      }
      if (key === 'ROUNDS') {
        settings.ROUNDS = val;
      }
      if (key === 'SORT') {
        settings.SORT = val;
      }
      if (key === 'ONE') {
        settings.ONE = val;
      }
      if (key === 'BALANCE') {
        settings.BALANCE = val;
      }
    } else {
      players.push(line);
    }
  }
  if (players.length % 2 === 1) {
    frirond = players.length;
    players.push('0000 FRIROND');
  } else {
    frirond = null;
  }
  if (settings.ROUNDS === 0) {
    settings.ROUNDS = players.length - 1;
  }
  if (rounds === null) {
    rounds = [];
  }
  url = makeURL();
  players = [];
  rounds = [];
  window.location.href = url;
  return echo('window.location.href = url');
};

parseURL = function() {
  var elo, i, j, k, len, len1, n, name, params, person, persons, ref;
  params = new URLSearchParams(window.location.search);
  settings.TITLE = safeGet(params, "TITLE");
  settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  settings.ONE = parseInt(safeGet(params, "ONE", "1"));
  settings.BALANCE = parseInt(safeGet(params, "BALANCE", "1"));
  players = [];
  persons = params.getAll("p");
  if (window.location.href.includes('FRIROND')) {
    frirond = persons.length - 1;
  }
  if (settings.SORT === 1) {
    persons.sort().reverse();
  }
  settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  i = 0;
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    i += 1;
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    players.push(new Player(players.length, name, elo));
  }
  // initialisera rounds med 'x' i alla celler
  n = Math.floor(players.length / 2);
  rounds = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    rounds.push(new Array(n).fill('x'));
  }
  return readResults(params);
};

export var prettyResult = function(ch) { // översätt interna resultat till externa
  if (ch === 'x') {
    return "-";
  }
  if (ch === '0') {
    return "0 - 1";
  }
  if (ch === '1') {
    return "½ - ½";
  }
  if (ch === '2') {
    return "1 - 0";
  }
};

readResults = function(params) { // Resultaten läses från urlen
  var arr, ch, j, k, len, len1, n, r, ref, result, results1;
  results = [];
  n = players.length;
  if (frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(settings.GAMES * settings.ROUNDS);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    result = safeGet(params, `r${r + 1}`, new Array(n).fill("x"));
    arr = [];
    for (k = 0, len1 = result.length; k < len1; k++) {
      ch = result[k];
      if (ch === '0') {
        arr.push('0');
      }
      if (ch === '1') {
        arr.push('1');
      }
      if (ch === '2') {
        arr.push('2');
      }
      if (ch === 'x') {
        arr.push('x');
      }
    }
    results1.push(results.push(arr));
  }
  return results1;
};

roundsContent = function(long, i) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, j, len, oppElos, opponent, result, ronder, w;
  ronder = [];
  oppElos = [];
  for (j = 0, len = long.length; j < len; j++) {
    [w, b, color, result] = long[j];
    opponent = settings.ONE + (w === i ? b : w);
    result = convert(result, 'x201FG', ' 10½11');
    attr = color === 'w' ? "right:0px;" : "left:0px;";
    cell = td({
      style: "position:relative;"
    }, div({
      style: "position:absolute; top:0px;  font-size:0.7em;" + attr
    }, opponent), div({
      style: "position:absolute; top:12px; font-size:1.1em; transform: translate(-10%, -10%)"
    }, result));
    ronder.push(cell);
  }
  ronder.push(td(ALIGN_RIGHT, ""));
  ronder.push(td({}, ""));
  return ronder.join("");
};

safeGet = function(params, key, standard = "") { // Hämta parametern given av key från urlen
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

savePairing = function(r, A, half, n) { // skapa en bordslista utifrån berger.
  var i, j, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = j = 1, ref = half; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (frirond) {
    lst.push(lst.shift());
  }
  return lst.sort();
};

setAllPR = function(delta) {
  var _tdPR, decimals, index, j, len, ref, results1, trs;
  decimals = settings.DECIMALS + delta;
  if ((0 <= decimals && decimals <= 6)) {
    settings.DECIMALS = decimals;
  }
  trs = document.querySelectorAll('#stallning tr');
  ref = range(players.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    if (players[index].PR > 0) {
      _tdPR = trs[index + 1].children[4 + settings.GAMES * settings.ROUNDS];
      results1.push(_tdPR.textContent = players[index].PR.toFixed(settings.DECIMALS));
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

setByeResults = function() {
  var b, j, len, r, ref, results1, round, t, w;
  if (!frirond) {
    return;
  }
  ref = range(rounds.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    round = rounds[r];
    results1.push((function() {
      var k, len1, ref1, results2;
      ref1 = range(round.length);
      results2 = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        t = ref1[k];
        [w, b] = round[t];
        if (w === frirond) {
          results[r][t] = '0';
        }
        if (b === frirond) {
          results2.push(results[r][t] = '2');
        } else {
          results2.push(void 0);
        }
      }
      return results2;
    })());
  }
  return results1;
};

setCursor = function(round, table) { // Den gula bakgrunden uppdateras beroende på piltangenterna
  var _th, _tr, color, index, j, k, len, len1, results1, ths, trs;
  ths = document.querySelectorAll('#stallning th');
// index = -1
  for (index = j = 0, len = ths.length; j < len; index = ++j) {
    _th = ths[index];
    // index++
    color = index === currRound + 3 ? 'yellow' : 'white';
    _th.style = `background-color:${color}`;
  }
  trs = document.querySelectorAll('#tables tr');
// index = -1
  results1 = [];
  for (index = k = 0, len1 = trs.length; k < len1; index = ++k) {
    _tr = trs[index];
    // index++
    color = index === currTable + 0 ? 'yellow' : 'white';
    results1.push(_tr.children[5].style = `background-color:${color}`);
  }
  return results1;
};

setP = function(trs, index, translator) {
  var _tdP, andel, ch, elo, elos, j, len, opp, perf, r, ref, scoresP, scoresPR, value;
  scoresP = 0;
  scoresPR = 0;
  elos = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    ch = longs[index][r][3];
    value = '012'.indexOf(ch);
    opp = longs[index][r][1];
    if (value !== -1) {
      elo = players[opp].elo;
      scoresP += value;
      if (elo !== 0) {
        scoresPR += value;
        elos.push(Math.round(elo));
      }
    }
  }
  _tdP = trs[translator[index] + 1].children[3 + settings.GAMES * settings.ROUNDS];
  _tdP.textContent = elos.length === 0 ? '' : (scoresP / 2).toFixed(1);
  // kalkylera performance rating mha vinstandel och elo-tal
  if (elos.length === 0) {
    return players[index].PR = 0;
  } else {
    andel = scoresPR / 2;
    perf = performance(andel, elos);
    return players[index].PR = perf;
  }
};

setPR = function(trs, index, translator) {
  var _tdPR;
  _tdPR = trs[translator[index] + 1].children[4 + settings.GAMES * settings.ROUNDS];
  return _tdPR.textContent = players[index].PR === 0 ? '' : players[index].PR.toFixed(settings.DECIMALS);
};

setResult = function(key, res) { // Uppdatera results samt gui:t.
  var _td, _tr, b, cell, i, j, len, old, one, ref, tr5, translator, trs, w;
  trs = document.querySelectorAll('#stallning tr');
  old = results[currRound][currTable];
  [w, b] = rounds[currRound][currTable];
  if (frirond && (w === frirond || b === frirond)) {
    return;
  }
  cell = old + res; // transition, 16 possibilities
  if (indexOf.call('xx 00 11 22'.split(' '), cell) >= 0) { // lyckad kontrollinmatning, gå till nästa bord
    currTable = modulo(currTable + 1, tableCount());
    return;
  }
  if (indexOf.call('01 02 10 12 20 21'.split(' '), cell) >= 0) { // inmatning stämmer ej, lämna
    return;
  }
  
  // uppdatera och gå till nästa bord
  results[currRound][currTable] = res;
  updateLongsAndShorts();
  one = settings.ONE;
  translator = [];
  ref = range(1, trs.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    translator.push(Math.round(trs[i].children[0].textContent) - 1);
  }
  translator = invert(translator);
  _td = trs[translator[w] + one].children[3 + currRound].children[1];
  _td.textContent = "0½1"[res];
  _td = trs[translator[b] + one].children[3 + currRound].children[1];
  _td.textContent = "1½0"[res];
  setP(trs, b, translator);
  setP(trs, w, translator);
  setPR(trs, b, translator);
  setPR(trs, w, translator);
  // Sätt tables
  trs = document.querySelectorAll('#tables tr');
  //	echo (item.textContent for item in trs)
  _tr = trs[currTable + 1];
  echo(_tr);
  tr5 = _tr.children[5];
  tr5.textContent = prettyResult(res);
  currTable = modulo(currTable + 1, tableCount());
  return history.replaceState({}, "", makeURL()); // för att slippa omladdning av sidan
};

setScreen = function(key) {
  var _h2, header;
  currScreen = key;
  header = document.getElementById('header');
  header.innerHTML = '';
  _h2 = koppla('h2', header);
  if (key === 'a') {
    _h2.textContent = "A Ställning för " + settings.TITLE;
  }
  if (key === 'b') {
    _h2.textContent = `B Bordslista rond ${currRound + settings.ONE} för ${settings.TITLE}`;
  }
  if (key === 'c') {
    _h2.textContent = `C Namnlista rond ${currRound + settings.ONE} för ${settings.TITLE}`;
  }
  document.getElementById('stallning').style.display = key === 'a' ? 'flex' : 'none';
  document.getElementById('tables').style.display = key === 'b' ? 'flex' : 'none';
  return document.getElementById('names').style.display = key === 'c' ? 'flex' : 'none';
};

showInfo = function(message) { // Visa helpText på skärmen
  return document.getElementById('info').innerHTML = div({}, div({
    class: "help"
  }, pre({}, message)));
};

showMatrix = function(floating) { // Visa matrisen Alla mot alla. Dot betyder: inget möte
  var i, j, len, line, n, ref, results1;
  n = players.length;
  if (n > ALFABET.length) {
    n = ALFABET.length;
  }
  echo('    ' + ((function() {
    var j, len, ref, results1;
    ref = range(n);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results1.push(ALFABET[i]);
    }
    return results1;
  })()).join('   '));
  ref = range(n);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line = floating.matrix[i].slice(0, n);
    results1.push(echo(ALFABET[i] + '   ' + line.join('   ') + '  ' + players[i].elo));
  }
  return results1;
};

showNames = function() {
  var ROWS_PER_COL, b, chunkIntoColumns, columns, container, i, j, len, pb, persons, pw, ref, root, w;
  persons = [];
  ref = rounds[currRound];
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    [w, b] = ref[i];
    pw = [players[w].name, `${i + 1} • W`];
    pb = [players[b].name, `${i + 1} • B`];
    if (pw[0] === 'FRIROND') {
      pb[1] = 'BYE';
      persons.push(pb);
    } else if (pb[0] === 'FRIROND') {
      pw[1] = 'BYE';
      persons.push(pw);
    } else {
      persons.push(pw);
      persons.push(pb);
    }
  }
  persons.sort();
  ROWS_PER_COL = 30;
  // Dela upp i kolumner om max 30 spelare vardera
  chunkIntoColumns = function(items, size) {
    var cols, k, len1, ref1;
    cols = [];
    ref1 = range(0, items.length, size);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      cols.push(items.slice(i, i + size));
    }
    return cols;
  };
  // Bygg kolumnerna (fylls kolumnvis: 30 + 30 + 30 + 10)
  columns = chunkIntoColumns(persons, ROWS_PER_COL);
  root = document.getElementById('names');
  root.innerHTML = ''; // rensa
  container = koppla('div', root);
  container.className = 'columns';
  return columns.forEach((col) => {
    var colDiv, tabell;
    colDiv = koppla('div', container, {
      class: 'column'
    });
    tabell = koppla('table', colDiv);
    return col.forEach((p) => {
      var td1, td2, tr1;
      tr1 = koppla('tr', tabell);
      td1 = koppla('td', tr1, {
        class: 'name',
        textContent: p[0]
      });
      return td2 = koppla('td', tr1, {
        class: 'seat',
        textContent: p[1]
      });
    });
  });
};

showPlayers = function(longs) { // Visa spelarlistan. (longs lagrad som lista av spelare)
  var i, j, len, long, player, result, rows;
  rows = [];
  for (i = j = 0, len = longs.length; j < len; i = ++j) {
    long = longs[i];
    player = players[i];
    if (player.name === 'FRIROND') {
      continue;
    }
    rows.push(tr({}, td({}, i + settings.ONE), td(ALIGN_LEFT, player.name), td({}, player.elo), roundsContent(long, i)));
  }
  result = div({}, table({}, thead({}, th({}, "#"), th({}, "Namn"), th({}, "Elo"), ((function() {
    var k, len1, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      results1.push(th({}, `${i + settings.ONE}`));
    }
    return results1;
  })()).join(""), th({}, "P"), th({}, "PR")), rows.join("")));
  return document.getElementById('stallning').innerHTML = result;
};

showTables = function(selectedRound) { // Visa bordslistan
  var _div, _table, _thead, b, iTable, j, len, ref, results1, root, w;
  if (rounds.length === 0) {
    return;
  }
  root = document.getElementById('tables');
  root.innerHTML = '';
  _div = koppla('div', root);
  _table = koppla('table', _div);
  _thead = koppla('thead', _table);
  koppla('th', _thead, {
    textContent: "Bord"
  });
  koppla('th', _thead, {
    textContent: "Vit"
  });
  koppla('th', _thead, {
    textContent: "Elo"
  });
  koppla('th', _thead, {
    textContent: "Elo"
  });
  koppla('th', _thead, {
    textContent: "Svart"
  });
  koppla('th', _thead, {
    textContent: "Resultat"
  });
  ref = rounds[selectedRound];
  results1 = [];
  for (iTable = j = 0, len = ref.length; j < len; iTable = ++j) {
    [w, b] = ref[iTable];
    results1.push(_table.appendChild(addBord(iTable, results[selectedRound][iTable], w, b)));
  }
  return results1;
};

sortColumn = function(index, stigande) {
  var j, len, rad, rader, results1, tbody;
  tbody = document.querySelector('#stallning tbody');
  rader = Array.from(tbody.querySelectorAll('tr'));
  rader.sort(function(a, b) {
    var cellA, cellB, numA, numB;
    cellA = a.children[index].textContent.trim();
    cellB = b.children[index].textContent.trim();
    // Försök jämföra som tal, annars som text
    numA = parseFloat(cellA);
    numB = parseFloat(cellB);
    if (!isNaN(numA) && !isNaN(numB)) {
      if (stigande) {
        return numA - numB;
      } else {
        return numB - numA;
      }
    } else {
      if (stigande) {
        return cellA.localeCompare(cellB);
      } else {
        return cellB.localeCompare(cellA);
      }
    }
  });
// Lägg tillbaka raderna i sorterad ordning
  results1 = [];
  for (j = 0, len = rader.length; j < len; j++) {
    rad = rader[j];
    results1.push(tbody.appendChild(rad));
  }
  return results1;
};

tableCount = function() {
  return Math.floor(players.length / 2); // Beräkna antal bord
};

updateLongsAndShorts = function() { // Uppdaterar longs och shorts utifrån rounds och results
  var r;
  longs = (function() {
    var j, len, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      results1.push(longForm(rounds[r], results[r]));
    }
    return results1;
  })();
  shorts = longs;
  return longs = _.zip(...longs); // transponerar matrisen
};

main = function() { // Hämta urlen i första hand, textarean i andra hand.
  var berger, floating, i, j, len, params, ref;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo(helpText);
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseURL();
  if (players.length < 4) {
    showInfo("Du måste ange minst fyra spelare!");
    return;
  }
  berger = settings.ROUNDS === players.length - 1;
  floating = settings.ROUNDS <= Math.floor(players.length / 2);
  if (!berger ^ floating) { //settings.ROUNDS >= players.length // 2 and settings.ROUNDS != players.length - 1
    showInfo("Antalet ronder du angivit är ej acceptabelt!");
    return;
  }
  rounds = berger ? makeBerger() : makeFloating();
  rounds = expand(settings.GAMES, rounds);
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(Array(tableCount()).fill('x'));
  }
  readResults(params);
  setByeResults();
  updateLongsAndShorts();
  showPlayers(longs);
  showTables(0);
  showNames();
  setScreen('b');
  createSortEvents();
  setCursor(currRound, currTable);
  document.title = settings.TITLE;
  return document.addEventListener('keydown', function(event) { // Hanterar alla tangenttryckningar
    var del, gxr, key;
    key = event.key;
    echo('keydown', key, currTable);
    if (key === 'a' || key === 'b' || key === 'c') {
      setScreen(key);
    }
    if (key === 'ArrowLeft') {
      changeRound(-1);
    }
    if (key === 'ArrowRight') {
      changeRound(+1);
    }
    if (key === 'ArrowUp') {
      changeTable(-1);
    }
    if (key === 'ArrowDown') {
      changeTable(+1);
    }
    del = 'Delete';
    if (key === del) {
      setResult(key, 'x'); // "  -  "
    }
    if (key === '0') {
      setResult(key, '0'); // "0 - 1"
    }
    if (key === ' ') {
      setResult(key, '1'); // "½ - ½"
    }
    if (key === '1') {
      setResult(key, '2'); // "1 - 0"
    }
    if (key === 'm') {
      setAllPR(+1);
    }
    if (key === 'l') {
      setAllPR(-1);
    }
    if (key === 'd') {
      echo('Dump:');
      echo('  settings', settings);
      // echo '  href',window.location.href
      echo('  players', players);
      echo('  rounds', rounds);
      echo('  results', results);
      echo('  longs', longs);
      echo('  shorts', shorts);
    }
    gxr = settings.GAMES * settings.ROUNDS;
    if (key === '#') {
      sortColumn(0, true);
    }
    if (key === 'n') {
      sortColumn(1, true);
    }
    if (key === 'e') {
      sortColumn(2, false);
    }
    if (key === 'p') {
      sortColumn(3 + gxr, false);
    }
    if (key === 'r') {
      sortColumn(4 + gxr, false);
    }
    return setCursor(currRound, currTable);
  });
};

main();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91cm5hbWVudC5qcyIsInNvdXJjZVJvb3QiOiJcXCIsInNvdXJjZXMiOlsidG91cm5hbWVudC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFLO0FBQUEsSUFBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLEVBQUEsU0FBQSxFQUFBLE9BQUEsRUFBQSxXQUFBLEVBQUEsV0FBQSxFQUFBLE9BQUEsRUFBQSxXQUFBLEVBQUEsZ0JBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsVUFBQSxFQUFBLFlBQUEsRUFBQSxPQUFBLEVBQUEsYUFBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLGFBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxVQUFBLEVBQUEsU0FBQSxFQUFBLFdBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLFVBQUEsRUFBQSxvQkFBQTtFQUFBOzs7O0FBRUwsT0FBQTtFQUFRLE1BQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxRQUFSO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsUUFBUjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLFdBQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxLQUFSO0VBQWMsS0FBZDtFQUFvQixFQUFwQjtFQUF1QixFQUF2QjtFQUEwQixFQUExQjtFQUE2QixDQUE3QjtFQUErQixHQUEvQjtFQUFtQyxHQUFuQztFQUF1QyxDQUF2QztFQUF5QyxFQUF6QztDQUFBLE1BQUE7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OztJQUVBLElBQUcsR0FBQSxLQUFPLEdBQVY7TUFDQyxJQUFBLENBQUssT0FBTDtNQUNBLElBQUEsQ0FBSyxZQUFMLEVBQWtCLFFBQWxCLEVBREg7O01BR0csSUFBQSxDQUFLLFdBQUwsRUFBaUIsT0FBakI7TUFDQSxJQUFBLENBQUssVUFBTCxFQUFnQixNQUFoQjtNQUNBLElBQUEsQ0FBSyxXQUFMLEVBQWtCLE9BQWxCO01BQ0EsSUFBQSxDQUFLLFNBQUwsRUFBZSxLQUFmO01BQ0EsSUFBQSxDQUFLLFVBQUwsRUFBZ0IsTUFBaEIsRUFSRDs7SUFVQSxHQUFBLEdBQU0sUUFBUSxDQUFDLEtBQVQsR0FBaUIsUUFBUSxDQUFDO0lBRWhDLElBQUcsR0FBQSxLQUFPLEdBQVY7TUFBbUIsVUFBQSxDQUFXLENBQVgsRUFBaUIsSUFBakIsRUFBbkI7O0lBQ0EsSUFBRyxHQUFBLEtBQU8sR0FBVjtNQUFtQixVQUFBLENBQVcsQ0FBWCxFQUFpQixJQUFqQixFQUFuQjs7SUFDQSxJQUFHLEdBQUEsS0FBTyxHQUFWO01BQW1CLFVBQUEsQ0FBVyxDQUFYLEVBQWlCLEtBQWpCLEVBQW5COztJQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7TUFBbUIsVUFBQSxDQUFXLENBQUEsR0FBRSxHQUFiLEVBQWlCLEtBQWpCLEVBQW5COztJQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7TUFBbUIsVUFBQSxDQUFXLENBQUEsR0FBRSxHQUFiLEVBQWlCLEtBQWpCLEVBQW5COztXQUVBLFNBQUEsQ0FBVSxTQUFWLEVBQW9CLFNBQXBCO0VBckNvQyxDQUFyQztBQS9DTTs7QUFzRlAsSUFBQSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIyDCvSDigKJcclxuXHJcbmltcG9ydCB7UGxheWVyfSBmcm9tICcuL3BsYXllci5qcydcclxuaW1wb3J0IHtGbG9hdGluZ30gZnJvbSAnLi9mbG9hdGluZy5qcydcclxuaW1wb3J0IHtoZWxwVGV4dH0gZnJvbSAnLi90ZXh0cy5qcydcclxuaW1wb3J0IHtwZXJmb3JtYW5jZX0gZnJvbSAnLi9yYXRpbmcuanMnXHJcbmltcG9ydCB7dGFibGUsdGhlYWQsdGgsdHIsdGQsYSxkaXYscHJlLHAsaDJ9IGZyb20gJy4vaHRtbC5qcydcclxuXHJcbmVjaG8gPSBjb25zb2xlLmxvZ1xyXG5yYW5nZSA9IF8ucmFuZ2VcclxuXHJcbkFMSUdOX0xFRlQgICA9IHtzdHlsZTogXCJ0ZXh0LWFsaWduOmxlZnRcIn1cclxuQUxJR05fQ0VOVEVSID0ge3N0eWxlOiBcInRleHQtYWxpZ246Y2VudGVyXCJ9XHJcbkFMSUdOX1JJR0hUICA9IHtzdHlsZTogXCJ0ZXh0LWFsaWduOnJpZ2h0XCJ9XHJcblxyXG5BTEZBQkVUID0gJzEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwJ1xyXG5cclxuTkFNRV9DT0xTID0gNVxyXG5cclxuIyMgViBBIFIgSSBBIEIgTCBFIFIgIyNcclxuXHJcbnNldHRpbmdzID0ge1RJVExFOidUaXRlbCBzYWtuYXMnLCBHQU1FUzoxLCBST1VORFM6MCwgU09SVDoxLCBPTkU6MSwgQkFMQU5DRToxLCBERUNJTUFMUzowfSAjIE9ORSA9IDEgIyAwPWRldiAxPXByb2RcclxuXHJcbiMgVGlsbHN0w6VuZGV0IGdlcyBhdiBkZXNzYSB2YXJpYWJsZXI6XHJcbnBsYXllcnMgPSBbXVxyXG5cclxucmVzdWx0cyA9IFtdICMgcm9uZGVyIHggYm9yZC4gY2VsbDogJ3gnLCAnMCcsICcxJyBlbGxlciAnMidcclxucm91bmRzICA9IFtdICMgcm9uZGVyIHggYm9yZC4gY2VsbDogW3csYl0gXHJcbmxvbmdzICAgPSBbXSAjIHBsYXllcnMgeCByb25kZXIuIGNlbGw6IFt3LGIsY29sLHJlc11cclxuc2hvcnRzICA9IFtdICMgcm9uZGVyIHggcGxheWVycy4gY2VsbDogW3csYixjb2wscmVzXVxyXG5cclxuY3VyclNjcmVlbiA9ICdhJ1xyXG5jdXJyUm91bmQgPSAwXHJcbmN1cnJUYWJsZSA9IDBcclxuXHJcbmZyaXJvbmQgPSBudWxsICMgaW5nZW4gZnJpcm9uZC4gQW5uYXJzIGluZGV4IGbDtnIgZnJpcm9uZGVuXHJcblxyXG4jIyBGIFUgTiBLIFQgSSBPIE4gRSBSICMjXHJcblxyXG5hZGRCb3JkID0gKGJvcmQscmVzLGMwLGMxKSAtPlxyXG5cdHZpdCA9IHBsYXllcnNbYzBdLm5hbWVcclxuXHRzdmFydCA9IHBsYXllcnNbYzFdLm5hbWVcclxuXHR2aXRfZWxvID0gcGxheWVyc1tjMF0uZWxvXHJcblx0c3ZhcnRfZWxvID0gcGxheWVyc1tjMV0uZWxvXHJcblx0dHIxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAndHInXHJcblx0Y29sb3IgPSBpZiBib3JkID09IGN1cnJUYWJsZSB0aGVuICd5ZWxsb3cnIGVsc2UgJ3doaXRlJ1xyXG5cdGVjaG8gY29sb3JcclxuXHQjIGVjaG8gJ2FkZEJvcmQnLGJvcmQsY3VyclRhYmxlLFwiYmFja2dyb3VuZC1jb2xvcjoje2JvcmQgPT0gY3VyclRhYmxlID8gJ3llbGxvdycgOiAnd2hpdGUnfVwiXHJcblx0IyB0cjEuc3R5bGUgPSBcImJhY2tncm91bmQtY29sb3I6I3tpZiBib3JkID09IGN1cnJUYWJsZSB0aGVuICd5ZWxsb3cnIGVsc2UgJ3doaXRlJ31cIlxyXG5cdCN0cjEuc2V0QXR0cmlidXRlICdzdHlsZScsIFwiYmFja2dyb3VuZC1jb2xvcjoje2JvcmQgPT0gY3VyclRhYmxlID8gJ3llbGxvdycgOiAnd2hpdGUnfVwiXHJcblx0a29wcGxhICd0ZCcsIHRyMSwge3RleHRDb250ZW50IDogYm9yZCArIHNldHRpbmdzLk9ORX1cclxuXHRrb3BwbGEgJ3RkJywgdHIxLCB7c3R5bGU6XCJ0ZXh0LWFsaWduOmxlZnRcIiwgdGV4dENvbnRlbnQgOiB2aXR9XHJcblx0a29wcGxhICd0ZCcsIHRyMSwge3N0eWxlOlwidGV4dC1hbGlnbjpsZWZ0XCIsIHRleHRDb250ZW50IDogdml0X2Vsb31cclxuXHRrb3BwbGEgJ3RkJywgdHIxLCB7c3R5bGU6XCJ0ZXh0LWFsaWduOmxlZnRcIiwgdGV4dENvbnRlbnQgOiBzdmFydF9lbG99XHJcblx0a29wcGxhICd0ZCcsIHRyMSwge3N0eWxlOlwidGV4dC1hbGlnbjpsZWZ0XCIsIHRleHRDb250ZW50IDogc3ZhcnR9XHJcblx0a29wcGxhICd0ZCcsIHRyMSwge3N0eWxlOlwidGV4dC1hbGlnbjpjZW50ZXI7IGJhY2tncm91bmQtY29sb3I6I3tjb2xvcn1cIiwgdGV4dENvbnRlbnQgOiBwcmV0dHlSZXN1bHQgcmVzfVxyXG5cdHRyMVxyXG5cdFxyXG5jaGFuZ2VSb3VuZCA9IChkZWx0YSkgLT4gIyBieXQgcm9uZCBvY2ggdXBwZGF0ZXJhIGJvcmRzbGlzdGFuXHJcblx0Y3VyclJvdW5kID0gKGN1cnJSb3VuZCArIGRlbHRhKSAlJSByb3VuZHMubGVuZ3RoXHJcblx0Y3VyclRhYmxlID0gMFxyXG5cdFxyXG5cdHNldFNjcmVlbiBjdXJyU2NyZWVuXHJcblx0c2hvd1RhYmxlcyBjdXJyUm91bmRcclxuXHRzaG93TmFtZXMoKVxyXG5cclxuY2hhbmdlVGFibGUgPSAoZGVsdGEpIC0+ICMgYnl0IGJvcmRcclxuXHRjdXJyVGFibGUgPSAoY3VyclRhYmxlICsgZGVsdGEpICUlIHRhYmxlQ291bnQoKVxyXG5cclxuY29udmVydCA9IChpbnB1dCxhLGIpIC0+ICMgYnl0IGFsbGEgdGVja2VuIGkgaW5wdXQgc29tIGZpbm5zIGkgYSBtb3QgdGVja2VuIG1lZCBzYW1tYSBpbmRleCBpIGJcclxuXHRpZiBpbnB1dCBpbiBhIHRoZW4gYlthLmluZGV4T2YgaW5wdXRdIGVsc2UgaW5wdXQgIyBhIG9jaCBiIMOkciBzdHLDpG5nYXJcclxuXHJcbmNvbnZlcnRMb25nID0gKGlucHV0LGEsYikgLT4gIyBieXQgYWxsYSB0ZWNrZW4gaSBpbnB1dCBzb20gZmlubnMgaSBhIG1vdCBzdHLDpG5nIG1lZCBzYW1tYSBpbmRleCBpIGIuIGIgw6RyIHNlcGFyZXJhZCBtZWQgfFxyXG5cdGkgPSBhLmluZGV4T2YgaW5wdXRcclxuXHRiID0gYi5zcGxpdCAnfCdcclxuXHRpZiBpbnB1dCBpbiBhIHRoZW4gYltpXSBlbHNlIGlucHV0XHJcblxyXG5jcmVhdGVTb3J0RXZlbnRzID0gLT4gIyBTcGVsYXJsaXN0YW4gc29ydGVyYXMgYmVyb2VuZGUgcMOlIHZpbGtlbiBrb2x1bW4gbWFuIGtsaWNrYXIgcMOlLiAjIE5hbW4gRWxvIFAgZWxsZXIgUFJcclxuXHJcblx0dGhzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnI3N0YWxsbmluZyB0aCdcclxuXHJcblx0aW5kZXggPSAtMVxyXG5cdGZvciBfdGggaW4gdGhzXHJcblx0XHRpbmRleCsrXHJcblx0XHRkbyAoX3RoLGluZGV4KSAtPlxyXG5cdFx0XHRfdGguYWRkRXZlbnRMaXN0ZW5lciAnY2xpY2snLCAoZXZlbnQpIC0+XHJcblx0XHRcdFx0a2V5ID0gX3RoLnRleHRDb250ZW50XHJcblx0XHRcdFx0aWYgIWlzTmFOIHBhcnNlSW50IGtleVxyXG5cdFx0XHRcdFx0a2V5ID0gcGFyc2VJbnQoa2V5KSAtIHNldHRpbmdzLk9ORVxyXG5cdFx0XHRcdFx0c2hvd1RhYmxlcyBrZXlcclxuXHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdHNvcnRDb2x1bW4gaW5kZXgsIGtleSBpbiBcIiMgTmFtblwiLnNwbGl0ICcgJ1xyXG5cclxuZXhwb3J0IGV4cGFuZCA9IChnYW1lcywgcm91bmRzKSAtPiAjIG1ha2UgYSBkb3VibGUgcm91bmQgZnJvbSBhIHNpbmdsZSByb3VuZFxyXG5cdHJlc3VsdCA9IFtdXHJcblx0Zm9yIHJvdW5kIGluIHJvdW5kc1xyXG5cdFx0cmVzdWx0LnB1c2ggKFt3LGJdIGZvciBbdyxiXSBpbiByb3VuZClcclxuXHRcdGlmIGdhbWVzID09IDIgdGhlbiByZXN1bHQucHVzaCAoW2Isd10gZm9yIFt3LGJdIGluIHJvdW5kKVxyXG5cdCMgZWNobyBwbGF5ZXJzXHJcblx0cmV0dXJuIHJlc3VsdFxyXG5cclxuZXhwb3J0IGZpbmROdW1iZXJPZkRlY2ltYWxzID0gKGxzdCkgLT4gIyBsZXRhIHVwcCBtaW5zdGEgYW50YWwgZGVjaW1hbGVyIHNvbSBrcsOkdnMgZsO2ciB1bmlraGV0IGkgbGlzdGFuXHJcblx0YmVzdCA9IDBcclxuXHRmb3IgaSBpbiByYW5nZSA2XHJcblx0XHR1bmlrID0gXy51bmlxIChpdGVtLnRvRml4ZWQoaSkgZm9yIGl0ZW0gaW4gbHN0KVxyXG5cdFx0aWYgdW5pay5sZW5ndGggPiBiZXN0IHRoZW4gW2Jlc3QsaWJlc3RdID0gW3VuaWsubGVuZ3RoLGldXHJcblx0aWJlc3RcclxuXHJcbmZsaXAgPSAoZmxhZyxpZCkgLT5cclxuXHRmbGFnID0gMSAtIGZsYWdcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkuc3R5bGUuZGlzcGxheSA9IFtcIm5vbmVcIixcInRhYmxlXCJdW2ZsYWddXHJcblx0ZmxhZ1xyXG5cclxuaW52ZXJ0ID0gKGxzdCkgLT5cclxuXHRyZXN1bHQgPSBfLmNsb25lIGxzdFxyXG5cdGZvciBpIGluIHJhbmdlIGxzdC5sZW5ndGhcclxuXHRcdGl0ZW0gPSBsc3RbaV1cclxuXHRcdHJlc3VsdFtpdGVtXSA9IGlcclxuXHRyZXN1bHRcclxuXHJcbmtvcHBsYSA9ICh0eXAsIHBhcmVudCwgYXR0cnMgPSB7fSkgLT5cclxuICBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCB0eXBcclxuXHJcbiAgaWYgJ3RleHRDb250ZW50JyBvZiBhdHRyc1xyXG4gICAgZWxlbS50ZXh0Q29udGVudCA9IGF0dHJzLnRleHRDb250ZW50XHJcbiAgICBkZWxldGUgYXR0cnMudGV4dENvbnRlbnRcclxuXHJcbiAgaWYgJ2h0bWwnIG9mIGF0dHJzXHJcbiAgICBlbGVtLmlubmVySFRNTCA9IGF0dHJzLmh0bWxcclxuICAgIGRlbGV0ZSBhdHRycy5odG1sXHJcblxyXG4gIGZvciBvd24ga2V5IG9mIGF0dHJzXHJcbiAgICBlbGVtLnNldEF0dHJpYnV0ZSBrZXksIGF0dHJzW2tleV1cclxuXHJcbiAgcGFyZW50LmFwcGVuZENoaWxkIGVsZW1cclxuICBlbGVtXHJcblxyXG5leHBvcnQgbG9uZ0Zvcm0gPSAocm91bmRzLCByZXN1bHRzKSAtPiAjIHByb2R1Y2VzIHRoZSBsb25nIGZvcm0gZm9yIE9ORSByb3VuZCAoc3BlbGFybGlzdGFuKS4gSWYgdGhlcmUgaXMgYSBCWUUsIHB1dCBpdCBsYXN0IGluIHRoZSBsaXN0XHJcblx0cmVzdWx0ID0gW11cclxuXHRmb3IgaSBpbiByYW5nZSByb3VuZHMubGVuZ3RoXHJcblx0XHRbdyxiXSA9IHJvdW5kc1tpXVxyXG5cdFx0cmVzID0gcmVzdWx0c1tpXVxyXG5cdFx0cmVzdWx0LnB1c2ggW3csYiwndycscmVzXVxyXG5cdFx0cmVzdWx0LnB1c2ggW2IsdywnYicsb3RoZXIgcmVzXVxyXG5cclxuXHRyZXN1bHQuc29ydCAoYSxiKSAtPiBhWzBdIC0gYlswXVxyXG5cdHJlc3VsdFxyXG5cclxubWFrZUJlcmdlciA9IC0+ICMgbG90dGEgZW4gaGVsIGJlcmdlci10dXJuZXJpbmcuXHJcblx0biA9IHBsYXllcnMubGVuZ3RoXHJcblx0aGFsZiA9IG4gLy8gMiBcclxuXHRBID0gWzAuLi5uXVxyXG5cdHJvdW5kcyA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2Ugc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRyb3VuZHMucHVzaCBzYXZlUGFpcmluZyBpLCBBLCBoYWxmLCBuXHJcblx0XHRBLnBvcCgpXHJcblx0XHRBID0gQS5zbGljZShoYWxmKS5jb25jYXQgQS5zbGljZSgwLGhhbGYpXHJcblx0XHRBLnB1c2ggbi0xXHJcblx0cm91bmRzXHJcblxyXG5tYWtlRmxvYXRpbmcgPSAtPiAjIGxvdHRhIGVuIGhlbCBmbG9hdGluZy10dXJuZXJpbmdcclxuXHRmbG9hdGluZyA9IG5ldyBGbG9hdGluZyBwbGF5ZXJzLCBzZXR0aW5nc1xyXG5cdHNob3dNYXRyaXggZmxvYXRpbmdcclxuXHRmbG9hdGluZy5yb3VuZHNcclxuXHJcbm1ha2VVUkwgPSAtPlxyXG5cdHVybCA9IFwiLi9cIlxyXG5cclxuXHR1cmwgKz0gXCI/VElUTEU9I3tzZXR0aW5ncy5USVRMRX1cIlxyXG5cdHVybCArPSBcIiZHQU1FUz0je3NldHRpbmdzLkdBTUVTfVwiXHJcblx0dXJsICs9IFwiJlJPVU5EUz0je3NldHRpbmdzLlJPVU5EU31cIlxyXG5cdHVybCArPSBcIiZTT1JUPSN7c2V0dGluZ3MuU09SVH1cIlxyXG5cdHVybCArPSBcIiZPTkU9I3tzZXR0aW5ncy5PTkV9XCJcclxuXHR1cmwgKz0gXCImQkFMQU5DRT0je3NldHRpbmdzLkJBTEFOQ0V9XCJcclxuXHJcblx0Zm9yIHBsYXllciBpbiBwbGF5ZXJzXHJcblx0XHR1cmwgKz0gXCImcD0je3BsYXllcn1cIlxyXG5cclxuXHRmb3IgciBpbiByYW5nZSByb3VuZHMubGVuZ3RoXHJcblx0XHRzID0gcmVzdWx0c1tyXS5qb2luICcnXHJcblx0XHRzID0gXy50cmltRW5kIHMsICd4J1xyXG5cdFx0aWYgcyAhPSAnJyB0aGVuIHVybCArPSBcIiZyI3tyKzF9PSN7c31cIlxyXG5cclxuXHR1cmwgPSB1cmwucmVwbGFjZUFsbCAnICcsICcrJ1xyXG5cdHVybFxyXG5cclxuZXhwb3J0IG90aGVyID0gKGlucHV0KSAtPiBjb252ZXJ0IGlucHV0LCBcIjAxMkZHXCIsXCIyMTAyMlwiXHJcblxyXG5wYXJzZVRleHRhcmVhID0gLT4gIyBsw6RzIGluIGluaXRpYWxhIHVwcGdpZnRlciBvbSBzcGVsYXJuYVxyXG5cdHJhdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkIFwidGV4dGFyZWFcIlxyXG5cclxuXHRsaW5lcyA9IHJhdy52YWx1ZVxyXG5cdGxpbmVzID0gbGluZXMuc3BsaXQgXCJcXG5cIlxyXG5cclxuXHRyb3VuZHMgPSBudWxsXHJcblxyXG5cdGZvciBsaW5lIGluIGxpbmVzIFxyXG5cdFx0aWYgbGluZS5sZW5ndGggPT0gMCBvciBsaW5lWzBdID09ICcjJyB0aGVuIGNvbnRpbnVlXHJcblx0XHRpZiBsaW5lLmluY2x1ZGVzICc9J1xyXG5cdFx0XHRba2V5LCB2YWxdID0gbGluZS5zcGxpdCAnPSdcclxuXHRcdFx0a2V5ID0ga2V5LnRyaW0oKVxyXG5cdFx0XHR2YWwgPSB2YWwudHJpbSgpXHJcblx0XHRcdGlmIGtleSA9PSAnVElUTEUnIHRoZW4gc2V0dGluZ3MuVElUTEUgPSB2YWxcclxuXHRcdFx0aWYga2V5ID09ICdHQU1FUycgdGhlbiBzZXR0aW5ncy5HQU1FUyA9IHZhbFxyXG5cdFx0XHRpZiBrZXkgPT0gJ1JPVU5EUycgdGhlbiBzZXR0aW5ncy5ST1VORFMgPSB2YWxcclxuXHRcdFx0aWYga2V5ID09ICdTT1JUJyB0aGVuIHNldHRpbmdzLlNPUlQgPSB2YWxcclxuXHRcdFx0aWYga2V5ID09ICdPTkUnIHRoZW4gc2V0dGluZ3MuT05FID0gdmFsXHJcblx0XHRcdGlmIGtleSA9PSAnQkFMQU5DRScgdGhlbiBzZXR0aW5ncy5CQUxBTkNFID0gdmFsXHJcblx0XHRlbHNlXHJcblx0XHRcdHBsYXllcnMucHVzaCBsaW5lXHJcblxyXG5cdGlmIHBsYXllcnMubGVuZ3RoICUgMiA9PSAxXHJcblx0XHRmcmlyb25kID0gcGxheWVycy5sZW5ndGhcclxuXHRcdHBsYXllcnMucHVzaCAnMDAwMCBGUklST05EJ1xyXG5cdGVsc2VcclxuXHRcdGZyaXJvbmQgPSBudWxsXHJcblxyXG5cdGlmIHNldHRpbmdzLlJPVU5EUyA9PSAwIHRoZW4gc2V0dGluZ3MuUk9VTkRTID0gcGxheWVycy5sZW5ndGggLSAxXHJcblxyXG5cdGlmIHJvdW5kcyA9PSBudWxsIHRoZW4gcm91bmRzID0gW11cclxuXHJcblx0dXJsID0gbWFrZVVSTCgpXHJcblx0cGxheWVycyA9IFtdXHJcblx0cm91bmRzID0gW11cclxuXHR3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybFxyXG5cdGVjaG8gJ3dpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsJ1xyXG5cclxucGFyc2VVUkwgPSAtPiBcclxuXHRwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcclxuXHJcblx0c2V0dGluZ3MuVElUTEUgPSBzYWZlR2V0IHBhcmFtcywgXCJUSVRMRVwiXHJcblx0c2V0dGluZ3MuR0FNRVMgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJHQU1FU1wiLCBcIjFcIlxyXG5cdHNldHRpbmdzLlNPUlQgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJTT1JUXCIsIFwiMVwiXHJcblx0c2V0dGluZ3MuT05FID0gcGFyc2VJbnQgc2FmZUdldCBwYXJhbXMsIFwiT05FXCIsIFwiMVwiXHJcblx0c2V0dGluZ3MuQkFMQU5DRSA9IHBhcnNlSW50IHNhZmVHZXQgcGFyYW1zLCBcIkJBTEFOQ0VcIiwgXCIxXCJcclxuXHJcblx0cGxheWVycyA9IFtdXHJcblx0cGVyc29ucyA9IHBhcmFtcy5nZXRBbGwgXCJwXCJcclxuXHJcblx0aWYgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMgJ0ZSSVJPTkQnIHRoZW4gZnJpcm9uZCA9IHBlcnNvbnMubGVuZ3RoIC0gMVxyXG5cdGlmIHNldHRpbmdzLlNPUlQgPT0gMSB0aGVuIHBlcnNvbnMuc29ydCgpLnJldmVyc2UoKVxyXG5cclxuXHRzZXR0aW5ncy5ST1VORFMgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJST1VORFNcIiwgXCIje3BsYXllcnMubGVuZ3RoLTF9XCJcclxuXHJcblx0aSA9IDBcclxuXHRmb3IgcGVyc29uIGluIHBlcnNvbnNcclxuXHRcdGkgKz0gMVxyXG5cdFx0ZWxvID0gcGFyc2VJbnQgcGVyc29uLnNsaWNlIDAsNFxyXG5cdFx0bmFtZSA9IHBlcnNvbi5zbGljZSg0KS50cmltKClcclxuXHRcdHBsYXllcnMucHVzaCBuZXcgUGxheWVyIHBsYXllcnMubGVuZ3RoLCBuYW1lLCBlbG9cclxuXHJcblx0IyBpbml0aWFsaXNlcmEgcm91bmRzIG1lZCAneCcgaSBhbGxhIGNlbGxlclxyXG5cdG4gPSBwbGF5ZXJzLmxlbmd0aCAvLyAyXHJcblx0cm91bmRzID0gW11cclxuXHRmb3IgaSBpbiByYW5nZSBzZXR0aW5ncy5HQU1FUyAqIHNldHRpbmdzLlJPVU5EU1xyXG5cdFx0cm91bmRzLnB1c2ggbmV3IEFycmF5KG4pLmZpbGwgJ3gnXHJcblxyXG5cdHJlYWRSZXN1bHRzIHBhcmFtc1xyXG5cclxuZXhwb3J0IHByZXR0eVJlc3VsdCA9IChjaCkgLT4gIyDDtnZlcnPDpHR0IGludGVybmEgcmVzdWx0YXQgdGlsbCBleHRlcm5hXHJcblx0aWYgY2ggPT0gJ3gnIHRoZW4gcmV0dXJuIFwiLVwiXHJcblx0aWYgY2ggPT0gJzAnIHRoZW4gcmV0dXJuIFwiMCAtIDFcIlxyXG5cdGlmIGNoID09ICcxJyB0aGVuIHJldHVybiBcIsK9IC0gwr1cIlxyXG5cdGlmIGNoID09ICcyJyB0aGVuIHJldHVybiBcIjEgLSAwXCJcclxuXHJcbnJlYWRSZXN1bHRzID0gKHBhcmFtcykgLT4gIyBSZXN1bHRhdGVuIGzDpHNlcyBmcsOlbiB1cmxlblxyXG5cdHJlc3VsdHMgPSBbXVxyXG5cdG4gPSBwbGF5ZXJzLmxlbmd0aFxyXG5cdGlmIGZyaXJvbmQgdGhlbiBuIC09IDJcclxuXHRuIC8vPSAyXHJcblx0XHJcblx0Zm9yIHIgaW4gcmFuZ2Ugc2V0dGluZ3MuR0FNRVMgKiBzZXR0aW5ncy5ST1VORFNcclxuXHRcdHJlc3VsdCA9IHNhZmVHZXQgcGFyYW1zLCBcInIje3IrMX1cIiwgbmV3IEFycmF5KG4pLmZpbGwgXCJ4XCJcclxuXHRcdGFyciA9IFtdXHJcblx0XHRmb3IgY2ggaW4gcmVzdWx0IFxyXG5cdFx0XHRpZiBjaD09JzAnIHRoZW4gYXJyLnB1c2ggJzAnXHJcblx0XHRcdGlmIGNoPT0nMScgdGhlbiBhcnIucHVzaCAnMSdcclxuXHRcdFx0aWYgY2g9PScyJyB0aGVuIGFyci5wdXNoICcyJ1xyXG5cdFx0XHRpZiBjaD09J3gnIHRoZW4gYXJyLnB1c2ggJ3gnXHJcblx0XHRyZXN1bHRzLnB1c2ggYXJyXHJcblxyXG5yb3VuZHNDb250ZW50ID0gKGxvbmcsIGkpIC0+ICMgcm9uZGVybmFzIGRhdGEgKyBwb8OkbmcgKyBQUi4gaSBhbmdlciBzcGVsYXJudW1tZXJcclxuXHJcblx0cm9uZGVyID0gW11cclxuXHRvcHBFbG9zID0gW11cclxuXHJcblx0Zm9yIFt3LGIsY29sb3IscmVzdWx0XSBpbiBsb25nXHJcblx0XHRvcHBvbmVudCA9IHNldHRpbmdzLk9ORSArIGlmIHcgPT0gaSB0aGVuIGIgZWxzZSB3XHJcblx0XHRyZXN1bHQgPSBjb252ZXJ0IHJlc3VsdCwgJ3gyMDFGRycsICcgMTDCvTExJ1xyXG5cclxuXHRcdGF0dHIgPSBpZiBjb2xvciA9PSAndycgdGhlbiBcInJpZ2h0OjBweDtcIiBlbHNlIFwibGVmdDowcHg7XCJcclxuXHRcdGNlbGwgPSB0ZCB7c3R5bGU6IFwicG9zaXRpb246cmVsYXRpdmU7XCJ9LFxyXG5cdFx0XHRkaXYge3N0eWxlOiBcInBvc2l0aW9uOmFic29sdXRlOyB0b3A6MHB4OyAgZm9udC1zaXplOjAuN2VtO1wiICsgYXR0cn0sIG9wcG9uZW50XHJcblx0XHRcdGRpdiB7c3R5bGU6IFwicG9zaXRpb246YWJzb2x1dGU7IHRvcDoxMnB4OyBmb250LXNpemU6MS4xZW07IHRyYW5zZm9ybTogdHJhbnNsYXRlKC0xMCUsIC0xMCUpXCJ9LCByZXN1bHRcclxuXHJcblx0XHRyb25kZXIucHVzaCBjZWxsXHJcblxyXG5cdHJvbmRlci5wdXNoXHR0ZCBBTElHTl9SSUdIVCwgXCJcIlxyXG5cdHJvbmRlci5wdXNoIHRkIHt9LCBcIlwiXHJcblx0cm9uZGVyLmpvaW4gXCJcIlxyXG5cclxuc2FmZUdldCA9IChwYXJhbXMsa2V5LHN0YW5kYXJkPVwiXCIpIC0+ICMgSMOkbXRhIHBhcmFtZXRlcm4gZ2l2ZW4gYXYga2V5IGZyw6VuIHVybGVuXHJcblx0aWYgcGFyYW1zLmdldCBrZXkgdGhlbiByZXR1cm4gcGFyYW1zLmdldChrZXkpLnRyaW0oKVxyXG5cdGlmIHBhcmFtcy5nZXQgJyAnICsga2V5IHRoZW4gcmV0dXJuIHBhcmFtcy5nZXQoJyAnICsga2V5KS50cmltKClcclxuXHRzdGFuZGFyZFxyXG5cclxuc2F2ZVBhaXJpbmcgPSAociwgQSwgaGFsZiwgbikgLT4gIyBza2FwYSBlbiBib3Jkc2xpc3RhIHV0aWZyw6VuIGJlcmdlci5cclxuXHRsc3QgPSBpZiByICUgMiA9PSAxIHRoZW4gW1tBW24gLSAxXSwgQVswXV1dIGVsc2UgW1tBWzBdLCBBW24gLSAxXV1dXHJcblx0Zm9yIGkgaW4gWzEuLi5oYWxmXVxyXG5cdFx0bHN0LnB1c2ggW0FbaV0sIEFbbiAtIDEgLSBpXV1cclxuXHRpZiBmcmlyb25kIHRoZW4gbHN0LnB1c2ggbHN0LnNoaWZ0KClcclxuXHRsc3Quc29ydCgpXHJcblxyXG5zZXRBbGxQUiA9IChkZWx0YSkgLT5cclxuXHRkZWNpbWFscyA9IHNldHRpbmdzLkRFQ0lNQUxTICsgZGVsdGFcclxuXHRpZiAwIDw9IGRlY2ltYWxzIDw9IDYgdGhlbiBzZXR0aW5ncy5ERUNJTUFMUyA9IGRlY2ltYWxzXHJcblxyXG5cdHRycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJyNzdGFsbG5pbmcgdHInXHJcblx0Zm9yIGluZGV4IGluIHJhbmdlIHBsYXllcnMubGVuZ3RoXHJcblx0XHRpZiBwbGF5ZXJzW2luZGV4XS5QUiA+IDBcclxuXHRcdFx0X3RkUFIgPSB0cnNbaW5kZXggKyAxXS5jaGlsZHJlbls0ICsgc2V0dGluZ3MuR0FNRVMgKiBzZXR0aW5ncy5ST1VORFNdXHJcblx0XHRcdF90ZFBSLnRleHRDb250ZW50ID0gcGxheWVyc1tpbmRleF0uUFIudG9GaXhlZCBzZXR0aW5ncy5ERUNJTUFMU1xyXG5cclxuc2V0QnllUmVzdWx0cyA9IC0+XHJcblx0aWYgbm90IGZyaXJvbmQgdGhlbiByZXR1cm5cclxuXHRmb3IgciBpbiByYW5nZSByb3VuZHMubGVuZ3RoXHJcblx0XHRyb3VuZCA9IHJvdW5kc1tyXVxyXG5cdFx0Zm9yIHQgaW4gcmFuZ2Ugcm91bmQubGVuZ3RoXHJcblx0XHRcdFt3LGJdID0gcm91bmRbdF1cclxuXHRcdFx0aWYgdyA9PSBmcmlyb25kIHRoZW4gcmVzdWx0c1tyXVt0XSA9ICcwJ1xyXG5cdFx0XHRpZiBiID09IGZyaXJvbmQgdGhlbiByZXN1bHRzW3JdW3RdID0gJzInXHJcblxyXG5zZXRDdXJzb3IgPSAocm91bmQsIHRhYmxlKSAtPiAjIERlbiBndWxhIGJha2dydW5kZW4gdXBwZGF0ZXJhcyBiZXJvZW5kZSBww6UgcGlsdGFuZ2VudGVybmFcclxuXHR0aHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICcjc3RhbGxuaW5nIHRoJ1xyXG5cdCMgaW5kZXggPSAtMVxyXG5cdGZvciBfdGgsaW5kZXggaW4gdGhzXHJcblx0XHQjIGluZGV4KytcclxuXHRcdGNvbG9yID0gaWYgaW5kZXggPT0gY3VyclJvdW5kICsgMyB0aGVuICd5ZWxsb3cnIGVsc2UgJ3doaXRlJ1xyXG5cdFx0X3RoLnN0eWxlID0gXCJiYWNrZ3JvdW5kLWNvbG9yOiN7Y29sb3J9XCJcclxuXHJcblx0dHJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnI3RhYmxlcyB0cidcclxuXHQjIGluZGV4ID0gLTFcclxuXHRmb3IgX3RyLGluZGV4IGluIHRyc1xyXG5cdFx0IyBpbmRleCsrXHJcblx0XHRjb2xvciA9IGlmIGluZGV4ID09IGN1cnJUYWJsZSArIDAgdGhlbiAneWVsbG93JyBlbHNlICd3aGl0ZSdcclxuXHRcdF90ci5jaGlsZHJlbls1XS5zdHlsZSA9IFwiYmFja2dyb3VuZC1jb2xvcjoje2NvbG9yfVwiXHJcblxyXG5zZXRQID0gKHRycywgaW5kZXgsIHRyYW5zbGF0b3IpIC0+XHJcblx0c2NvcmVzUCA9IDBcclxuXHRzY29yZXNQUiA9IDBcclxuXHRlbG9zID0gW11cclxuXHRmb3IgciBpbiByYW5nZSBzZXR0aW5ncy5HQU1FUyAqIHNldHRpbmdzLlJPVU5EU1xyXG5cdFx0Y2ggPSBsb25nc1tpbmRleF1bcl1bM11cclxuXHRcdHZhbHVlID0gJzAxMicuaW5kZXhPZiBjaFxyXG5cdFx0b3BwID0gbG9uZ3NbaW5kZXhdW3JdWzFdXHJcblx0XHRpZiB2YWx1ZSAhPSAtMVxyXG5cdFx0XHRlbG8gPSBwbGF5ZXJzW29wcF0uZWxvXHJcblx0XHRcdHNjb3Jlc1AgKz0gdmFsdWVcclxuXHRcdFx0aWYgZWxvICE9IDBcclxuXHRcdFx0XHRzY29yZXNQUiArPSB2YWx1ZVxyXG5cdFx0XHRcdGVsb3MucHVzaCBNYXRoLnJvdW5kIGVsb1xyXG5cclxuXHRfdGRQICA9IHRyc1t0cmFuc2xhdG9yW2luZGV4XSArIDFdLmNoaWxkcmVuWzMgKyBzZXR0aW5ncy5HQU1FUyAqIHNldHRpbmdzLlJPVU5EU11cclxuXHRfdGRQLnRleHRDb250ZW50ID0gaWYgZWxvcy5sZW5ndGggPT0gMCB0aGVuICcnIGVsc2UgKHNjb3Jlc1AvMikudG9GaXhlZCAxXHJcblxyXG5cdCMga2Fsa3lsZXJhIHBlcmZvcm1hbmNlIHJhdGluZyBtaGEgdmluc3RhbmRlbCBvY2ggZWxvLXRhbFxyXG5cdGlmIGVsb3MubGVuZ3RoID09IDAgXHJcblx0XHRwbGF5ZXJzW2luZGV4XS5QUiA9IDBcclxuXHRlbHNlXHJcblx0XHRhbmRlbCA9IHNjb3Jlc1BSLzJcclxuXHRcdHBlcmYgPSBwZXJmb3JtYW5jZSBhbmRlbCwgZWxvc1xyXG5cdFx0cGxheWVyc1tpbmRleF0uUFIgPSBwZXJmXHJcblxyXG5zZXRQUiA9ICh0cnMsIGluZGV4LCB0cmFuc2xhdG9yKSAtPlxyXG5cdF90ZFBSID0gdHJzW3RyYW5zbGF0b3JbaW5kZXhdICsgMV0uY2hpbGRyZW5bNCArIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXVxyXG5cdF90ZFBSLnRleHRDb250ZW50ID0gaWYgcGxheWVyc1tpbmRleF0uUFIgPT0gMCB0aGVuICcnIGVsc2UgcGxheWVyc1tpbmRleF0uUFIudG9GaXhlZCBzZXR0aW5ncy5ERUNJTUFMU1xyXG5cclxuc2V0UmVzdWx0ID0gKGtleSwgcmVzKSAtPiAjIFVwcGRhdGVyYSByZXN1bHRzIHNhbXQgZ3VpOnQuXHJcblxyXG5cdHRycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJyNzdGFsbG5pbmcgdHInXHJcblxyXG5cdG9sZCA9IHJlc3VsdHNbY3VyclJvdW5kXVtjdXJyVGFibGVdXHJcblx0W3csYl0gPSByb3VuZHNbY3VyclJvdW5kXVtjdXJyVGFibGVdXHJcblx0aWYgZnJpcm9uZCBhbmQgKHc9PWZyaXJvbmQgb3IgYj09ZnJpcm9uZCkgdGhlbiByZXR1cm5cclxuXHJcblx0Y2VsbCA9IG9sZCArIHJlcyAjIHRyYW5zaXRpb24sIDE2IHBvc3NpYmlsaXRpZXNcclxuXHJcblx0aWYgY2VsbCBpbiAneHggMDAgMTEgMjInLnNwbGl0ICcgJyAjIGx5Y2thZCBrb250cm9sbGlubWF0bmluZywgZ8OlIHRpbGwgbsOkc3RhIGJvcmRcclxuXHRcdGN1cnJUYWJsZSA9IChjdXJyVGFibGUgKyAxKSAlJSB0YWJsZUNvdW50KClcclxuXHRcdHJldHVyblxyXG5cclxuXHRpZiBjZWxsIGluICcwMSAwMiAxMCAxMiAyMCAyMScuc3BsaXQgJyAnIHRoZW4gcmV0dXJuICMgaW5tYXRuaW5nIHN0w6RtbWVyIGVqLCBsw6RtbmFcclxuXHJcblx0IyB1cHBkYXRlcmEgb2NoIGfDpSB0aWxsIG7DpHN0YSBib3JkXHJcblx0cmVzdWx0c1tjdXJyUm91bmRdW2N1cnJUYWJsZV0gPSByZXNcclxuXHJcblx0dXBkYXRlTG9uZ3NBbmRTaG9ydHMoKVxyXG5cclxuXHRvbmUgPSBzZXR0aW5ncy5PTkVcclxuXHJcblx0dHJhbnNsYXRvciA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgMSwgdHJzLmxlbmd0aFxyXG5cdFx0dHJhbnNsYXRvci5wdXNoIE1hdGgucm91bmQodHJzW2ldLmNoaWxkcmVuWzBdLnRleHRDb250ZW50KSAtIDFcclxuXHR0cmFuc2xhdG9yID0gaW52ZXJ0IHRyYW5zbGF0b3JcclxuXHJcblx0X3RkID0gdHJzW3RyYW5zbGF0b3Jbd10gKyBvbmVdLmNoaWxkcmVuWzMgKyBjdXJyUm91bmRdLmNoaWxkcmVuWzFdXHJcblx0X3RkLnRleHRDb250ZW50ID0gXCIwwr0xXCJbcmVzXVxyXG5cclxuXHRfdGQgPSB0cnNbdHJhbnNsYXRvcltiXSArIG9uZV0uY2hpbGRyZW5bMyArIGN1cnJSb3VuZF0uY2hpbGRyZW5bMV1cclxuXHRfdGQudGV4dENvbnRlbnQgPSBcIjHCvTBcIltyZXNdXHJcblxyXG5cdHNldFAgdHJzLCBiLCB0cmFuc2xhdG9yXHJcblx0c2V0UCB0cnMsIHcsIHRyYW5zbGF0b3JcclxuXHJcblx0c2V0UFIgdHJzLCBiLCB0cmFuc2xhdG9yXHJcblx0c2V0UFIgdHJzLCB3LCB0cmFuc2xhdG9yXHJcblxyXG5cdCMgU8OkdHQgdGFibGVzXHJcblx0dHJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnI3RhYmxlcyB0cidcclxuI1x0ZWNobyAoaXRlbS50ZXh0Q29udGVudCBmb3IgaXRlbSBpbiB0cnMpXHJcblx0X3RyID0gdHJzW2N1cnJUYWJsZSsxXVxyXG5cdGVjaG8gX3RyXHJcblx0dHI1ID0gX3RyLmNoaWxkcmVuWzVdXHJcblxyXG5cdHRyNS50ZXh0Q29udGVudCA9IHByZXR0eVJlc3VsdCByZXNcclxuXHRjdXJyVGFibGUgPSAoY3VyclRhYmxlICsgMSkgJSUgdGFibGVDb3VudCgpXHJcblxyXG5cdGhpc3RvcnkucmVwbGFjZVN0YXRlIHt9LCBcIlwiLCBtYWtlVVJMKCkgIyBmw7ZyIGF0dCBzbGlwcGEgb21sYWRkbmluZyBhdiBzaWRhblxyXG5cclxuc2V0U2NyZWVuID0gKGtleSkgLT5cclxuXHJcblx0Y3VyclNjcmVlbiA9IGtleVxyXG5cclxuXHRoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAnaGVhZGVyJ1xyXG5cdGhlYWRlci5pbm5lckhUTUwgPSAnJ1xyXG5cdF9oMiA9IGtvcHBsYSAnaDInLCBoZWFkZXJcclxuXHJcblx0aWYga2V5ID09ICdhJyB0aGVuIF9oMi50ZXh0Q29udGVudCA9IFwiQSBTdMOkbGxuaW5nIGbDtnIgXCIgKyBzZXR0aW5ncy5USVRMRVxyXG5cdGlmIGtleSA9PSAnYicgdGhlbiBfaDIudGV4dENvbnRlbnQgPSBcIkIgQm9yZHNsaXN0YSByb25kICN7Y3VyclJvdW5kICsgc2V0dGluZ3MuT05FfSBmw7ZyICN7c2V0dGluZ3MuVElUTEV9XCJcclxuXHRpZiBrZXkgPT0gJ2MnIHRoZW4gX2gyLnRleHRDb250ZW50ID0gXCJDIE5hbW5saXN0YSByb25kICN7Y3VyclJvdW5kICsgc2V0dGluZ3MuT05FfSBmw7ZyICN7c2V0dGluZ3MuVElUTEV9XCJcclxuXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YWxsbmluZycpLnN0eWxlLmRpc3BsYXkgPSBpZiBrZXk9PSdhJyB0aGVuICdmbGV4JyBlbHNlICdub25lJ1xyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJsZXMnKS5zdHlsZS5kaXNwbGF5ICAgID0gaWYga2V5PT0nYicgdGhlbiAnZmxleCcgZWxzZSAnbm9uZSdcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZXMnKS5zdHlsZS5kaXNwbGF5ICAgICA9IGlmIGtleT09J2MnIHRoZW4gJ2ZsZXgnIGVsc2UgJ25vbmUnXHJcblxyXG5zaG93SW5mbyA9IChtZXNzYWdlKSAtPiAjIFZpc2EgaGVscFRleHQgcMOlIHNrw6RybWVuXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKS5pbm5lckhUTUwgPSBkaXYge30sXHJcblx0XHRkaXYge2NsYXNzOlwiaGVscFwifSwgcHJlIHt9LCBtZXNzYWdlXHJcblxyXG5zaG93TWF0cml4ID0gKGZsb2F0aW5nKSAtPiAjIFZpc2EgbWF0cmlzZW4gQWxsYSBtb3QgYWxsYS4gRG90IGJldHlkZXI6IGluZ2V0IG3DtnRlXHJcblx0biA9IHBsYXllcnMubGVuZ3RoXHJcblx0aWYgbiA+IEFMRkFCRVQubGVuZ3RoIHRoZW4gbiA9IEFMRkFCRVQubGVuZ3RoXHJcblx0ZWNobyAnICAgICcgKyAoQUxGQUJFVFtpXSBmb3IgaSBpbiByYW5nZSBuKS5qb2luICcgICAnXHJcblx0Zm9yIGkgaW4gcmFuZ2UgblxyXG5cdFx0bGluZSA9IGZsb2F0aW5nLm1hdHJpeFtpXS5zbGljZSAwLG5cclxuXHRcdGVjaG8gQUxGQUJFVFtpXSArICcgICAnICsgbGluZS5qb2luKCcgICAnKSArICcgICcgKyBwbGF5ZXJzW2ldLmVsb1xyXG5cclxuc2hvd05hbWVzID0gLT5cclxuXHRwZXJzb25zID0gW11cclxuXHRmb3IgW3csYl0saSBpbiByb3VuZHNbY3VyclJvdW5kXVxyXG5cdFx0cHcgPSBbcGxheWVyc1t3XS5uYW1lLCBcIiN7aSsxfSDigKIgV1wiXVxyXG5cdFx0cGIgPSBbcGxheWVyc1tiXS5uYW1lLCBcIiN7aSsxfSDigKIgQlwiXVxyXG5cdFx0aWYgcHdbMF0gPT0gJ0ZSSVJPTkQnIFxyXG5cdFx0XHRwYlsxXSA9ICdCWUUnXHJcblx0XHRcdHBlcnNvbnMucHVzaCBwYlxyXG5cdFx0ZWxzZSBpZiBwYlswXSA9PSAnRlJJUk9ORCcgXHJcblx0XHRcdHB3WzFdID0gJ0JZRSdcclxuXHRcdFx0cGVyc29ucy5wdXNoIHB3XHJcblx0XHRlbHNlXHJcblx0XHRcdHBlcnNvbnMucHVzaCBwd1xyXG5cdFx0XHRwZXJzb25zLnB1c2ggcGJcclxuXHJcblx0cGVyc29ucy5zb3J0KClcclxuXHRcclxuXHRST1dTX1BFUl9DT0wgPSAzMFxyXG5cclxuXHQjIERlbGEgdXBwIGkga29sdW1uZXIgb20gbWF4IDMwIHNwZWxhcmUgdmFyZGVyYVxyXG5cdGNodW5rSW50b0NvbHVtbnMgPSAoaXRlbXMsIHNpemUpIC0+XHJcblx0XHRjb2xzID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlIDAsIGl0ZW1zLmxlbmd0aCwgc2l6ZVxyXG5cdFx0XHRjb2xzLnB1c2ggaXRlbXMuc2xpY2UgaSwgaSArIHNpemVcclxuXHRcdGNvbHNcclxuXHJcblx0IyBCeWdnIGtvbHVtbmVybmEgKGZ5bGxzIGtvbHVtbnZpczogMzAgKyAzMCArIDMwICsgMTApXHJcblx0Y29sdW1ucyA9IGNodW5rSW50b0NvbHVtbnMgcGVyc29ucywgUk9XU19QRVJfQ09MXHJcblxyXG5cdHJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAnbmFtZXMnXHJcblx0cm9vdC5pbm5lckhUTUwgPSAnJyAjIHJlbnNhXHJcblxyXG5cdGNvbnRhaW5lciA9IGtvcHBsYSAnZGl2Jywgcm9vdFxyXG5cdGNvbnRhaW5lci5jbGFzc05hbWUgPSAnY29sdW1ucydcclxuXHJcblx0Y29sdW1ucy5mb3JFYWNoIChjb2wpID0+XHJcblx0XHRjb2xEaXYgPSBrb3BwbGEgJ2RpdicsIGNvbnRhaW5lciwge2NsYXNzOidjb2x1bW4nfVxyXG5cdFx0dGFiZWxsID0ga29wcGxhICd0YWJsZScsIGNvbERpdlxyXG5cclxuXHRcdGNvbC5mb3JFYWNoIChwKSA9PiBcclxuXHRcdFx0dHIxID0ga29wcGxhICd0cicsdGFiZWxsXHJcblx0XHRcdHRkMSA9IGtvcHBsYSAndGQnLHRyMSwge2NsYXNzOiduYW1lJywgdGV4dENvbnRlbnQ6cFswXX1cclxuXHRcdFx0dGQyID0ga29wcGxhICd0ZCcsdHIxLCB7Y2xhc3M6J3NlYXQnLCB0ZXh0Q29udGVudDpwWzFdfVxyXG4gIFxyXG5zaG93UGxheWVycyA9IChsb25ncykgLT4gIyBWaXNhIHNwZWxhcmxpc3Rhbi4gKGxvbmdzIGxhZ3JhZCBzb20gbGlzdGEgYXYgc3BlbGFyZSlcclxuXHJcblx0cm93cyA9IFtdXHJcblxyXG5cdGZvciBsb25nLCBpIGluIGxvbmdzXHJcblx0XHRwbGF5ZXIgPSBwbGF5ZXJzW2ldXHJcblx0XHRpZiBwbGF5ZXIubmFtZSA9PSAnRlJJUk9ORCcgdGhlbiBjb250aW51ZVxyXG5cdFx0cm93cy5wdXNoIHRyIHt9LFxyXG5cdFx0XHR0ZCB7fSwgaSArIHNldHRpbmdzLk9ORVxyXG5cdFx0XHR0ZCBBTElHTl9MRUZULCBwbGF5ZXIubmFtZVxyXG5cdFx0XHR0ZCB7fSwgcGxheWVyLmVsb1xyXG5cdFx0XHRyb3VuZHNDb250ZW50IGxvbmcsIGlcclxuXHJcblx0cmVzdWx0ID0gZGl2IHt9LFxyXG5cdFx0dGFibGUge30sXHJcblx0XHRcdHRoZWFkIHt9LFxyXG5cdFx0XHRcdHRoIHt9LCBcIiNcIlxyXG5cdFx0XHRcdHRoIHt9LCBcIk5hbW5cIlxyXG5cdFx0XHRcdHRoIHt9LCBcIkVsb1wiXHJcblx0XHRcdFx0KHRoIHt9LCBcIiN7aSArIHNldHRpbmdzLk9ORX1cIiBmb3IgaSBpbiByYW5nZSByb3VuZHMubGVuZ3RoKS5qb2luIFwiXCJcclxuXHRcdFx0XHR0aCB7fSwgXCJQXCJcclxuXHRcdFx0XHR0aCB7fSwgXCJQUlwiXHJcblx0XHRcdHJvd3Muam9pbiBcIlwiXHJcblxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFsbG5pbmcnKS5pbm5lckhUTUwgPSByZXN1bHRcclxuXHJcbnNob3dUYWJsZXMgPSAoc2VsZWN0ZWRSb3VuZCkgLT4gIyBWaXNhIGJvcmRzbGlzdGFuXHJcblxyXG5cdGlmIHJvdW5kcy5sZW5ndGggPT0gMCB0aGVuIHJldHVyblxyXG5cclxuXHRyb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgJ3RhYmxlcydcclxuXHRyb290LmlubmVySFRNTCA9ICcnXHJcblxyXG5cdF9kaXYgPSBrb3BwbGEgJ2RpdicsIHJvb3RcclxuXHRfdGFibGUgPSBrb3BwbGEgJ3RhYmxlJywgX2RpdlxyXG5cdF90aGVhZCA9IGtvcHBsYSAndGhlYWQnLCBfdGFibGVcclxuXHRrb3BwbGEgJ3RoJywgX3RoZWFkLCB7dGV4dENvbnRlbnQ6XCJCb3JkXCJ9XHJcblx0a29wcGxhICd0aCcsIF90aGVhZCwge3RleHRDb250ZW50OlwiVml0XCJ9XHJcblx0a29wcGxhICd0aCcsIF90aGVhZCwge3RleHRDb250ZW50OlwiRWxvXCJ9XHJcblx0a29wcGxhICd0aCcsIF90aGVhZCwge3RleHRDb250ZW50OlwiRWxvXCJ9XHJcblx0a29wcGxhICd0aCcsIF90aGVhZCwge3RleHRDb250ZW50OlwiU3ZhcnRcIn1cclxuXHRrb3BwbGEgJ3RoJywgX3RoZWFkLCB7dGV4dENvbnRlbnQ6XCJSZXN1bHRhdFwifVxyXG5cdFxyXG5cdGZvciBbdyxiXSwgaVRhYmxlIGluIHJvdW5kc1tzZWxlY3RlZFJvdW5kXVxyXG5cdFx0X3RhYmxlLmFwcGVuZENoaWxkIGFkZEJvcmQgaVRhYmxlLCByZXN1bHRzW3NlbGVjdGVkUm91bmRdW2lUYWJsZV0sIHcsIGJcclxuXHJcbnNvcnRDb2x1bW4gPSAoaW5kZXgsc3RpZ2FuZGUpIC0+XHJcblx0dGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yICcjc3RhbGxuaW5nIHRib2R5J1xyXG5cdHJhZGVyID0gQXJyYXkuZnJvbSB0Ym9keS5xdWVyeVNlbGVjdG9yQWxsICd0cidcclxuXHJcblx0cmFkZXIuc29ydCAoYSwgYikgLT5cclxuXHRcdGNlbGxBID0gYS5jaGlsZHJlbltpbmRleF0udGV4dENvbnRlbnQudHJpbSgpXHJcblx0XHRjZWxsQiA9IGIuY2hpbGRyZW5baW5kZXhdLnRleHRDb250ZW50LnRyaW0oKVxyXG5cclxuXHRcdCMgRsO2cnPDtmsgasOkbWbDtnJhIHNvbSB0YWwsIGFubmFycyBzb20gdGV4dFxyXG5cdFx0bnVtQSA9IHBhcnNlRmxvYXQgY2VsbEFcclxuXHRcdG51bUIgPSBwYXJzZUZsb2F0IGNlbGxCXHJcblx0XHRpZiAhaXNOYU4obnVtQSkgYW5kICFpc05hTihudW1CKVxyXG5cdFx0XHRyZXR1cm4gaWYgc3RpZ2FuZGUgdGhlbiBudW1BIC0gbnVtQiBlbHNlIG51bUIgLSBudW1BXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBpZiBzdGlnYW5kZSB0aGVuIGNlbGxBLmxvY2FsZUNvbXBhcmUgY2VsbEIgZWxzZSBjZWxsQi5sb2NhbGVDb21wYXJlIGNlbGxBXHJcblxyXG5cdCMgTMOkZ2cgdGlsbGJha2EgcmFkZXJuYSBpIHNvcnRlcmFkIG9yZG5pbmdcclxuXHRmb3IgcmFkIGluIHJhZGVyXHJcblx0XHR0Ym9keS5hcHBlbmRDaGlsZCByYWRcclxuXHJcbnRhYmxlQ291bnQgPSAtPiBwbGF5ZXJzLmxlbmd0aCAvLyAyICMgQmVyw6RrbmEgYW50YWwgYm9yZFxyXG5cclxudXBkYXRlTG9uZ3NBbmRTaG9ydHMgPSAtPiAjIFVwcGRhdGVyYXIgbG9uZ3Mgb2NoIHNob3J0cyB1dGlmcsOlbiByb3VuZHMgb2NoIHJlc3VsdHNcclxuXHRsb25ncyA9IChsb25nRm9ybSByb3VuZHNbcl0scmVzdWx0c1tyXSBmb3IgciBpbiByYW5nZSByb3VuZHMubGVuZ3RoKVxyXG5cdHNob3J0cyA9IGxvbmdzXHJcblx0bG9uZ3MgPSBfLnppcCAuLi5sb25ncyAjIHRyYW5zcG9uZXJhciBtYXRyaXNlblxyXG5cclxubWFpbiA9IC0+ICMgSMOkbXRhIHVybGVuIGkgZsO2cnN0YSBoYW5kLCB0ZXh0YXJlYW4gaSBhbmRyYSBoYW5kLlxyXG5cclxuXHRwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcclxuXHJcblx0aWYgcGFyYW1zLnNpemUgPT0gMCBcclxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIgXCJjbGlja1wiLCBwYXJzZVRleHRhcmVhXHJcblx0XHRzaG93SW5mbyBoZWxwVGV4dFxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGV4dGFyZWFcIikuc3R5bGUgPSAnZGlzcGxheTogbm9uZSdcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvblwiKS5zdHlsZSA9ICdkaXNwbGF5OiBub25lJ1xyXG5cclxuXHRwYXJzZVVSTCgpXHJcblxyXG5cdGlmIHBsYXllcnMubGVuZ3RoIDwgNFxyXG5cdFx0c2hvd0luZm8gXCJEdSBtw6VzdGUgYW5nZSBtaW5zdCBmeXJhIHNwZWxhcmUhXCJcclxuXHRcdHJldHVyblxyXG5cclxuXHRiZXJnZXIgPSBzZXR0aW5ncy5ST1VORFMgPT0gcGxheWVycy5sZW5ndGggLSAxXHJcblx0ZmxvYXRpbmcgPSBzZXR0aW5ncy5ST1VORFMgPD0gcGxheWVycy5sZW5ndGggLy8gMlxyXG5cclxuXHRpZiBub3QgYmVyZ2VyIF4gZmxvYXRpbmcgI3NldHRpbmdzLlJPVU5EUyA+PSBwbGF5ZXJzLmxlbmd0aCAvLyAyIGFuZCBzZXR0aW5ncy5ST1VORFMgIT0gcGxheWVycy5sZW5ndGggLSAxXHJcblx0XHRzaG93SW5mbyBcIkFudGFsZXQgcm9uZGVyIGR1IGFuZ2l2aXQgw6RyIGVqIGFjY2VwdGFiZWx0IVwiXHJcblx0XHRyZXR1cm5cclxuXHJcblx0cm91bmRzID0gaWYgYmVyZ2VyIHRoZW4gbWFrZUJlcmdlcigpIGVsc2UgbWFrZUZsb2F0aW5nKClcclxuXHRyb3VuZHMgPSBleHBhbmQgc2V0dGluZ3MuR0FNRVMsIHJvdW5kc1xyXG5cclxuXHRmb3IgaSBpbiByYW5nZSBzZXR0aW5ncy5ST1VORFNcclxuXHRcdHJlc3VsdHMucHVzaCBBcnJheSh0YWJsZUNvdW50KCkpLmZpbGwgJ3gnXHJcblxyXG5cdHJlYWRSZXN1bHRzIHBhcmFtc1xyXG5cclxuXHRzZXRCeWVSZXN1bHRzKClcclxuXHJcblx0dXBkYXRlTG9uZ3NBbmRTaG9ydHMoKVxyXG5cdHNob3dQbGF5ZXJzIGxvbmdzXHJcblx0c2hvd1RhYmxlcyAwXHJcblx0c2hvd05hbWVzKClcclxuXHJcblx0c2V0U2NyZWVuICdiJ1xyXG5cclxuXHRjcmVhdGVTb3J0RXZlbnRzKClcclxuXHRzZXRDdXJzb3IgY3VyclJvdW5kLGN1cnJUYWJsZVxyXG5cclxuXHRkb2N1bWVudC50aXRsZSA9IHNldHRpbmdzLlRJVExFXHJcblxyXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgJ2tleWRvd24nLCAoZXZlbnQpIC0+ICMgSGFudGVyYXIgYWxsYSB0YW5nZW50dHJ5Y2tuaW5nYXJcclxuXHRcdGtleSA9IGV2ZW50LmtleVxyXG5cdFx0ZWNobyAna2V5ZG93bicsa2V5LGN1cnJUYWJsZVxyXG5cdFx0aWYga2V5IGluIFsnYScsJ2InLCdjJ10gdGhlbiBzZXRTY3JlZW4ga2V5XHJcblx0XHRcclxuXHRcdGlmIGtleSA9PSAnQXJyb3dMZWZ0JyAgdGhlbiBjaGFuZ2VSb3VuZCAtMVxyXG5cdFx0aWYga2V5ID09ICdBcnJvd1JpZ2h0JyB0aGVuIGNoYW5nZVJvdW5kICsxXHJcblx0XHRpZiBrZXkgPT0gJ0Fycm93VXAnICAgIHRoZW4gY2hhbmdlVGFibGUgLTFcclxuXHRcdGlmIGtleSA9PSAnQXJyb3dEb3duJyAgdGhlbiBjaGFuZ2VUYWJsZSArMVxyXG5cclxuXHRcdGRlbCA9ICdEZWxldGUnXHJcblx0XHRpZiBrZXkgPT0gZGVsIHRoZW4gc2V0UmVzdWx0IGtleSwgJ3gnICMgXCIgIC0gIFwiXHJcblx0XHRpZiBrZXkgPT0gJzAnIHRoZW4gc2V0UmVzdWx0IGtleSwgJzAnICMgXCIwIC0gMVwiXHJcblx0XHRpZiBrZXkgPT0gJyAnIHRoZW4gc2V0UmVzdWx0IGtleSwgJzEnICMgXCLCvSAtIMK9XCJcclxuXHRcdGlmIGtleSA9PSAnMScgdGhlbiBzZXRSZXN1bHQga2V5LCAnMicgIyBcIjEgLSAwXCJcclxuXHJcblx0XHRpZiBrZXkgPT0gJ20nIHRoZW4gc2V0QWxsUFIgKzFcclxuXHRcdGlmIGtleSA9PSAnbCcgdGhlbiBzZXRBbGxQUiAtMVxyXG5cclxuXHRcdGlmIGtleSA9PSAnZCdcclxuXHRcdFx0ZWNobyAnRHVtcDonXHJcblx0XHRcdGVjaG8gJyAgc2V0dGluZ3MnLHNldHRpbmdzXHJcblx0XHRcdCMgZWNobyAnICBocmVmJyx3aW5kb3cubG9jYXRpb24uaHJlZlxyXG5cdFx0XHRlY2hvICcgIHBsYXllcnMnLHBsYXllcnNcclxuXHRcdFx0ZWNobyAnICByb3VuZHMnLHJvdW5kc1xyXG5cdFx0XHRlY2hvICcgIHJlc3VsdHMnLCByZXN1bHRzXHJcblx0XHRcdGVjaG8gJyAgbG9uZ3MnLGxvbmdzXHJcblx0XHRcdGVjaG8gJyAgc2hvcnRzJyxzaG9ydHNcclxuXHJcblx0XHRneHIgPSBzZXR0aW5ncy5HQU1FUyAqIHNldHRpbmdzLlJPVU5EU1xyXG5cclxuXHRcdGlmIGtleSA9PSAnIycgdGhlbiBzb3J0Q29sdW1uIDAsICAgIHRydWVcclxuXHRcdGlmIGtleSA9PSAnbicgdGhlbiBzb3J0Q29sdW1uIDEsICAgIHRydWVcclxuXHRcdGlmIGtleSA9PSAnZScgdGhlbiBzb3J0Q29sdW1uIDIsICAgIGZhbHNlXHJcblx0XHRpZiBrZXkgPT0gJ3AnIHRoZW4gc29ydENvbHVtbiAzK2d4cixmYWxzZVxyXG5cdFx0aWYga2V5ID09ICdyJyB0aGVuIHNvcnRDb2x1bW4gNCtneHIsZmFsc2VcclxuXHJcblx0XHRzZXRDdXJzb3IgY3VyclJvdW5kLGN1cnJUYWJsZVxyXG5cclxubWFpbigpXHJcbiJdfQ==
//# sourceURL=c:\github\FloatingBerger\tournament.coffee