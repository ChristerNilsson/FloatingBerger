// Generated by CoffeeScript 2.7.0
  // ½ • ↑ ↓ ← →
var ALFABET, ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT, KEYS, NAMES_PER_COL, TABLES_PER_COL, addBord, berger, changeRound, changeTable, chunkIntoColumns, convert, convertLong, createSortEvents, currRound, currScreen, currTable, echo, frirond, invert, koppla, longs, main, makeBerger, makeFloating, makeURL, parseTextarea, parseURL, players, range, readResults, results, rounds, roundsContent, safeGet, savePairing, setAllPR, setByeResults, setCursor, setP, setPR, setPR_all, setP_all, setResult, setScreen, settings, showInfo, showMatrix, showNames, showPlayers, showTables, sortColumn, start, tableCount, updateLongs,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf,
  hasProp = {}.hasOwnProperty;

import {
  Player
} from './player.js';

import {
  Floating
} from './floating.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

echo = console.log;

range = _.range;

ALIGN_LEFT = {
  style: "text-align:left"
};

ALIGN_CENTER = {
  style: "text-align:center"
};

ALIGN_RIGHT = {
  style: "text-align:right"
};

ALFABET = '1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'; // 100

NAMES_PER_COL = 30;

TABLES_PER_COL = 30;

KEYS = {};

KEYS.a = "  b c  ← →  # n e p r  m l";

KEYS.b = "a   c  ← →  ↑ ↓  0 Space 1  Del";

KEYS.c = "a b    ← →";

//# V A R I A B L E R ##
settings = {
  TITLE: 'Titel saknas',
  GAMES: 1,
  ROUNDS: 0,
  SORT: 1,
  ONE: 1,
  BALANCE: 1,
  DECIMALS: 0 // ONE = 1 # 0=dev 1=prod
};


// Tillståndet ges av dessa variabler:
players = [];

results = []; // ronder x bord. cell: 'x', '0', '1' eller '2'

rounds = []; // ronder x bord. cell: [w,b] 

longs = []; // players x ronder. cell: [w,b,col,res]

currScreen = 'a';

currRound = 0;

currTable = 0;

frirond = null; // ingen frirond. Annars index för frironden

berger = null;

//# F U N K T I O N E R ##
addBord = function(bord, res, c0, c1) {
  var color, svart, svart_elo, tr1, vit, vit_elo;
  echo('addBord', bord, res, c0, c1);
  vit = players[c0].name;
  svart = players[c1].name;
  vit_elo = players[c0].elo;
  svart_elo = players[c1].elo;
  tr1 = document.createElement('tr');
  color = bord === currTable ? 'yellow' : 'white';
  koppla('td', tr1, {
    text: bord + settings.ONE
  });
  koppla('td', tr1, {
    style: "text-align:left",
    text: vit
  });
  koppla('td', tr1, {
    style: "text-align:left",
    text: vit_elo
  });
  koppla('td', tr1, {
    style: "text-align:left",
    text: svart_elo
  });
  koppla('td', tr1, {
    style: "text-align:left",
    text: svart
  });
  koppla('td', tr1, {
    style: `text-align:center; background-color:${color}`,
    text: prettyResult(res)
  });
  return tr1;
};

changeRound = function(delta) { // byt rond och uppdatera bordslistan
  currRound = modulo(currRound + delta, rounds.length);
  currTable = 0;
  setScreen(currScreen);
  showTables();
  return showNames();
};

changeTable = function(delta) { // byt bord
  return currTable = modulo(currTable + delta, tableCount());
};

chunkIntoColumns = function(items, size) { // Dela upp en lista i flera med samma storlek, t ex 30 + 30 + 18
  var cols, i, j, len, ref;
  cols = [];
  ref = range(0, items.length, size);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    cols.push(items.slice(i, i + size));
  }
  return cols;
};

convert = function(input, a, b) { // byt alla tecken i input som finns i a mot tecken med samma index i b
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

convertLong = function(input, a, b) { // byt alla tecken i input som finns i a mot sträng med samma index i b. b är separerad med |
  var i;
  i = a.indexOf(input);
  b = b.split('|');
  if (indexOf.call(a, input) >= 0) {
    return b[i];
  } else {
    return input;
  }
};

createSortEvents = function() { // Spelarlistan sorteras beroende på vilken kolumn man klickar på. # Namn Elo P eller PR
  var index, j, len, results1, th, ths;
  ths = document.querySelectorAll('#stallning th');
  index = -1;
  results1 = [];
  for (j = 0, len = ths.length; j < len; j++) {
    th = ths[j];
    index++;
    results1.push((function(th, index) {
      return th.addEventListener('click', function(event) {
        var key;
        key = th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - settings.ONE;
          showTables(); // key
          return;
        }
        return sortColumn(index, indexOf.call("# Namn".split(' '), key) >= 0);
      });
    })(th, index));
  }
  return results1;
};

export var expand = function(games, rounds) { // make a double round from a single round
  var b, j, len, result, round, w;
  result = [];
//echo 'rounds',rounds
  for (j = 0, len = rounds.length; j < len; j++) {
    round = rounds[j];
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([w, b]);
      }
      return results1;
    })());
    if (games === 2) {
      result.push((function() {
        var k, len1, results1;
        results1 = [];
        for (k = 0, len1 = round.length; k < len1; k++) {
          [w, b] = round[k];
          results1.push([b, w]);
        }
        return results1;
      })());
    }
  }
  return result;
};

export var findNumberOfDecimals = function(lst) { // leta upp minsta antal decimaler som krävs för unikhet i listan
  var best, i, ibest, item, j, len, ref, unik;
  best = 0;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    unik = _.uniq((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = lst.length; k < len1; k++) {
        item = lst[k];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

invert = function(lst) {
  var i, item, j, len, result;
  result = _.clone(lst);
  for (i = j = 0, len = lst.length; j < len; i = ++j) {
    item = lst[i];
    result[item] = i;
  }
  return result;
};

koppla = function(typ, parent, attrs = {}) {
  var elem, key;
  elem = document.createElement(typ);
  if ('text' in attrs) {
    elem.textContent = attrs.text;
    delete attrs.text;
  }
  if ('html' in attrs) {
    elem.innerHTML = attrs.html;
    delete attrs.html;
  }
  for (key in attrs) {
    if (!hasProp.call(attrs, key)) continue;
    elem.setAttribute(key, attrs[key]);
  }
  parent.appendChild(elem);
  return elem;
};

export var longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, j, len, ref, res, result, w;
  result = [];
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  result.sort(function(a, b) {
    return a[0] - b[0];
  });
  return result;
};

makeBerger = function() { // lotta en hel berger-turnering.
  var A, half, i, j, len, n, ref;
  
  n = players.length;
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

makeFloating = function() { // lotta en hel floating-turnering
  var floating;
  floating = new Floating(players, settings);
  showMatrix(floating);
  //echo 'summa',floating.summa
  echo(players);
  return floating.rounds;
};

makeURL = function() {
  var j, k, len, len1, player, r, ref, s, url;
  url = "./";
  url += `?TITLE=${settings.TITLE}`;
  url += `&GAMES=${settings.GAMES}`;
  url += `&ROUNDS=${settings.ROUNDS}`;
  url += `&SORT=${settings.SORT}`;
  url += `&ONE=${settings.ONE}`;
  url += `&BALANCE=${settings.BALANCE}`;
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    r = ref[k];
    s = results[r].join('');
    s = _.trimEnd(s, 'x');
    if (s !== '') {
      url += `&r${r + 1}=${s}`;
    }
  }
  url = url.replaceAll(' ', '+');
  return url;
};

export var other = function(input) {
  return convert(input, "012x", "210x");
};

parseTextarea = function() { // läs in initiala uppgifter om spelarna
  var j, key, len, line, lines, raw, url, val;
  raw = document.getElementById("textarea");
  lines = raw.value;
  lines = lines.split("\n");
  rounds = null;
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line.length === 0 || line[0] === '#') {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        settings.TITLE = val;
      }
      if (key === 'GAMES') {
        settings.GAMES = val;
      }
      if (key === 'ROUNDS') {
        settings.ROUNDS = val;
      }
      if (key === 'SORT') {
        settings.SORT = val;
      }
      if (key === 'ONE') {
        settings.ONE = val;
      }
      if (key === 'BALANCE') {
        settings.BALANCE = val;
      }
    } else {
      players.push(line);
    }
  }
  if (players.length % 2 === 1) {
    frirond = players.length;
    players.push('0000 BYE');
  } else {
    frirond = null;
  }
  if (settings.ROUNDS === 0) {
    settings.ROUNDS = players.length - 1;
  }
  if (rounds === null) {
    rounds = [];
  }
  url = makeURL();
  players = [];
  rounds = [];
  window.location.href = url;
  return echo('window.location.href = url');
};

parseURL = function() {
  var elo, i, j, k, len, len1, n, name, params, person, persons, ref;
  params = new URLSearchParams(window.location.search);
  settings.TITLE = safeGet(params, "TITLE");
  settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  settings.ONE = parseInt(safeGet(params, "ONE", "1"));
  settings.BALANCE = parseInt(safeGet(params, "BALANCE", "1"));
  players = [];
  persons = params.getAll("p");
  if (window.location.href.includes('BYE')) {
    frirond = persons.length - 1;
  }
  if (settings.SORT === 1) {
    persons.sort().reverse();
  }
  settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  i = 0;
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    i += 1;
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    players.push(new Player(players.length, name, elo));
  }
  // initialisera rounds med 'x' i alla celler
  n = Math.floor(players.length / 2);
  rounds = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    rounds.push(new Array(n).fill('x'));
  }
  return readResults(params);
};

export var prettyResult = function(ch) { // översätt interna resultat till externa
  if (ch === 'x') {
    return "-";
  }
  if (ch === '0') {
    return "0 - 1";
  }
  if (ch === '1') {
    return "½ - ½";
  }
  if (ch === '2') {
    return "1 - 0";
  }
};

readResults = function(params) { // Resultaten läses från urlen
  var arr, ch, j, k, len, len1, n, r, ref, result, results1;
  results = [];
  n = players.length;
  if (frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(settings.GAMES * settings.ROUNDS);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    result = safeGet(params, `r${r + 1}`, new Array(n).fill("x"));
    arr = [];
    for (k = 0, len1 = result.length; k < len1; k++) {
      ch = result[k];
      if (ch === '0') {
        arr.push('0');
      }
      if (ch === '1') {
        arr.push('1');
      }
      if (ch === '2') {
        arr.push('2');
      }
      if (ch === 'x') {
        arr.push('x');
      }
    }
    results1.push(results.push(arr));
  }
  return results1;
};

roundsContent = function(long, i, tr) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, j, len, opponent, result, w;
  for (j = 0, len = long.length; j < len; j++) {
    [w, b, color, result] = long[j];
    opponent = settings.ONE + (w === i ? b : w);
    result = convert(result, 'x201FG', ' 10½11');
    attr = color === 'w' ? "right:0px;" : "left:0px;";
    cell = koppla('td', tr, {
      style: "position:relative;"
    });
    koppla('div', cell, {
      style: "position:absolute; top:0px; font-size:0.7em;" + attr,
      text: opponent
    });
    // koppla 'div', cell, {style: "position:absolute; top:7px; font-size:1.1em; transform: translate(-10%, -10%)", text: result}
    koppla('div', cell, {
      style: "position:relative; font-size:1.1em; top:6px",
      text: result
    });
  }
  // text-align:center; position:relative; top:3px;
  koppla('td', tr, {
    style: "text-align:right" // P
  });
  return koppla('td', tr, {
    style: "text-align:right" // PR
  });
};

safeGet = function(params, key, standard = "") { // Hämta parametern given av key från urlen
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

savePairing = function(r, A, half, n) { // skapa en bordslista utifrån berger.
  var i, j, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = j = 1, ref = half; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (frirond) {
    lst.push(lst.shift());
  }
  return lst.sort();
};

setAllPR = function(delta) {
  var decimals, i, index, j, k, len, len1, ref, ref1, results1, tdPR, translator, trs;
  //echo 'setAllPR'
  trs = document.querySelectorAll('#stallning tr');
  translator = [];
  ref = range(trs.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    translator.push(Math.round(trs[i].children[0].textContent) - 1);
  }
  translator = invert(translator);
  decimals = settings.DECIMALS + delta;
  if ((0 <= decimals && decimals <= 6)) {
    settings.DECIMALS = decimals;
  }
  trs = document.querySelectorAll('#stallning tr');
  ref1 = range(players.length);
  results1 = [];
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    index = ref1[k];
    if (players[index].PR > 0) {
      tdPR = trs[translator[index]].children[4 + settings.GAMES * settings.ROUNDS];
      results1.push(tdPR.textContent = players[translator[index]].PR.toFixed(settings.DECIMALS));
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

setByeResults = function() {
  var b, j, len, r, ref, results1, round, t, w;
  if (!frirond) {
    return;
  }
  ref = range(rounds.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    round = rounds[r];
    results1.push((function() {
      var k, len1, ref1, results2;
      ref1 = range(round.length);
      results2 = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        t = ref1[k];
        [w, b] = round[t];
        if (berger) {
          if (w === frirond) {
            results[r][t] = '2';
          }
          if (b === frirond) {
            results2.push(results[r][t] = '0');
          } else {
            results2.push(void 0);
          }
        } else {
          if (w === frirond) {
            results[r][t] = '0';
          }
          if (b === frirond) {
            results2.push(results[r][t] = '2');
          } else {
            results2.push(void 0);
          }
        }
      }
      return results2;
    })());
  }
  return results1;
};

setCursor = function(round, table) { // Den gula bakgrunden uppdateras beroende på piltangenterna
  var color, index, j, k, len, len1, results1, th, ths, tr, trs;
  ths = document.querySelectorAll('#stallning th');
  for (index = j = 0, len = ths.length; j < len; index = ++j) {
    th = ths[index];
    color = index === currRound + 3 ? 'yellow' : 'white';
    th.style = `background-color:${color}`;
  }
  trs = document.querySelectorAll('#tables tr');
  results1 = [];
  for (index = k = 0, len1 = trs.length; k < len1; index = ++k) {
    tr = trs[index];
    color = index === currTable + 0 ? 'yellow' : 'white';
    results1.push(tr.children[5].style = `background-color:${color}`);
  }
  return results1;
};

setP = function(trs, index, translator) {
  var andel, ch, elo, elos, j, len, opp, perf, r, ref, scoresP, scoresPR, tdP, value;
  scoresP = 0;
  scoresPR = 0;
  elos = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    ch = longs[index][r][3];
    value = '012'.indexOf(ch);
    opp = longs[index][r][1];
    if (value !== -1) {
      elo = players[opp].elo;
      scoresP += value;
      if (elo !== 0) {
        scoresPR += value;
        elos.push(Math.round(elo));
      }
    }
  }
  tdP = trs[translator[index]].children[3 + settings.GAMES * settings.ROUNDS];
  tdP.textContent = elos.length === 0 ? '' : (scoresP / 2).toFixed(1);
  // kalkylera performance rating mha vinstandel och elo-tal
  if (elos.length === 0) {
    return players[index].PR = 0;
  } else {
    andel = scoresPR / 2;
    perf = performance(andel, elos);
    return players[index].PR = perf;
  }
};

setP_all = function(trs, translator) {
  var i, j, len, ref, results1;
  ref = range(translator.length);
  //echo 'setP_all',longs.length,translator.length
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results1.push(setP(trs, i, translator));
  }
  return results1;
};

setPR = function(trs, index, translator) {
  var tdPR;
  tdPR = trs[translator[index]].children[4 + settings.GAMES * settings.ROUNDS];
  return tdPR.textContent = players[index].PR === 0 ? '' : players[index].PR.toFixed(settings.DECIMALS);
};

setPR_all = function(trs, translator) {
  var i, j, len, ref, results1;
  ref = range(translator.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results1.push(setPR(trs, i, translator));
  }
  return results1;
};

setResult = function(key, res) { // Uppdatera results samt gui:t.
  var b, cell, i, j, len, old, one, ref, td, tr, tr5, translator, trs, w;
  old = results[currRound][currTable];
  [w, b] = rounds[currRound][currTable];
  if (frirond && (w === frirond || b === frirond)) {
    return;
  }
  cell = old + res; // transition, 16 possibilities
  if (indexOf.call('xx 00 11 22'.split(' '), cell) >= 0) { // lyckad kontrollinmatning, gå till nästa bord
    currTable = modulo(currTable + 1, tableCount());
    return;
  }
  //echo 'currTable',currTable
  if (indexOf.call('01 02 10 12 20 21'.split(' '), cell) >= 0) {
    echo('exit'); // inmatning stämmer ej, lämna
    return;
  }
  
  // uppdatera och gå till nästa bord
  results[currRound][currTable] = res;
  updateLongs();
  one = settings.ONE;
  trs = document.querySelectorAll('#stallning tr');
  translator = [];
  ref = range(trs.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    translator.push(Math.round(trs[i].children[0].textContent) - 1);
  }
  translator = invert(translator);
  td = trs[translator[w]].children[3 + currRound].children[1];
  td.textContent = "0½1"[res];
  td = trs[translator[b]].children[3 + currRound].children[1];
  td.textContent = "1½0"[res];
  setP(trs, b, translator);
  setP(trs, w, translator);
  setPR(trs, b, translator);
  setPR(trs, w, translator);
  // Sätt tables
  trs = document.querySelectorAll('#tables tr');
  tr = trs[currTable];
  tr5 = tr.children[5];
  tr5.textContent = prettyResult(res);
  currTable = modulo(currTable + 1, tableCount());
  return history.replaceState({}, "", makeURL()); // för att slippa omladdning av sidan
};

setScreen = function(key) {
  var h2, header;
  currScreen = key;
  header = document.getElementById('header');
  header.innerHTML = '';
  h2 = koppla('h2', header);
  koppla('pre', header, {
    text: KEYS[key]
  });
  if (key === 'a') {
    h2.textContent = "A Ställning för " + settings.TITLE;
  }
  if (key === 'b') {
    h2.textContent = `B Bordslista rond ${currRound + settings.ONE} för ${settings.TITLE}`;
  }
  if (key === 'c') {
    h2.textContent = `C Namnlista rond ${currRound + settings.ONE} för ${settings.TITLE}`;
  }
  document.getElementById('stallning').style.display = key === 'a' ? 'flex' : 'none';
  document.getElementById('tables').style.display = key === 'b' ? 'flex' : 'none';
  return document.getElementById('names').style.display = key === 'c' ? 'flex' : 'none';
};

showInfo = function(message) { // Visa helpText på skärmen
  var div1, div2, pre1, root;
  root = document.getElementById('info');
  root.innerHTML = "";
  div1 = koppla('div', root);
  div2 = koppla('div', div1, {
    class: "help"
  });
  pre1 = koppla('pre', div2);
  return pre1.innerHTML = message;
};

showMatrix = function(floating) { // Visa matrisen Alla mot alla. Dot betyder: inget möte
  var SPACING, i, j, len, line, n, ref, results1;
  SPACING = ' ';
  n = players.length;
  if (n > ALFABET.length) {
    n = ALFABET.length;
  }
  echo('    ' + ((function() {
    var j, len, ref, results1;
    ref = range(n);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results1.push(ALFABET[i]);
    }
    return results1;
  })()).join(SPACING));
  ref = range(n);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line = floating.matrix[i].slice(0, n);
    results1.push(echo(ALFABET[i] + '   ' + line.join(SPACING) + '   ' + players[i].elo)); // + ' ' + Math.round players[i].summa
  }
  return results1;
};

showNames = function() {
  var b, columns, container, i, j, len, pb, persons, pw, ref, root, w;
  persons = [];
  ref = rounds[currRound];
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    [w, b] = ref[i];
    pw = [players[w].name, `${i + settings.ONE} • W`];
    pb = [players[b].name, `${i + settings.ONE} • B`];
    if (pw[0] === 'BYE') {
      pb[1] = 'BYE';
      persons.push(pb);
    } else if (pb[0] === 'BYE') {
      pw[1] = 'BYE';
      persons.push(pw);
    } else {
      persons.push(pw);
      persons.push(pb);
    }
  }
  persons.sort();
  
  // Bygg kolumnerna (fylls kolumnvis: 30 + 30 + 30 + 10)
  columns = chunkIntoColumns(persons, NAMES_PER_COL);
  root = document.getElementById('names');
  root.innerHTML = ''; // rensa
  container = koppla('div', root);
  container.className = 'columns';
  return columns.forEach((col) => {
    var colDiv, tabell, thead;
    colDiv = koppla('div', container, {
      class: 'column'
    });
    tabell = koppla('table', colDiv);
    thead = koppla('thead', tabell);
    koppla('th', thead, {
      text: "Namn"
    });
    koppla('th', thead, {
      text: "Plats"
    });
    return col.forEach((p) => {
      var td1, td2, tr1;
      tr1 = koppla('tr', tabell);
      td1 = koppla('td', tr1, {
        class: 'name',
        text: p[0]
      });
      return td2 = koppla('td', tr1, {
        class: 'seat',
        text: p[1]
      });
    });
  });
};

showPlayers = function(longs) { // Visa spelarlistan. (longs lagrad som lista av spelare)
  var columns, container, offset, root;
  columns = chunkIntoColumns(longs, NAMES_PER_COL);
  root = document.getElementById('stallning');
  root.innerHTML = '';
  container = koppla('div', root);
  container.className = 'columns';
  offset = 0;
  return columns.forEach((col) => {
    var colDiv, i, j, len, ref, tabell, thead;
    colDiv = koppla('div', container, {
      class: 'column'
    });
    tabell = koppla('table', colDiv);
    thead = koppla('thead', tabell);
    koppla('th', thead, {
      text: "#"
    });
    koppla('th', thead, {
      text: "Namn"
    });
    koppla('th', thead, {
      text: "Elo"
    });
    ref = range(rounds.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      koppla('th', thead, {
        text: `${i + settings.ONE}`
      });
    }
    koppla('th', thead, {
      text: "P"
    });
    koppla('th', thead, {
      text: "PR"
    });
    col.forEach((long, i) => {
      var player, tr;
      player = players[offset + i];
      if (player.name === 'BYE') {
        return;
      }
      tr = koppla('tr', tabell);
      koppla('td', tr, {
        text: `${offset + i + settings.ONE}`
      });
      koppla('td', tr, {
        style: "text-align:left",
        text: player.name
      });
      koppla('td', tr, {
        style: "text-align:left",
        text: player.elo
      });
      return roundsContent(long, offset + i, tr);
    });
    return offset += 30;
  });
};

showTables = function() { // Visa bordslistan
  var columns, container, offset, root, round;
  if (rounds.length === 0) {
    return;
  }
  round = rounds[currRound];
  columns = chunkIntoColumns(round, TABLES_PER_COL);
  echo('columns', columns);
  root = document.getElementById('tables');
  root.innerHTML = '';
  echo('players', players);
  container = koppla('div', root);
  container.className = 'columns';
  offset = 0;
  return columns.forEach((col) => {
    var colDiv, tabell, thead;
    colDiv = koppla('div', container, {
      class: 'column'
    });
    tabell = koppla('table', colDiv);
    thead = koppla('thead', tabell);
    koppla('th', thead, {
      text: "Bord"
    });
    koppla('th', thead, {
      text: "Vit"
    });
    koppla('th', thead, {
      text: "Elo"
    });
    koppla('th', thead, {
      text: "Elo"
    });
    koppla('th', thead, {
      text: "Svart"
    });
    koppla('th', thead, {
      text: "Resultat"
    });
    echo('col', col);
    col.forEach(([w, b], iTable) => {
      echo('w,b', [w, b], iTable);
      return tabell.appendChild(addBord(offset + iTable, results[currRound][offset + iTable], w, b));
    });
    return offset += TABLES_PER_COL;
  });
};

sortColumn = function(index, stigande) {
  var j, len, rad, rader, results1, table;
  table = document.querySelector('#stallning table');
  rader = Array.from(table.querySelectorAll('tr'));
  rader.sort(function(a, b) {
    var cellA, cellB, numA, numB;
    cellA = a.children[index].textContent.trim();
    cellB = b.children[index].textContent.trim();
    // Försök jämföra som tal, annars som text
    numA = parseFloat(cellA);
    numB = parseFloat(cellB);
    if (!isNaN(numA) && !isNaN(numB)) {
      if (stigande) {
        return numA - numB;
      } else {
        return numB - numA;
      }
    } else {
      if (stigande) {
        return cellA.localeCompare(cellB);
      } else {
        return cellB.localeCompare(cellA);
      }
    }
  });
// Lägg tillbaka raderna i sorterad ordning
  results1 = [];
  for (j = 0, len = rader.length; j < len; j++) {
    rad = rader[j];
    results1.push(table.appendChild(rad));
  }
  return results1;
};

tableCount = function() {
  return Math.floor(players.length / 2); // Beräkna antal bord
};

updateLongs = function() { // Uppdaterar longs utifrån rounds och results
  var r;
  longs = (function() {
    var j, len, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      results1.push(longForm(rounds[r], results[r]));
    }
    return results1;
  })();
  return longs = _.zip(...longs); // transponerar matrisen
};

main = function() { // Hämta urlen i första hand, textarean i andra hand.
  var floating, i, j, k, len, len1, params, ref, ref1, translator, trs;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo(helpText);
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseURL();
  if (players.length < 4) {
    showInfo("Du måste ange minst fyra spelare!");
    return;
  }
  berger = settings.ROUNDS === players.length - 1;
  floating = settings.ROUNDS <= Math.floor(players.length / 2);
  if (!berger ^ floating) { //settings.ROUNDS >= players.length // 2 and settings.ROUNDS != players.length - 1
    showInfo("Antalet ronder du angivit är ej acceptabelt!");
    return;
  }
  rounds = berger ? makeBerger() : makeFloating();
  rounds = expand(settings.GAMES, rounds);
  ref = range(settings.ROUNDS);
  // arr = []
  // for p in players
  // 	arr.push "[#{(o+1 for o in p.opp)}]"
  // echo arr.join "\n"	
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(Array(tableCount()).fill('x'));
  }
  readResults(params);
  setByeResults();
  updateLongs();
  showPlayers(longs);
  showTables();
  showNames();
  trs = document.querySelectorAll('#stallning tr');
  translator = [];
  ref1 = range(trs.length);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    translator.push(Math.round(trs[i].children[0].textContent) - 1);
  }
  translator = invert(translator);
  setP_all(trs, translator);
  setPR_all(trs, translator);
  setScreen('a');
  createSortEvents();
  setCursor(currRound, currTable);
  document.title = settings.TITLE;
  return document.addEventListener('keydown', function(event) { // Hanterar alla tangenttryckningar
    var del, gxr, key, rad, start;
    start = new Date();
    key = event.key;
    if (key === 'a' || key === 'b' || key === 'c') {
      setScreen(key);
    }
    if (key === 'ArrowLeft') {
      changeRound(-1);
    }
    if (key === 'ArrowRight') {
      changeRound(+1);
    }
    if (key === 'ArrowUp') {
      changeTable(-1);
    }
    if (key === 'ArrowDown') {
      changeTable(+1);
    }
    del = 'Delete';
    if (key === del) {
      setResult(key, 'x'); // "  -  "
    }
    if (key === '0') {
      setResult(key, '0'); // "0 - 1"
    }
    if (key === ' ') {
      setResult(key, '1'); // "½ - ½"
    }
    if (key === '1') {
      setResult(key, '2'); // "1 - 0"
    }
    if (key === 'm') {
      setAllPR(+1);
    }
    if (key === 'l') {
      setAllPR(-1);
    }
    if (key === 'd') {
      echo('Dump:');
      echo('currRound', currRound);
      echo('currTable', currTable);
      echo('  settings', settings);
      echo('  players', players);
      echo('  rounds', rounds);
      echo('  results', results);
      echo('  longs', longs);
    }
    gxr = settings.GAMES * settings.ROUNDS;
    if (key === '#') {
      sortColumn(0, true);
    }
    if (key === 'n') {
      sortColumn(1, true);
    }
    if (key === 'e') {
      sortColumn(2, false);
    }
    if (key === 'p') {
      sortColumn(3 + gxr, false);
    }
    if (key === 'r') {
      sortColumn(4 + gxr, false);
    }
    setCursor(currRound, currTable);
    //echo 'cpu', key, new Date() - start

    // tvinga bordet att synas
    rad = document.querySelectorAll("#tables table tr")[currTable];
    return rad.scrollIntoView({
      behavior: "smooth",
      block: "center"
    });
  });
};

start = new Date();

main();

//echo 'cpu',new Date() - start

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91cm5hbWVudC5qcyIsInNvdXJjZVJvb3QiOiJcXCIsInNvdXJjZXMiOlsidG91cm5hbWVudC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFhO0FBQUEsSUFBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLEVBQUEsSUFBQSxFQUFBLGFBQUEsRUFBQSxjQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxXQUFBLEVBQUEsV0FBQSxFQUFBLGdCQUFBLEVBQUEsT0FBQSxFQUFBLFdBQUEsRUFBQSxnQkFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLFVBQUEsRUFBQSxZQUFBLEVBQUEsT0FBQSxFQUFBLGFBQUEsRUFBQSxRQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxXQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxhQUFBLEVBQUEsT0FBQSxFQUFBLFdBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsV0FBQSxFQUFBLFVBQUEsRUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsRUFBQSxXQUFBO0VBQUE7Ozs7QUFFYixPQUFBO0VBQVEsTUFBUjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLFFBQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxRQUFSO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsV0FBUjtDQUFBLE1BQUE7O0FBRUEsSUFBQSxHQUFPLE9BQU8sQ0FBQzs7QUFDZixLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUVWLFVBQUEsR0FBZTtFQUFDLEtBQUEsRUFBTztBQUFSOztBQUNmLFlBQUEsR0FBZTtFQUFDLEtBQUEsRUFBTztBQUFSOztBQUNmLFdBQUEsR0FBZTtFQUFDLEtBQUEsRUFBTztBQUFSOztBQUVmLE9BQUEsR0FBVSx1R0FkRzs7QUFlYixhQUFBLEdBQWdCOztBQUNoQixjQUFBLEdBQWlCOztBQUVqQixJQUFBLEdBQU8sQ0FBQTs7QUFDUCxJQUFJLENBQUMsQ0FBTCxHQUFTOztBQUNULElBQUksQ0FBQyxDQUFMLEdBQVM7O0FBQ1QsSUFBSSxDQUFDLENBQUwsR0FBUyxhQXJCSTs7O0FBeUJiLFFBQUEsR0FBVztFQUFDLEtBQUEsRUFBTSxjQUFQO0VBQXVCLEtBQUEsRUFBTSxDQUE3QjtFQUFnQyxNQUFBLEVBQU8sQ0FBdkM7RUFBMEMsSUFBQSxFQUFLLENBQS9DO0VBQWtELEdBQUEsRUFBSSxDQUF0RDtFQUF5RCxPQUFBLEVBQVEsQ0FBakU7RUFBb0UsUUFBQSxFQUFTLENBQTdFO0FBQUEsRUF6QkU7Ozs7QUE0QmIsT0FBQSxHQUFVOztBQUVWLE9BQUEsR0FBVSxHQTlCRzs7QUErQmIsTUFBQSxHQUFVLEdBL0JHOztBQWdDYixLQUFBLEdBQVUsR0FoQ0c7O0FBa0NiLFVBQUEsR0FBYTs7QUFDYixTQUFBLEdBQVk7O0FBQ1osU0FBQSxHQUFZOztBQUVaLE9BQUEsR0FBVSxLQXRDRzs7QUF3Q2IsTUFBQSxHQUFTLEtBeENJOzs7QUE0Q2IsT0FBQSxHQUFVLFFBQUEsQ0FBQyxJQUFELEVBQU0sR0FBTixFQUFVLEVBQVYsRUFBYSxFQUFiLENBQUE7QUFDVixNQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsU0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxJQUFBLENBQUssU0FBTCxFQUFlLElBQWYsRUFBb0IsR0FBcEIsRUFBd0IsRUFBeEIsRUFBMkIsRUFBM0I7RUFDQSxHQUFBLEdBQU0sT0FBTyxDQUFDLEVBQUQsQ0FBSSxDQUFDO0VBQ2xCLEtBQUEsR0FBUSxPQUFPLENBQUMsRUFBRCxDQUFJLENBQUM7RUFDcEIsT0FBQSxHQUFVLE9BQU8sQ0FBQyxFQUFELENBQUksQ0FBQztFQUN0QixTQUFBLEdBQVksT0FBTyxDQUFDLEVBQUQsQ0FBSSxDQUFDO0VBQ3hCLEdBQUEsR0FBTSxRQUFRLENBQUMsYUFBVCxDQUF1QixJQUF2QjtFQUNOLEtBQUEsR0FBVyxJQUFBLEtBQVEsU0FBWCxHQUEwQixRQUExQixHQUF3QztFQUVoRCxNQUFBLENBQU8sSUFBUCxFQUFhLEdBQWIsRUFBa0I7SUFBQyxJQUFBLEVBQU8sSUFBQSxHQUFPLFFBQVEsQ0FBQztFQUF4QixDQUFsQjtFQUNBLE1BQUEsQ0FBTyxJQUFQLEVBQWEsR0FBYixFQUFrQjtJQUFDLEtBQUEsRUFBTSxpQkFBUDtJQUEwQixJQUFBLEVBQU87RUFBakMsQ0FBbEI7RUFDQSxNQUFBLENBQU8sSUFBUCxFQUFhLEdBQWIsRUFBa0I7SUFBQyxLQUFBLEVBQU0saUJBQVA7SUFBMEIsSUFBQSxFQUFPO0VBQWpDLENBQWxCO0VBQ0EsTUFBQSxDQUFPLElBQVAsRUFBYSxHQUFiLEVBQWtCO0lBQUMsS0FBQSxFQUFNLGlCQUFQO0lBQTBCLElBQUEsRUFBTztFQUFqQyxDQUFsQjtFQUNBLE1BQUEsQ0FBTyxJQUFQLEVBQWEsR0FBYixFQUFrQjtJQUFDLEtBQUEsRUFBTSxpQkFBUDtJQUEwQixJQUFBLEVBQU87RUFBakMsQ0FBbEI7RUFDQSxNQUFBLENBQU8sSUFBUCxFQUFhLEdBQWIsRUFBa0I7SUFBQyxLQUFBLEVBQU0sQ0FBQSxvQ0FBQSxDQUFBLENBQXVDLEtBQXZDLENBQUEsQ0FBUDtJQUF1RCxJQUFBLEVBQU8sWUFBQSxDQUFhLEdBQWI7RUFBOUQsQ0FBbEI7U0FDQTtBQWZTOztBQWlCVixXQUFBLEdBQWMsUUFBQSxDQUFDLEtBQUQsQ0FBQSxFQUFBO0VBQ2IsU0FBQSxVQUFhLFNBQUEsR0FBWSxPQUFVLE1BQU0sQ0FBQztFQUMxQyxTQUFBLEdBQVk7RUFFWixTQUFBLENBQVUsVUFBVjtFQUNBLFVBQUEsQ0FBQTtTQUNBLFNBQUEsQ0FBQTtBQU5hOztBQVFkLFdBQUEsR0FBYyxRQUFBLENBQUMsS0FBRCxDQUFBLEVBQUE7U0FDYixTQUFBLFVBQWEsU0FBQSxHQUFZLE9BQVUsVUFBQSxDQUFBO0FBRHRCOztBQUdkLGdCQUFBLEdBQW1CLFFBQUEsQ0FBQyxLQUFELEVBQVEsSUFBUixDQUFBLEVBQUE7QUFDbkIsTUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxJQUFBLEdBQU87QUFDUDtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsSUFBSSxDQUFDLElBQUwsQ0FBVSxLQUFLLENBQUMsS0FBTixDQUFZLENBQVosRUFBZSxDQUFBLEdBQUksSUFBbkIsQ0FBVjtFQUREO1NBRUE7QUFKa0I7O0FBTW5CLE9BQUEsR0FBVSxRQUFBLENBQUMsS0FBRCxFQUFPLENBQVAsRUFBUyxDQUFULENBQUEsRUFBQTtFQUNULGlCQUFZLEdBQVQsV0FBSDtXQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxLQUFWLENBQUQsRUFBcEI7R0FBQSxNQUFBO1dBQTJDLE1BQTNDOztBQURTOztBQUdWLFdBQUEsR0FBYyxRQUFBLENBQUMsS0FBRCxFQUFPLENBQVAsRUFBUyxDQUFULENBQUEsRUFBQTtBQUNkLE1BQUE7RUFBQyxDQUFBLEdBQUksQ0FBQyxDQUFDLE9BQUYsQ0FBVSxLQUFWO0VBQ0osQ0FBQSxHQUFJLENBQUMsQ0FBQyxLQUFGLENBQVEsR0FBUjtFQUNKLGlCQUFZLEdBQVQsV0FBSDtXQUFtQixDQUFDLENBQUMsQ0FBRCxFQUFwQjtHQUFBLE1BQUE7V0FBNkIsTUFBN0I7O0FBSGE7O0FBS2QsZ0JBQUEsR0FBbUIsUUFBQSxDQUFBLENBQUEsRUFBQTtBQUVuQixNQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLFFBQUEsRUFBQSxFQUFBLEVBQUE7RUFBQyxHQUFBLEdBQU0sUUFBUSxDQUFDLGdCQUFULENBQTBCLGVBQTFCO0VBRU4sS0FBQSxHQUFRLENBQUM7QUFDVDtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsS0FBQTtrQkFDRyxDQUFBLFFBQUEsQ0FBQyxFQUFELEVBQUksS0FBSixDQUFBO2FBQ0YsRUFBRSxDQUFDLGdCQUFILENBQW9CLE9BQXBCLEVBQTZCLFFBQUEsQ0FBQyxLQUFELENBQUE7QUFDaEMsWUFBQTtRQUFJLEdBQUEsR0FBTSxFQUFFLENBQUM7UUFDVCxJQUFHLENBQUMsS0FBQSxDQUFNLFFBQUEsQ0FBUyxHQUFULENBQU4sQ0FBSjtVQUNDLEdBQUEsR0FBTSxRQUFBLENBQVMsR0FBVCxDQUFBLEdBQWdCLFFBQVEsQ0FBQztVQUMvQixVQUFBLENBQUEsRUFETDtBQUVLLGlCQUhEOztlQUlBLFVBQUEsQ0FBVyxLQUFYLGVBQXlCLFFBQVEsQ0FBQyxLQUFULENBQWUsR0FBZixHQUFQLFNBQWxCO01BTjRCLENBQTdCO0lBREUsQ0FBQSxFQUFDLElBQUc7RUFGUixDQUFBOztBQUxrQjs7QUFnQm5CLE9BQUEsSUFBTyxNQUFBLEdBQVMsUUFBQSxDQUFDLEtBQUQsRUFBUSxNQUFSLENBQUEsRUFBQTtBQUNoQixNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUE7RUFBQyxNQUFBLEdBQVMsR0FBVjs7RUFFQyxLQUFBLHdDQUFBOztJQUNDLE1BQU0sQ0FBQyxJQUFQOztBQUFhO01BQUEsS0FBQSx5Q0FBQTtRQUFVLENBQUMsQ0FBRCxFQUFHLENBQUg7c0JBQVYsQ0FBQyxDQUFELEVBQUcsQ0FBSDtNQUFBLENBQUE7O1FBQWI7SUFDQSxJQUFHLEtBQUEsS0FBUyxDQUFaO01BQW1CLE1BQU0sQ0FBQyxJQUFQOztBQUFhO1FBQUEsS0FBQSx5Q0FBQTtVQUFVLENBQUMsQ0FBRCxFQUFHLENBQUg7d0JBQVYsQ0FBQyxDQUFELEVBQUcsQ0FBSDtRQUFBLENBQUE7O1VBQWIsRUFBbkI7O0VBRkQ7QUFHQSxTQUFPO0FBTlE7O0FBUWhCLE9BQUEsSUFBTyxvQkFBQSxHQUF1QixRQUFBLENBQUMsR0FBRCxDQUFBLEVBQUE7QUFDOUIsTUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxJQUFBLEdBQU87QUFDUDtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsSUFBQSxHQUFPLENBQUMsQ0FBQyxJQUFGOztBQUFRO01BQUEsS0FBQSx1Q0FBQTs7c0JBQUEsSUFBSSxDQUFDLE9BQUwsQ0FBYSxDQUFiO01BQUEsQ0FBQTs7UUFBUjtJQUNQLElBQUcsSUFBSSxDQUFDLE1BQUwsR0FBYyxJQUFqQjtNQUEyQixDQUFDLElBQUQsRUFBTSxLQUFOLENBQUEsR0FBZSxDQUFDLElBQUksQ0FBQyxNQUFOLEVBQWEsQ0FBYixFQUExQzs7RUFGRDtTQUdBO0FBTDZCOztBQU85QixNQUFBLEdBQVMsUUFBQSxDQUFDLEdBQUQsQ0FBQTtBQUNULE1BQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBO0VBQUMsTUFBQSxHQUFTLENBQUMsQ0FBQyxLQUFGLENBQVEsR0FBUjtFQUNULEtBQUEsNkNBQUE7O0lBQ0MsTUFBTSxDQUFDLElBQUQsQ0FBTixHQUFlO0VBRGhCO1NBRUE7QUFKUTs7QUFNVCxNQUFBLEdBQVMsUUFBQSxDQUFDLEdBQUQsRUFBTSxNQUFOLEVBQWMsUUFBUSxDQUFBLENBQXRCLENBQUE7QUFDVCxNQUFBLElBQUEsRUFBQTtFQUFFLElBQUEsR0FBTyxRQUFRLENBQUMsYUFBVCxDQUF1QixHQUF2QjtFQUVQLElBQUcsTUFBQSxJQUFVLEtBQWI7SUFDRSxJQUFJLENBQUMsV0FBTCxHQUFtQixLQUFLLENBQUM7SUFDekIsT0FBTyxLQUFLLENBQUMsS0FGZjs7RUFJQSxJQUFHLE1BQUEsSUFBVSxLQUFiO0lBQ0UsSUFBSSxDQUFDLFNBQUwsR0FBaUIsS0FBSyxDQUFDO0lBQ3ZCLE9BQU8sS0FBSyxDQUFDLEtBRmY7O0VBSUEsS0FBQSxZQUFBOztJQUNFLElBQUksQ0FBQyxZQUFMLENBQWtCLEdBQWxCLEVBQXVCLEtBQUssQ0FBQyxHQUFELENBQTVCO0VBREY7RUFHQSxNQUFNLENBQUMsV0FBUCxDQUFtQixJQUFuQjtTQUNBO0FBZk87O0FBaUJULE9BQUEsSUFBTyxRQUFBLEdBQVcsUUFBQSxDQUFDLE1BQUQsRUFBUyxPQUFULENBQUEsRUFBQTtBQUNsQixNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQTtFQUFDLE1BQUEsR0FBUztBQUNUO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxDQUFDLENBQUQsRUFBRyxDQUFILENBQUEsR0FBUSxNQUFNLENBQUMsQ0FBRDtJQUNkLEdBQUEsR0FBTSxPQUFPLENBQUMsQ0FBRDtJQUNiLE1BQU0sQ0FBQyxJQUFQLENBQVksQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLEdBQUwsRUFBUyxHQUFULENBQVo7SUFDQSxNQUFNLENBQUMsSUFBUCxDQUFZLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxHQUFMLEVBQVMsS0FBQSxDQUFNLEdBQU4sQ0FBVCxDQUFaO0VBSkQ7RUFNQSxNQUFNLENBQUMsSUFBUCxDQUFZLFFBQUEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBO1dBQVMsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPLENBQUMsQ0FBQyxDQUFEO0VBQWpCLENBQVo7U0FDQTtBQVRpQjs7QUFXbEIsVUFBQSxHQUFhLFFBQUEsQ0FBQSxDQUFBLEVBQUE7QUFFYixNQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBOztFQUFDLENBQUEsR0FBSSxPQUFPLENBQUM7RUFDWixJQUFBLGNBQU8sSUFBSztFQUNaLENBQUEsR0FBSTs7Ozs7RUFDSixNQUFBLEdBQVM7QUFDVDtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsTUFBTSxDQUFDLElBQVAsQ0FBWSxXQUFBLENBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsSUFBbEIsRUFBd0IsQ0FBeEIsQ0FBWjtJQUNBLENBQUMsQ0FBQyxHQUFGLENBQUE7SUFDQSxDQUFBLEdBQUksQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFSLENBQWEsQ0FBQyxNQUFkLENBQXFCLENBQUMsQ0FBQyxLQUFGLENBQVEsQ0FBUixFQUFVLElBQVYsQ0FBckI7SUFDSixDQUFDLENBQUMsSUFBRixDQUFPLENBQUEsR0FBRSxDQUFUO0VBSkQ7U0FLQTtBQVhZOztBQWFiLFlBQUEsR0FBZSxRQUFBLENBQUEsQ0FBQSxFQUFBO0FBQ2YsTUFBQTtFQUFDLFFBQUEsR0FBVyxJQUFJLFFBQUosQ0FBYSxPQUFiLEVBQXNCLFFBQXRCO0VBQ1gsVUFBQSxDQUFXLFFBQVgsRUFERDs7RUFHQyxJQUFBLENBQUssT0FBTDtTQUNBLFFBQVEsQ0FBQztBQUxLOztBQU9mLE9BQUEsR0FBVSxRQUFBLENBQUEsQ0FBQTtBQUNWLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQTtFQUFDLEdBQUEsR0FBTTtFQUVOLEdBQUEsSUFBTyxDQUFBLE9BQUEsQ0FBQSxDQUFVLFFBQVEsQ0FBQyxLQUFuQixDQUFBO0VBQ1AsR0FBQSxJQUFPLENBQUEsT0FBQSxDQUFBLENBQVUsUUFBUSxDQUFDLEtBQW5CLENBQUE7RUFDUCxHQUFBLElBQU8sQ0FBQSxRQUFBLENBQUEsQ0FBVyxRQUFRLENBQUMsTUFBcEIsQ0FBQTtFQUNQLEdBQUEsSUFBTyxDQUFBLE1BQUEsQ0FBQSxDQUFTLFFBQVEsQ0FBQyxJQUFsQixDQUFBO0VBQ1AsR0FBQSxJQUFPLENBQUEsS0FBQSxDQUFBLENBQVEsUUFBUSxDQUFDLEdBQWpCLENBQUE7RUFDUCxHQUFBLElBQU8sQ0FBQSxTQUFBLENBQUEsQ0FBWSxRQUFRLENBQUMsT0FBckIsQ0FBQTtFQUVQLEtBQUEseUNBQUE7O0lBQ0MsR0FBQSxJQUFPLENBQUEsR0FBQSxDQUFBLENBQU0sTUFBTixDQUFBO0VBRFI7QUFHQTtFQUFBLEtBQUEsdUNBQUE7O0lBQ0MsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxDQUFELENBQUcsQ0FBQyxJQUFYLENBQWdCLEVBQWhCO0lBQ0osQ0FBQSxHQUFJLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBVixFQUFhLEdBQWI7SUFDSixJQUFHLENBQUEsS0FBSyxFQUFSO01BQWdCLEdBQUEsSUFBTyxDQUFBLEVBQUEsQ0FBQSxDQUFLLENBQUEsR0FBRSxDQUFQLENBQUEsQ0FBQSxDQUFBLENBQVksQ0FBWixDQUFBLEVBQXZCOztFQUhEO0VBS0EsR0FBQSxHQUFNLEdBQUcsQ0FBQyxVQUFKLENBQWUsR0FBZixFQUFvQixHQUFwQjtTQUNOO0FBbkJTOztBQXFCVixPQUFBLElBQU8sS0FBQSxHQUFRLFFBQUEsQ0FBQyxLQUFELENBQUE7U0FBVyxPQUFBLENBQVEsS0FBUixFQUFlLE1BQWYsRUFBc0IsTUFBdEI7QUFBWDs7QUFFZixhQUFBLEdBQWdCLFFBQUEsQ0FBQSxDQUFBLEVBQUE7QUFDaEIsTUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxHQUFBLEdBQU0sUUFBUSxDQUFDLGNBQVQsQ0FBd0IsVUFBeEI7RUFFTixLQUFBLEdBQVEsR0FBRyxDQUFDO0VBQ1osS0FBQSxHQUFRLEtBQUssQ0FBQyxLQUFOLENBQVksSUFBWjtFQUVSLE1BQUEsR0FBUztFQUVULEtBQUEsdUNBQUE7O0lBQ0MsSUFBRyxJQUFJLENBQUMsTUFBTCxLQUFlLENBQWYsSUFBb0IsSUFBSSxDQUFDLENBQUQsQ0FBSixLQUFXLEdBQWxDO0FBQTJDLGVBQTNDOztJQUNBLElBQUcsSUFBSSxDQUFDLFFBQUwsQ0FBYyxHQUFkLENBQUg7TUFDQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUEsR0FBYSxJQUFJLENBQUMsS0FBTCxDQUFXLEdBQVg7TUFDYixHQUFBLEdBQU0sR0FBRyxDQUFDLElBQUosQ0FBQTtNQUNOLEdBQUEsR0FBTSxHQUFHLENBQUMsSUFBSixDQUFBO01BQ04sSUFBRyxHQUFBLEtBQU8sT0FBVjtRQUF1QixRQUFRLENBQUMsS0FBVCxHQUFpQixJQUF4Qzs7TUFDQSxJQUFHLEdBQUEsS0FBTyxPQUFWO1FBQXVCLFFBQVEsQ0FBQyxLQUFULEdBQWlCLElBQXhDOztNQUNBLElBQUcsR0FBQSxLQUFPLFFBQVY7UUFBd0IsUUFBUSxDQUFDLE1BQVQsR0FBa0IsSUFBMUM7O01BQ0EsSUFBRyxHQUFBLEtBQU8sTUFBVjtRQUFzQixRQUFRLENBQUMsSUFBVCxHQUFnQixJQUF0Qzs7TUFDQSxJQUFHLEdBQUEsS0FBTyxLQUFWO1FBQXFCLFFBQVEsQ0FBQyxHQUFULEdBQWUsSUFBcEM7O01BQ0EsSUFBRyxHQUFBLEtBQU8sU0FBVjtRQUF5QixRQUFRLENBQUMsT0FBVCxHQUFtQixJQUE1QztPQVREO0tBQUEsTUFBQTtNQVdDLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBYixFQVhEOztFQUZEO0VBZUEsSUFBRyxPQUFPLENBQUMsTUFBUixHQUFpQixDQUFqQixLQUFzQixDQUF6QjtJQUNDLE9BQUEsR0FBVSxPQUFPLENBQUM7SUFDbEIsT0FBTyxDQUFDLElBQVIsQ0FBYSxVQUFiLEVBRkQ7R0FBQSxNQUFBO0lBSUMsT0FBQSxHQUFVLEtBSlg7O0VBTUEsSUFBRyxRQUFRLENBQUMsTUFBVCxLQUFtQixDQUF0QjtJQUE2QixRQUFRLENBQUMsTUFBVCxHQUFrQixPQUFPLENBQUMsTUFBUixHQUFpQixFQUFoRTs7RUFFQSxJQUFHLE1BQUEsS0FBVSxJQUFiO0lBQXVCLE1BQUEsR0FBUyxHQUFoQzs7RUFFQSxHQUFBLEdBQU0sT0FBQSxDQUFBO0VBQ04sT0FBQSxHQUFVO0VBQ1YsTUFBQSxHQUFTO0VBQ1QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFoQixHQUF1QjtTQUN2QixJQUFBLENBQUssNEJBQUw7QUFyQ2U7O0FBdUNoQixRQUFBLEdBQVcsUUFBQSxDQUFBLENBQUE7QUFDWCxNQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUE7RUFBQyxNQUFBLEdBQVMsSUFBSSxlQUFKLENBQW9CLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBcEM7RUFFVCxRQUFRLENBQUMsS0FBVCxHQUFpQixPQUFBLENBQVEsTUFBUixFQUFnQixPQUFoQjtFQUNqQixRQUFRLENBQUMsS0FBVCxHQUFpQixRQUFBLENBQVMsT0FBQSxDQUFRLE1BQVIsRUFBZ0IsT0FBaEIsRUFBeUIsR0FBekIsQ0FBVDtFQUNqQixRQUFRLENBQUMsSUFBVCxHQUFnQixRQUFBLENBQVMsT0FBQSxDQUFRLE1BQVIsRUFBZ0IsTUFBaEIsRUFBd0IsR0FBeEIsQ0FBVDtFQUNoQixRQUFRLENBQUMsR0FBVCxHQUFlLFFBQUEsQ0FBUyxPQUFBLENBQVEsTUFBUixFQUFnQixLQUFoQixFQUF1QixHQUF2QixDQUFUO0VBQ2YsUUFBUSxDQUFDLE9BQVQsR0FBbUIsUUFBQSxDQUFTLE9BQUEsQ0FBUSxNQUFSLEVBQWdCLFNBQWhCLEVBQTJCLEdBQTNCLENBQVQ7RUFFbkIsT0FBQSxHQUFVO0VBQ1YsT0FBQSxHQUFVLE1BQU0sQ0FBQyxNQUFQLENBQWMsR0FBZDtFQUVWLElBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBckIsQ0FBOEIsS0FBOUIsQ0FBSDtJQUE0QyxPQUFBLEdBQVUsT0FBTyxDQUFDLE1BQVIsR0FBaUIsRUFBdkU7O0VBQ0EsSUFBRyxRQUFRLENBQUMsSUFBVCxLQUFpQixDQUFwQjtJQUEyQixPQUFPLENBQUMsSUFBUixDQUFBLENBQWMsQ0FBQyxPQUFmLENBQUEsRUFBM0I7O0VBRUEsUUFBUSxDQUFDLE1BQVQsR0FBa0IsUUFBQSxDQUFTLE9BQUEsQ0FBUSxNQUFSLEVBQWdCLFFBQWhCLEVBQTBCLENBQUEsQ0FBQSxDQUFHLE9BQU8sQ0FBQyxNQUFSLEdBQWUsQ0FBbEIsQ0FBQSxDQUExQixDQUFUO0VBRWxCLENBQUEsR0FBSTtFQUNKLEtBQUEseUNBQUE7O0lBQ0MsQ0FBQSxJQUFLO0lBQ0wsR0FBQSxHQUFNLFFBQUEsQ0FBUyxNQUFNLENBQUMsS0FBUCxDQUFhLENBQWIsRUFBZSxDQUFmLENBQVQ7SUFDTixJQUFBLEdBQU8sTUFBTSxDQUFDLEtBQVAsQ0FBYSxDQUFiLENBQWUsQ0FBQyxJQUFoQixDQUFBO0lBQ1AsT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFJLE1BQUosQ0FBVyxPQUFPLENBQUMsTUFBbkIsRUFBMkIsSUFBM0IsRUFBaUMsR0FBakMsQ0FBYjtFQUpELENBakJEOztFQXdCQyxDQUFBLGNBQUksT0FBTyxDQUFDLFNBQVU7RUFDdEIsTUFBQSxHQUFTO0FBQ1Q7RUFBQSxLQUFBLHVDQUFBOztJQUNDLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBSSxLQUFKLENBQVUsQ0FBVixDQUFZLENBQUMsSUFBYixDQUFrQixHQUFsQixDQUFaO0VBREQ7U0FHQSxXQUFBLENBQVksTUFBWjtBQTlCVTs7QUFnQ1gsT0FBQSxJQUFPLFlBQUEsR0FBZSxRQUFBLENBQUMsRUFBRCxDQUFBLEVBQUE7RUFDckIsSUFBRyxFQUFBLEtBQU0sR0FBVDtBQUFrQixXQUFPLElBQXpCOztFQUNBLElBQUcsRUFBQSxLQUFNLEdBQVQ7QUFBa0IsV0FBTyxRQUF6Qjs7RUFDQSxJQUFHLEVBQUEsS0FBTSxHQUFUO0FBQWtCLFdBQU8sUUFBekI7O0VBQ0EsSUFBRyxFQUFBLEtBQU0sR0FBVDtBQUFrQixXQUFPLFFBQXpCOztBQUpxQjs7QUFNdEIsV0FBQSxHQUFjLFFBQUEsQ0FBQyxNQUFELENBQUEsRUFBQTtBQUNkLE1BQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBO0VBQUMsT0FBQSxHQUFVO0VBQ1YsQ0FBQSxHQUFJLE9BQU8sQ0FBQztFQUNaLElBQUcsT0FBSDtJQUFnQixDQUFBLElBQUssRUFBckI7O0VBQ0EsZUFBQSxJQUFNO0FBRU47QUFBQTtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsTUFBQSxHQUFTLE9BQUEsQ0FBUSxNQUFSLEVBQWdCLENBQUEsQ0FBQSxDQUFBLENBQUksQ0FBQSxHQUFFLENBQU4sQ0FBQSxDQUFoQixFQUEyQixJQUFJLEtBQUosQ0FBVSxDQUFWLENBQVksQ0FBQyxJQUFiLENBQWtCLEdBQWxCLENBQTNCO0lBQ1QsR0FBQSxHQUFNO0lBQ04sS0FBQSwwQ0FBQTs7TUFDQyxJQUFHLEVBQUEsS0FBSSxHQUFQO1FBQWdCLEdBQUcsQ0FBQyxJQUFKLENBQVMsR0FBVCxFQUFoQjs7TUFDQSxJQUFHLEVBQUEsS0FBSSxHQUFQO1FBQWdCLEdBQUcsQ0FBQyxJQUFKLENBQVMsR0FBVCxFQUFoQjs7TUFDQSxJQUFHLEVBQUEsS0FBSSxHQUFQO1FBQWdCLEdBQUcsQ0FBQyxJQUFKLENBQVMsR0FBVCxFQUFoQjs7TUFDQSxJQUFHLEVBQUEsS0FBSSxHQUFQO1FBQWdCLEdBQUcsQ0FBQyxJQUFKLENBQVMsR0FBVCxFQUFoQjs7SUFKRDtrQkFLQSxPQUFPLENBQUMsSUFBUixDQUFhLEdBQWI7RUFSRCxDQUFBOztBQU5hOztBQWdCZCxhQUFBLEdBQWdCLFFBQUEsQ0FBQyxJQUFELEVBQU8sQ0FBUCxFQUFVLEVBQVYsQ0FBQSxFQUFBO0FBQ2hCLE1BQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQTtFQUFDLEtBQUEsc0NBQUE7SUFBSSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssS0FBTCxFQUFXLE1BQVg7SUFDSCxRQUFBLEdBQVcsUUFBUSxDQUFDLEdBQVQsR0FBZSxDQUFHLENBQUEsS0FBSyxDQUFSLEdBQWUsQ0FBZixHQUFzQixDQUF0QjtJQUMxQixNQUFBLEdBQVMsT0FBQSxDQUFRLE1BQVIsRUFBZ0IsUUFBaEIsRUFBMEIsUUFBMUI7SUFDVCxJQUFBLEdBQVUsS0FBQSxLQUFTLEdBQVosR0FBcUIsWUFBckIsR0FBdUM7SUFDOUMsSUFBQSxHQUFPLE1BQUEsQ0FBTyxJQUFQLEVBQWEsRUFBYixFQUFpQjtNQUFDLEtBQUEsRUFBTztJQUFSLENBQWpCO0lBQ1AsTUFBQSxDQUFPLEtBQVAsRUFBYyxJQUFkLEVBQW9CO01BQUMsS0FBQSxFQUFPLDhDQUFBLEdBQWlELElBQXpEO01BQStELElBQUEsRUFBTTtJQUFyRSxDQUFwQixFQUpGOztJQU1FLE1BQUEsQ0FBTyxLQUFQLEVBQWMsSUFBZCxFQUFvQjtNQUFDLEtBQUEsRUFBTyw2Q0FBUjtNQUF1RCxJQUFBLEVBQU07SUFBN0QsQ0FBcEI7RUFQRCxDQUFEOztFQVdDLE1BQUEsQ0FBTyxJQUFQLEVBQWEsRUFBYixFQUFpQjtJQUFDLEtBQUEsRUFBUSxrQkFBVDtFQUFBLENBQWpCO1NBQ0EsTUFBQSxDQUFPLElBQVAsRUFBYSxFQUFiLEVBQWlCO0lBQUMsS0FBQSxFQUFRLGtCQUFUO0VBQUEsQ0FBakI7QUFiZTs7QUFlaEIsT0FBQSxHQUFVLFFBQUEsQ0FBQyxNQUFELEVBQVEsR0FBUixFQUFZLFdBQVMsRUFBckIsQ0FBQSxFQUFBO0VBQ1QsSUFBRyxNQUFNLENBQUMsR0FBUCxDQUFXLEdBQVgsQ0FBSDtBQUF1QixXQUFPLE1BQU0sQ0FBQyxHQUFQLENBQVcsR0FBWCxDQUFlLENBQUMsSUFBaEIsQ0FBQSxFQUE5Qjs7RUFDQSxJQUFHLE1BQU0sQ0FBQyxHQUFQLENBQVcsR0FBQSxHQUFNLEdBQWpCLENBQUg7QUFBNkIsV0FBTyxNQUFNLENBQUMsR0FBUCxDQUFXLEdBQUEsR0FBTSxHQUFqQixDQUFxQixDQUFDLElBQXRCLENBQUEsRUFBcEM7O1NBQ0E7QUFIUzs7QUFLVixXQUFBLEdBQWMsUUFBQSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sSUFBUCxFQUFhLENBQWIsQ0FBQSxFQUFBO0FBQ2QsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLEdBQUEsR0FBUyxDQUFBLEdBQUksQ0FBSixLQUFTLENBQVosR0FBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEdBQUksQ0FBTCxDQUFGLEVBQVcsQ0FBQyxDQUFDLENBQUQsQ0FBWixDQUFELENBQW5CLEdBQTJDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFGLEVBQU8sQ0FBQyxDQUFDLENBQUEsR0FBSSxDQUFMLENBQVIsQ0FBRDtFQUNqRCxLQUFTLCtFQUFUO0lBQ0MsR0FBRyxDQUFDLElBQUosQ0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFELENBQUYsRUFBTyxDQUFDLENBQUMsQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFULENBQVIsQ0FBVDtFQUREO0VBRUEsSUFBRyxPQUFIO0lBQWdCLEdBQUcsQ0FBQyxJQUFKLENBQVMsR0FBRyxDQUFDLEtBQUosQ0FBQSxDQUFULEVBQWhCOztTQUNBLEdBQUcsQ0FBQyxJQUFKLENBQUE7QUFMYTs7QUFPZCxRQUFBLEdBQVcsUUFBQSxDQUFDLEtBQUQsQ0FBQTtBQUNYLE1BQUEsUUFBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLElBQUEsRUFBQSxVQUFBLEVBQUEsR0FBQTs7RUFFQyxHQUFBLEdBQU0sUUFBUSxDQUFDLGdCQUFULENBQTBCLGVBQTFCO0VBQ04sVUFBQSxHQUFhO0FBQ2I7RUFBQSxLQUFBLHFDQUFBOztJQUNDLFVBQVUsQ0FBQyxJQUFYLENBQWdCLElBQUksQ0FBQyxLQUFMLENBQVcsR0FBRyxDQUFDLENBQUQsQ0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFELENBQUcsQ0FBQyxXQUE5QixDQUFBLEdBQTZDLENBQTdEO0VBREQ7RUFFQSxVQUFBLEdBQWEsTUFBQSxDQUFPLFVBQVA7RUFFYixRQUFBLEdBQVcsUUFBUSxDQUFDLFFBQVQsR0FBb0I7RUFDL0IsSUFBRyxDQUFBLENBQUEsSUFBSyxRQUFMLElBQUssUUFBTCxJQUFpQixDQUFqQixDQUFIO0lBQTJCLFFBQVEsQ0FBQyxRQUFULEdBQW9CLFNBQS9DOztFQUVBLEdBQUEsR0FBTSxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsZUFBMUI7QUFDTjtBQUFBO0VBQUEsS0FBQSx3Q0FBQTs7SUFDQyxJQUFHLE9BQU8sQ0FBQyxLQUFELENBQU8sQ0FBQyxFQUFmLEdBQW9CLENBQXZCO01BQ0MsSUFBQSxHQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBRCxDQUFYLENBQW1CLENBQUMsUUFBUSxDQUFDLENBQUEsR0FBSSxRQUFRLENBQUMsS0FBVCxHQUFpQixRQUFRLENBQUMsTUFBL0I7b0JBQ3RDLElBQUksQ0FBQyxXQUFMLEdBQW1CLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBRCxDQUFYLENBQW1CLENBQUMsRUFBRSxDQUFDLE9BQTlCLENBQXNDLFFBQVEsQ0FBQyxRQUEvQyxHQUZwQjtLQUFBLE1BQUE7NEJBQUE7O0VBREQsQ0FBQTs7QUFiVTs7QUFrQlgsYUFBQSxHQUFnQixRQUFBLENBQUEsQ0FBQTtBQUNoQixNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUE7RUFBQyxJQUFHLENBQUksT0FBUDtBQUFvQixXQUFwQjs7QUFDQTtBQUFBO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxLQUFBLEdBQVEsTUFBTSxDQUFDLENBQUQ7OztBQUNkO0FBQUE7TUFBQSxLQUFBLHdDQUFBOztRQUNDLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQSxHQUFRLEtBQUssQ0FBQyxDQUFEO1FBQ2IsSUFBRyxNQUFIO1VBQ0MsSUFBRyxDQUFBLEtBQUssT0FBUjtZQUFxQixPQUFPLENBQUMsQ0FBRCxDQUFHLENBQUMsQ0FBRCxDQUFWLEdBQWdCLElBQXJDOztVQUNBLElBQUcsQ0FBQSxLQUFLLE9BQVI7MEJBQXFCLE9BQU8sQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFELENBQVYsR0FBZ0IsS0FBckM7V0FBQSxNQUFBO2tDQUFBO1dBRkQ7U0FBQSxNQUFBO1VBSUMsSUFBRyxDQUFBLEtBQUssT0FBUjtZQUFxQixPQUFPLENBQUMsQ0FBRCxDQUFHLENBQUMsQ0FBRCxDQUFWLEdBQWdCLElBQXJDOztVQUNBLElBQUcsQ0FBQSxLQUFLLE9BQVI7MEJBQXFCLE9BQU8sQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFELENBQVYsR0FBZ0IsS0FBckM7V0FBQSxNQUFBO2tDQUFBO1dBTEQ7O01BRkQsQ0FBQTs7O0VBRkQsQ0FBQTs7QUFGZTs7QUFhaEIsU0FBQSxHQUFZLFFBQUEsQ0FBQyxLQUFELEVBQVEsS0FBUixDQUFBLEVBQUE7QUFDWixNQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQTtFQUFDLEdBQUEsR0FBTSxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsZUFBMUI7RUFDTixLQUFBLHFEQUFBOztJQUNDLEtBQUEsR0FBVyxLQUFBLEtBQVMsU0FBQSxHQUFZLENBQXhCLEdBQStCLFFBQS9CLEdBQTZDO0lBQ3JELEVBQUUsQ0FBQyxLQUFILEdBQVcsQ0FBQSxpQkFBQSxDQUFBLENBQW9CLEtBQXBCLENBQUE7RUFGWjtFQUlBLEdBQUEsR0FBTSxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsWUFBMUI7QUFDTjtFQUFBLEtBQUEsdURBQUE7O0lBQ0MsS0FBQSxHQUFXLEtBQUEsS0FBUyxTQUFBLEdBQVksQ0FBeEIsR0FBK0IsUUFBL0IsR0FBNkM7a0JBQ3JELEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBRCxDQUFHLENBQUMsS0FBZixHQUF1QixDQUFBLGlCQUFBLENBQUEsQ0FBb0IsS0FBcEIsQ0FBQTtFQUZ4QixDQUFBOztBQVBXOztBQVdaLElBQUEsR0FBTyxRQUFBLENBQUMsR0FBRCxFQUFNLEtBQU4sRUFBYSxVQUFiLENBQUE7QUFDUCxNQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLE9BQUEsR0FBVTtFQUNWLFFBQUEsR0FBVztFQUNYLElBQUEsR0FBTztBQUNQO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxFQUFBLEdBQUssS0FBSyxDQUFDLEtBQUQsQ0FBTyxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQ7SUFDcEIsS0FBQSxHQUFRLEtBQUssQ0FBQyxPQUFOLENBQWMsRUFBZDtJQUNSLEdBQUEsR0FBTSxLQUFLLENBQUMsS0FBRCxDQUFPLENBQUMsQ0FBRCxDQUFHLENBQUMsQ0FBRDtJQUNyQixJQUFHLEtBQUEsS0FBUyxDQUFDLENBQWI7TUFDQyxHQUFBLEdBQU0sT0FBTyxDQUFDLEdBQUQsQ0FBSyxDQUFDO01BQ25CLE9BQUEsSUFBVztNQUNYLElBQUcsR0FBQSxLQUFPLENBQVY7UUFDQyxRQUFBLElBQVk7UUFDWixJQUFJLENBQUMsSUFBTCxDQUFVLElBQUksQ0FBQyxLQUFMLENBQVcsR0FBWCxDQUFWLEVBRkQ7T0FIRDs7RUFKRDtFQVdBLEdBQUEsR0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUQsQ0FBWCxDQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFBLEdBQUksUUFBUSxDQUFDLEtBQVQsR0FBaUIsUUFBUSxDQUFDLE1BQS9CO0VBQ3RDLEdBQUcsQ0FBQyxXQUFKLEdBQXFCLElBQUksQ0FBQyxNQUFMLEtBQWUsQ0FBbEIsR0FBeUIsRUFBekIsR0FBaUMsQ0FBQyxPQUFBLEdBQVEsQ0FBVCxDQUFXLENBQUMsT0FBWixDQUFvQixDQUFwQixFQWZwRDs7RUFrQkMsSUFBRyxJQUFJLENBQUMsTUFBTCxLQUFlLENBQWxCO1dBQ0MsT0FBTyxDQUFDLEtBQUQsQ0FBTyxDQUFDLEVBQWYsR0FBb0IsRUFEckI7R0FBQSxNQUFBO0lBR0MsS0FBQSxHQUFRLFFBQUEsR0FBUztJQUNqQixJQUFBLEdBQU8sV0FBQSxDQUFZLEtBQVosRUFBbUIsSUFBbkI7V0FDUCxPQUFPLENBQUMsS0FBRCxDQUFPLENBQUMsRUFBZixHQUFvQixLQUxyQjs7QUFuQk07O0FBMEJQLFFBQUEsR0FBVyxRQUFBLENBQUMsR0FBRCxFQUFLLFVBQUwsQ0FBQTtBQUNYLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBO0FBQ0M7O0FBQUE7RUFBQSxLQUFBLHFDQUFBOztrQkFDQyxJQUFBLENBQUssR0FBTCxFQUFTLENBQVQsRUFBVyxVQUFYO0VBREQsQ0FBQTs7QUFGVTs7QUFLWCxLQUFBLEdBQVEsUUFBQSxDQUFDLEdBQUQsRUFBTSxLQUFOLEVBQWEsVUFBYixDQUFBO0FBQ1IsTUFBQTtFQUFDLElBQUEsR0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUQsQ0FBWCxDQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFBLEdBQUksUUFBUSxDQUFDLEtBQVQsR0FBaUIsUUFBUSxDQUFDLE1BQS9CO1NBQ3RDLElBQUksQ0FBQyxXQUFMLEdBQXNCLE9BQU8sQ0FBQyxLQUFELENBQU8sQ0FBQyxFQUFmLEtBQXFCLENBQXhCLEdBQStCLEVBQS9CLEdBQXVDLE9BQU8sQ0FBQyxLQUFELENBQU8sQ0FBQyxFQUFFLENBQUMsT0FBbEIsQ0FBMEIsUUFBUSxDQUFDLFFBQW5DO0FBRm5EOztBQUlSLFNBQUEsR0FBWSxRQUFBLENBQUMsR0FBRCxFQUFLLFVBQUwsQ0FBQTtBQUNaLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUM7QUFBQTtFQUFBLEtBQUEscUNBQUE7O2tCQUNDLEtBQUEsQ0FBTSxHQUFOLEVBQVUsQ0FBVixFQUFZLFVBQVo7RUFERCxDQUFBOztBQURXOztBQUlaLFNBQUEsR0FBWSxRQUFBLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBQSxFQUFBO0FBQ1osTUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLFVBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxHQUFBLEdBQU0sT0FBTyxDQUFDLFNBQUQsQ0FBVyxDQUFDLFNBQUQ7RUFDeEIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBLEdBQVEsTUFBTSxDQUFDLFNBQUQsQ0FBVyxDQUFDLFNBQUQ7RUFDekIsSUFBRyxPQUFBLElBQVksQ0FBQyxDQUFBLEtBQUcsT0FBSCxJQUFjLENBQUEsS0FBRyxPQUFsQixDQUFmO0FBQStDLFdBQS9DOztFQUVBLElBQUEsR0FBTyxHQUFBLEdBQU0sSUFKZDtFQU1DLGlCQUFXLGFBQWEsQ0FBQyxLQUFkLENBQW9CLEdBQXBCLEdBQVIsVUFBSDtJQUNDLFNBQUEsVUFBYSxTQUFBLEdBQVksR0FBTSxVQUFBLENBQUE7QUFFL0IsV0FIRDtHQU5EOztFQVdDLGlCQUFXLG1CQUFtQixDQUFDLEtBQXBCLENBQTBCLEdBQTFCLEdBQVIsVUFBSDtJQUNDLElBQUEsQ0FBSyxNQUFMLEVBQUY7QUFDRSxXQUZEO0dBWEQ7OztFQWdCQyxPQUFPLENBQUMsU0FBRCxDQUFXLENBQUMsU0FBRCxDQUFsQixHQUFnQztFQUVoQyxXQUFBLENBQUE7RUFFQSxHQUFBLEdBQU0sUUFBUSxDQUFDO0VBRWYsR0FBQSxHQUFNLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixlQUExQjtFQUNOLFVBQUEsR0FBYTtBQUNiO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxVQUFVLENBQUMsSUFBWCxDQUFnQixJQUFJLENBQUMsS0FBTCxDQUFXLEdBQUcsQ0FBQyxDQUFELENBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBRCxDQUFHLENBQUMsV0FBOUIsQ0FBQSxHQUE2QyxDQUE3RDtFQUREO0VBRUEsVUFBQSxHQUFhLE1BQUEsQ0FBTyxVQUFQO0VBRWIsRUFBQSxHQUFLLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBRCxDQUFYLENBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQSxHQUFJLFNBQUwsQ0FBZSxDQUFDLFFBQVEsQ0FBQyxDQUFEO0VBQ3hELEVBQUUsQ0FBQyxXQUFILEdBQWlCLEtBQUssQ0FBQyxHQUFEO0VBRXRCLEVBQUEsR0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUQsQ0FBWCxDQUFlLENBQUMsUUFBUSxDQUFDLENBQUEsR0FBSSxTQUFMLENBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBRDtFQUN4RCxFQUFFLENBQUMsV0FBSCxHQUFpQixLQUFLLENBQUMsR0FBRDtFQUV0QixJQUFBLENBQUssR0FBTCxFQUFVLENBQVYsRUFBYSxVQUFiO0VBQ0EsSUFBQSxDQUFLLEdBQUwsRUFBVSxDQUFWLEVBQWEsVUFBYjtFQUVBLEtBQUEsQ0FBTSxHQUFOLEVBQVcsQ0FBWCxFQUFjLFVBQWQ7RUFDQSxLQUFBLENBQU0sR0FBTixFQUFXLENBQVgsRUFBYyxVQUFkLEVBdENEOztFQXlDQyxHQUFBLEdBQU0sUUFBUSxDQUFDLGdCQUFULENBQTBCLFlBQTFCO0VBQ04sRUFBQSxHQUFLLEdBQUcsQ0FBQyxTQUFEO0VBQ1IsR0FBQSxHQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBRDtFQUVqQixHQUFHLENBQUMsV0FBSixHQUFrQixZQUFBLENBQWEsR0FBYjtFQUNsQixTQUFBLFVBQWEsU0FBQSxHQUFZLEdBQU0sVUFBQSxDQUFBO1NBRS9CLE9BQU8sQ0FBQyxZQUFSLENBQXFCLENBQUEsQ0FBckIsRUFBeUIsRUFBekIsRUFBNkIsT0FBQSxDQUFBLENBQTdCLEVBakRXO0FBQUE7O0FBbURaLFNBQUEsR0FBWSxRQUFBLENBQUMsR0FBRCxDQUFBO0FBRVosTUFBQSxFQUFBLEVBQUE7RUFBQyxVQUFBLEdBQWE7RUFFYixNQUFBLEdBQVMsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsUUFBeEI7RUFDVCxNQUFNLENBQUMsU0FBUCxHQUFtQjtFQUNuQixFQUFBLEdBQUssTUFBQSxDQUFPLElBQVAsRUFBYSxNQUFiO0VBRUwsTUFBQSxDQUFPLEtBQVAsRUFBYyxNQUFkLEVBQXNCO0lBQUMsSUFBQSxFQUFNLElBQUksQ0FBQyxHQUFEO0VBQVgsQ0FBdEI7RUFFQSxJQUFHLEdBQUEsS0FBTyxHQUFWO0lBQW1CLEVBQUUsQ0FBQyxXQUFILEdBQWlCLGtCQUFBLEdBQXFCLFFBQVEsQ0FBQyxNQUFsRTs7RUFDQSxJQUFHLEdBQUEsS0FBTyxHQUFWO0lBQW1CLEVBQUUsQ0FBQyxXQUFILEdBQWlCLENBQUEsa0JBQUEsQ0FBQSxDQUFxQixTQUFBLEdBQVksUUFBUSxDQUFDLEdBQTFDLENBQUEsS0FBQSxDQUFBLENBQXFELFFBQVEsQ0FBQyxLQUE5RCxDQUFBLEVBQXBDOztFQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7SUFBbUIsRUFBRSxDQUFDLFdBQUgsR0FBaUIsQ0FBQSxpQkFBQSxDQUFBLENBQW9CLFNBQUEsR0FBWSxRQUFRLENBQUMsR0FBekMsQ0FBQSxLQUFBLENBQUEsQ0FBb0QsUUFBUSxDQUFDLEtBQTdELENBQUEsRUFBcEM7O0VBRUEsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsV0FBeEIsQ0FBb0MsQ0FBQyxLQUFLLENBQUMsT0FBM0MsR0FBd0QsR0FBQSxLQUFLLEdBQVIsR0FBaUIsTUFBakIsR0FBNkI7RUFDbEYsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBaUMsQ0FBQyxLQUFLLENBQUMsT0FBeEMsR0FBd0QsR0FBQSxLQUFLLEdBQVIsR0FBaUIsTUFBakIsR0FBNkI7U0FDbEYsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsT0FBeEIsQ0FBZ0MsQ0FBQyxLQUFLLENBQUMsT0FBdkMsR0FBd0QsR0FBQSxLQUFLLEdBQVIsR0FBaUIsTUFBakIsR0FBNkI7QUFoQnZFOztBQWtCWixRQUFBLEdBQVcsUUFBQSxDQUFDLE9BQUQsQ0FBQSxFQUFBO0FBQ1gsTUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTtFQUFDLElBQUEsR0FBTyxRQUFRLENBQUMsY0FBVCxDQUF3QixNQUF4QjtFQUNQLElBQUksQ0FBQyxTQUFMLEdBQWlCO0VBQ2pCLElBQUEsR0FBTyxNQUFBLENBQU8sS0FBUCxFQUFjLElBQWQ7RUFDUCxJQUFBLEdBQU8sTUFBQSxDQUFPLEtBQVAsRUFBYyxJQUFkLEVBQW9CO0lBQUMsS0FBQSxFQUFNO0VBQVAsQ0FBcEI7RUFDUCxJQUFBLEdBQU8sTUFBQSxDQUFPLEtBQVAsRUFBYyxJQUFkO1NBQ1AsSUFBSSxDQUFDLFNBQUwsR0FBaUI7QUFOUDs7QUFRWCxVQUFBLEdBQWEsUUFBQSxDQUFDLFFBQUQsQ0FBQSxFQUFBO0FBQ2IsTUFBQSxPQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxPQUFBLEdBQVU7RUFDVixDQUFBLEdBQUksT0FBTyxDQUFDO0VBQ1osSUFBRyxDQUFBLEdBQUksT0FBTyxDQUFDLE1BQWY7SUFBMkIsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxPQUF2Qzs7RUFDQSxJQUFBLENBQUssTUFBQSxHQUFTOztBQUFDO0FBQUE7SUFBQSxLQUFBLHFDQUFBOztvQkFBQSxPQUFPLENBQUMsQ0FBRDtJQUFQLENBQUE7O01BQUQsQ0FBNkIsQ0FBQyxJQUE5QixDQUFtQyxPQUFuQyxDQUFkO0FBQ0E7QUFBQTtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsSUFBQSxHQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBRCxDQUFHLENBQUMsS0FBbkIsQ0FBeUIsQ0FBekIsRUFBMkIsQ0FBM0I7a0JBQ1AsSUFBQSxDQUFLLE9BQU8sQ0FBQyxDQUFELENBQVAsR0FBYSxLQUFiLEdBQXFCLElBQUksQ0FBQyxJQUFMLENBQVUsT0FBVixDQUFyQixHQUEwQyxLQUExQyxHQUFrRCxPQUFPLENBQUMsQ0FBRCxDQUFHLENBQUMsR0FBbEUsR0FGRDtFQUFBLENBQUE7O0FBTFk7O0FBU2IsU0FBQSxHQUFZLFFBQUEsQ0FBQSxDQUFBO0FBQ1osTUFBQSxDQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBO0VBQUMsT0FBQSxHQUFVO0FBQ1Y7RUFBQSxLQUFBLDZDQUFBO0lBQUksQ0FBQyxDQUFELEVBQUcsQ0FBSDtJQUNILEVBQUEsR0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFELENBQUcsQ0FBQyxJQUFaLEVBQWtCLENBQUEsQ0FBQSxDQUFHLENBQUEsR0FBSSxRQUFRLENBQUMsR0FBaEIsQ0FBQSxJQUFBLENBQWxCO0lBQ0wsRUFBQSxHQUFLLENBQUMsT0FBTyxDQUFDLENBQUQsQ0FBRyxDQUFDLElBQVosRUFBa0IsQ0FBQSxDQUFBLENBQUcsQ0FBQSxHQUFJLFFBQVEsQ0FBQyxHQUFoQixDQUFBLElBQUEsQ0FBbEI7SUFDTCxJQUFHLEVBQUUsQ0FBQyxDQUFELENBQUYsS0FBUyxLQUFaO01BQ0MsRUFBRSxDQUFDLENBQUQsQ0FBRixHQUFRO01BQ1IsT0FBTyxDQUFDLElBQVIsQ0FBYSxFQUFiLEVBRkQ7S0FBQSxNQUdLLElBQUcsRUFBRSxDQUFDLENBQUQsQ0FBRixLQUFTLEtBQVo7TUFDSixFQUFFLENBQUMsQ0FBRCxDQUFGLEdBQVE7TUFDUixPQUFPLENBQUMsSUFBUixDQUFhLEVBQWIsRUFGSTtLQUFBLE1BQUE7TUFJSixPQUFPLENBQUMsSUFBUixDQUFhLEVBQWI7TUFDQSxPQUFPLENBQUMsSUFBUixDQUFhLEVBQWIsRUFMSTs7RUFOTjtFQWFBLE9BQU8sQ0FBQyxJQUFSLENBQUEsRUFkRDs7O0VBaUJDLE9BQUEsR0FBVSxnQkFBQSxDQUFpQixPQUFqQixFQUF5QixhQUF6QjtFQUVWLElBQUEsR0FBTyxRQUFRLENBQUMsY0FBVCxDQUF3QixPQUF4QjtFQUNQLElBQUksQ0FBQyxTQUFMLEdBQWlCLEdBcEJsQjtFQXNCQyxTQUFBLEdBQVksTUFBQSxDQUFPLEtBQVAsRUFBYyxJQUFkO0VBQ1osU0FBUyxDQUFDLFNBQVYsR0FBc0I7U0FFdEIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsQ0FBQyxHQUFELENBQUEsR0FBQTtBQUVqQixRQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUE7SUFBRSxNQUFBLEdBQVMsTUFBQSxDQUFPLEtBQVAsRUFBYyxTQUFkLEVBQXlCO01BQUMsS0FBQSxFQUFNO0lBQVAsQ0FBekI7SUFDVCxNQUFBLEdBQVMsTUFBQSxDQUFPLE9BQVAsRUFBZ0IsTUFBaEI7SUFFVCxLQUFBLEdBQVEsTUFBQSxDQUFPLE9BQVAsRUFBZ0IsTUFBaEI7SUFDUixNQUFBLENBQU8sSUFBUCxFQUFhLEtBQWIsRUFBb0I7TUFBQyxJQUFBLEVBQUs7SUFBTixDQUFwQjtJQUNBLE1BQUEsQ0FBTyxJQUFQLEVBQWEsS0FBYixFQUFvQjtNQUFDLElBQUEsRUFBSztJQUFOLENBQXBCO1dBRUEsR0FBRyxDQUFDLE9BQUosQ0FBWSxDQUFDLENBQUQsQ0FBQSxHQUFBO0FBQ2QsVUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBO01BQUcsR0FBQSxHQUFNLE1BQUEsQ0FBTyxJQUFQLEVBQVksTUFBWjtNQUNOLEdBQUEsR0FBTSxNQUFBLENBQU8sSUFBUCxFQUFZLEdBQVosRUFBaUI7UUFBQyxLQUFBLEVBQU0sTUFBUDtRQUFlLElBQUEsRUFBSyxDQUFDLENBQUMsQ0FBRDtNQUFyQixDQUFqQjthQUNOLEdBQUEsR0FBTSxNQUFBLENBQU8sSUFBUCxFQUFZLEdBQVosRUFBaUI7UUFBQyxLQUFBLEVBQU0sTUFBUDtRQUFlLElBQUEsRUFBSyxDQUFDLENBQUMsQ0FBRDtNQUFyQixDQUFqQjtJQUhLLENBQVo7RUFUZSxDQUFoQjtBQTFCVzs7QUF3Q1osV0FBQSxHQUFjLFFBQUEsQ0FBQyxLQUFELENBQUEsRUFBQTtBQUNkLE1BQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxNQUFBLEVBQUE7RUFBQyxPQUFBLEdBQVUsZ0JBQUEsQ0FBaUIsS0FBakIsRUFBdUIsYUFBdkI7RUFDVixJQUFBLEdBQU8sUUFBUSxDQUFDLGNBQVQsQ0FBd0IsV0FBeEI7RUFDUCxJQUFJLENBQUMsU0FBTCxHQUFpQjtFQUNqQixTQUFBLEdBQVksTUFBQSxDQUFPLEtBQVAsRUFBYyxJQUFkO0VBQ1osU0FBUyxDQUFDLFNBQVYsR0FBc0I7RUFFdEIsTUFBQSxHQUFTO1NBQ1QsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsQ0FBQyxHQUFELENBQUEsR0FBQTtBQUNqQixRQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBO0lBQUUsTUFBQSxHQUFTLE1BQUEsQ0FBTyxLQUFQLEVBQWMsU0FBZCxFQUF5QjtNQUFDLEtBQUEsRUFBTTtJQUFQLENBQXpCO0lBQ1QsTUFBQSxHQUFTLE1BQUEsQ0FBTyxPQUFQLEVBQWdCLE1BQWhCO0lBQ1QsS0FBQSxHQUFRLE1BQUEsQ0FBTyxPQUFQLEVBQWdCLE1BQWhCO0lBQ1IsTUFBQSxDQUFPLElBQVAsRUFBYSxLQUFiLEVBQW9CO01BQUMsSUFBQSxFQUFLO0lBQU4sQ0FBcEI7SUFDQSxNQUFBLENBQU8sSUFBUCxFQUFhLEtBQWIsRUFBb0I7TUFBQyxJQUFBLEVBQUs7SUFBTixDQUFwQjtJQUNBLE1BQUEsQ0FBTyxJQUFQLEVBQWEsS0FBYixFQUFvQjtNQUFDLElBQUEsRUFBSztJQUFOLENBQXBCO0FBQ0E7SUFBQSxLQUFBLHFDQUFBOztNQUNDLE1BQUEsQ0FBTyxJQUFQLEVBQWEsS0FBYixFQUFvQjtRQUFDLElBQUEsRUFBSyxDQUFBLENBQUEsQ0FBRyxDQUFBLEdBQUksUUFBUSxDQUFDLEdBQWhCLENBQUE7TUFBTixDQUFwQjtJQUREO0lBRUEsTUFBQSxDQUFPLElBQVAsRUFBYSxLQUFiLEVBQW9CO01BQUMsSUFBQSxFQUFLO0lBQU4sQ0FBcEI7SUFDQSxNQUFBLENBQU8sSUFBUCxFQUFhLEtBQWIsRUFBb0I7TUFBQyxJQUFBLEVBQUs7SUFBTixDQUFwQjtJQUVBLEdBQUcsQ0FBQyxPQUFKLENBQVksQ0FBQyxJQUFELEVBQU0sQ0FBTixDQUFBLEdBQUE7QUFDZCxVQUFBLE1BQUEsRUFBQTtNQUFHLE1BQUEsR0FBUyxPQUFPLENBQUMsTUFBQSxHQUFTLENBQVY7TUFDaEIsSUFBRyxNQUFNLENBQUMsSUFBUCxLQUFlLEtBQWxCO0FBQTZCLGVBQTdCOztNQUNBLEVBQUEsR0FBSyxNQUFBLENBQU8sSUFBUCxFQUFhLE1BQWI7TUFDTCxNQUFBLENBQU8sSUFBUCxFQUFhLEVBQWIsRUFBaUI7UUFBQyxJQUFBLEVBQU0sQ0FBQSxDQUFBLENBQUcsTUFBQSxHQUFTLENBQVQsR0FBYSxRQUFRLENBQUMsR0FBekIsQ0FBQTtNQUFQLENBQWpCO01BQ0EsTUFBQSxDQUFPLElBQVAsRUFBYSxFQUFiLEVBQWlCO1FBQUMsS0FBQSxFQUFNLGlCQUFQO1FBQTJCLElBQUEsRUFBTSxNQUFNLENBQUM7TUFBeEMsQ0FBakI7TUFDQSxNQUFBLENBQU8sSUFBUCxFQUFhLEVBQWIsRUFBaUI7UUFBQyxLQUFBLEVBQU0saUJBQVA7UUFBMkIsSUFBQSxFQUFNLE1BQU0sQ0FBQztNQUF4QyxDQUFqQjthQUNBLGFBQUEsQ0FBYyxJQUFkLEVBQW9CLE1BQUEsR0FBUyxDQUE3QixFQUFnQyxFQUFoQztJQVBXLENBQVo7V0FRQSxNQUFBLElBQVU7RUFwQkssQ0FBaEI7QUFSYTs7QUE4QmQsVUFBQSxHQUFhLFFBQUEsQ0FBQSxDQUFBLEVBQUE7QUFDYixNQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQTtFQUFDLElBQUcsTUFBTSxDQUFDLE1BQVAsS0FBaUIsQ0FBcEI7QUFBMkIsV0FBM0I7O0VBQ0EsS0FBQSxHQUFRLE1BQU0sQ0FBQyxTQUFEO0VBQ2QsT0FBQSxHQUFVLGdCQUFBLENBQWlCLEtBQWpCLEVBQXdCLGNBQXhCO0VBQ1YsSUFBQSxDQUFLLFNBQUwsRUFBZSxPQUFmO0VBRUEsSUFBQSxHQUFPLFFBQVEsQ0FBQyxjQUFULENBQXdCLFFBQXhCO0VBQ1AsSUFBSSxDQUFDLFNBQUwsR0FBaUI7RUFFakIsSUFBQSxDQUFLLFNBQUwsRUFBZSxPQUFmO0VBRUEsU0FBQSxHQUFZLE1BQUEsQ0FBTyxLQUFQLEVBQWMsSUFBZDtFQUNaLFNBQVMsQ0FBQyxTQUFWLEdBQXNCO0VBRXRCLE1BQUEsR0FBUztTQUNULE9BQU8sQ0FBQyxPQUFSLENBQWdCLENBQUMsR0FBRCxDQUFBLEdBQUE7QUFDakIsUUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBO0lBQUUsTUFBQSxHQUFTLE1BQUEsQ0FBTyxLQUFQLEVBQWMsU0FBZCxFQUF5QjtNQUFDLEtBQUEsRUFBTTtJQUFQLENBQXpCO0lBQ1QsTUFBQSxHQUFTLE1BQUEsQ0FBTyxPQUFQLEVBQWdCLE1BQWhCO0lBRVQsS0FBQSxHQUFRLE1BQUEsQ0FBTyxPQUFQLEVBQWdCLE1BQWhCO0lBQ1IsTUFBQSxDQUFPLElBQVAsRUFBYSxLQUFiLEVBQW9CO01BQUMsSUFBQSxFQUFLO0lBQU4sQ0FBcEI7SUFDQSxNQUFBLENBQU8sSUFBUCxFQUFhLEtBQWIsRUFBb0I7TUFBQyxJQUFBLEVBQUs7SUFBTixDQUFwQjtJQUNBLE1BQUEsQ0FBTyxJQUFQLEVBQWEsS0FBYixFQUFvQjtNQUFDLElBQUEsRUFBSztJQUFOLENBQXBCO0lBQ0EsTUFBQSxDQUFPLElBQVAsRUFBYSxLQUFiLEVBQW9CO01BQUMsSUFBQSxFQUFLO0lBQU4sQ0FBcEI7SUFDQSxNQUFBLENBQU8sSUFBUCxFQUFhLEtBQWIsRUFBb0I7TUFBQyxJQUFBLEVBQUs7SUFBTixDQUFwQjtJQUNBLE1BQUEsQ0FBTyxJQUFQLEVBQWEsS0FBYixFQUFvQjtNQUFDLElBQUEsRUFBSztJQUFOLENBQXBCO0lBRUEsSUFBQSxDQUFLLEtBQUwsRUFBVyxHQUFYO0lBQ0EsR0FBRyxDQUFDLE9BQUosQ0FBWSxDQUFDLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBRCxFQUFPLE1BQVAsQ0FBQSxHQUFBO01BQ1gsSUFBQSxDQUFLLEtBQUwsRUFBVyxDQUFDLENBQUQsRUFBRyxDQUFILENBQVgsRUFBa0IsTUFBbEI7YUFDQSxNQUFNLENBQUMsV0FBUCxDQUFtQixPQUFBLENBQVEsTUFBQSxHQUFTLE1BQWpCLEVBQXlCLE9BQU8sQ0FBQyxTQUFELENBQVcsQ0FBQyxNQUFBLEdBQVMsTUFBVixDQUEzQyxFQUE4RCxDQUE5RCxFQUFnRSxDQUFoRSxDQUFuQjtJQUZXLENBQVo7V0FHQSxNQUFBLElBQVU7RUFoQkssQ0FBaEI7QUFmWTs7QUFpQ2IsVUFBQSxHQUFhLFFBQUEsQ0FBQyxLQUFELEVBQU8sUUFBUCxDQUFBO0FBQ2IsTUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBO0VBQUMsS0FBQSxHQUFRLFFBQVEsQ0FBQyxhQUFULENBQXVCLGtCQUF2QjtFQUNSLEtBQUEsR0FBUSxLQUFLLENBQUMsSUFBTixDQUFXLEtBQUssQ0FBQyxnQkFBTixDQUF1QixJQUF2QixDQUFYO0VBRVIsS0FBSyxDQUFDLElBQU4sQ0FBVyxRQUFBLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBQTtBQUNaLFFBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUE7SUFBRSxLQUFBLEdBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFELENBQU8sQ0FBQyxXQUFXLENBQUMsSUFBOUIsQ0FBQTtJQUNSLEtBQUEsR0FBUSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUQsQ0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUE5QixDQUFBLEVBRFY7O0lBSUUsSUFBQSxHQUFPLFVBQUEsQ0FBVyxLQUFYO0lBQ1AsSUFBQSxHQUFPLFVBQUEsQ0FBVyxLQUFYO0lBQ1AsSUFBRyxDQUFDLEtBQUEsQ0FBTSxJQUFOLENBQUQsSUFBaUIsQ0FBQyxLQUFBLENBQU0sSUFBTixDQUFyQjtNQUNRLElBQUcsUUFBSDtlQUFpQixJQUFBLEdBQU8sS0FBeEI7T0FBQSxNQUFBO2VBQWtDLElBQUEsR0FBTyxLQUF6QztPQURSO0tBQUEsTUFBQTtNQUdRLElBQUcsUUFBSDtlQUFpQixLQUFLLENBQUMsYUFBTixDQUFvQixLQUFwQixFQUFqQjtPQUFBLE1BQUE7ZUFBZ0QsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsS0FBcEIsRUFBaEQ7T0FIUjs7RUFQVSxDQUFYLEVBSEQ7O0FBZ0JDO0VBQUEsS0FBQSx1Q0FBQTs7a0JBQ0MsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsR0FBbEI7RUFERCxDQUFBOztBQWpCWTs7QUFvQmIsVUFBQSxHQUFhLFFBQUEsQ0FBQSxDQUFBO29CQUFHLE9BQU8sQ0FBQyxTQUFVLEdBQXJCO0FBQUE7O0FBRWIsV0FBQSxHQUFjLFFBQUEsQ0FBQSxDQUFBLEVBQUE7QUFDZCxNQUFBO0VBQUMsS0FBQTs7QUFBUztBQUFBO0lBQUEsS0FBQSxxQ0FBQTs7b0JBQUEsUUFBQSxDQUFTLE1BQU0sQ0FBQyxDQUFELENBQWYsRUFBbUIsT0FBTyxDQUFDLENBQUQsQ0FBMUI7SUFBQSxDQUFBOzs7U0FDVCxLQUFBLEdBQVEsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxHQUFHLEtBQVQsRUFGSztBQUFBOztBQUlkLElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQSxFQUFBO0FBRVAsTUFBQSxRQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxVQUFBLEVBQUE7RUFBQyxNQUFBLEdBQVMsSUFBSSxlQUFKLENBQW9CLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBcEM7RUFFVCxJQUFHLE1BQU0sQ0FBQyxJQUFQLEtBQWUsQ0FBbEI7SUFDQyxRQUFRLENBQUMsY0FBVCxDQUF3QixRQUF4QixDQUFpQyxDQUFDLGdCQUFsQyxDQUFtRCxPQUFuRCxFQUE0RCxhQUE1RDtJQUNBLFFBQUEsQ0FBUyxRQUFUO0FBQ0EsV0FIRDs7RUFLQSxRQUFRLENBQUMsY0FBVCxDQUF3QixVQUF4QixDQUFtQyxDQUFDLEtBQXBDLEdBQTRDO0VBQzVDLFFBQVEsQ0FBQyxjQUFULENBQXdCLFFBQXhCLENBQWlDLENBQUMsS0FBbEMsR0FBMEM7RUFFMUMsUUFBQSxDQUFBO0VBRUEsSUFBRyxPQUFPLENBQUMsTUFBUixHQUFpQixDQUFwQjtJQUNDLFFBQUEsQ0FBUyxtQ0FBVDtBQUNBLFdBRkQ7O0VBSUEsTUFBQSxHQUFTLFFBQVEsQ0FBQyxNQUFULEtBQW1CLE9BQU8sQ0FBQyxNQUFSLEdBQWlCO0VBQzdDLFFBQUEsR0FBVyxRQUFRLENBQUMsTUFBVCxlQUFtQixPQUFPLENBQUMsU0FBVTtFQUVoRCxJQUFHLENBQUksTUFBSixHQUFhLFFBQWhCO0lBQ0MsUUFBQSxDQUFTLDhDQUFUO0FBQ0EsV0FGRDs7RUFJQSxNQUFBLEdBQVksTUFBSCxHQUFlLFVBQUEsQ0FBQSxDQUFmLEdBQWlDLFlBQUEsQ0FBQTtFQUMxQyxNQUFBLEdBQVMsTUFBQSxDQUFPLFFBQVEsQ0FBQyxLQUFoQixFQUF1QixNQUF2QjtBQU9UOzs7OztFQUFBLEtBQUEscUNBQUE7O0lBQ0MsT0FBTyxDQUFDLElBQVIsQ0FBYSxLQUFBLENBQU0sVUFBQSxDQUFBLENBQU4sQ0FBbUIsQ0FBQyxJQUFwQixDQUF5QixHQUF6QixDQUFiO0VBREQ7RUFHQSxXQUFBLENBQVksTUFBWjtFQUVBLGFBQUEsQ0FBQTtFQUVBLFdBQUEsQ0FBQTtFQUVBLFdBQUEsQ0FBWSxLQUFaO0VBQ0EsVUFBQSxDQUFBO0VBQ0EsU0FBQSxDQUFBO0VBRUEsR0FBQSxHQUFNLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixlQUExQjtFQUNOLFVBQUEsR0FBYTtBQUNiO0VBQUEsS0FBQSx3Q0FBQTs7SUFDQyxVQUFVLENBQUMsSUFBWCxDQUFnQixJQUFJLENBQUMsS0FBTCxDQUFXLEdBQUcsQ0FBQyxDQUFELENBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBRCxDQUFHLENBQUMsV0FBOUIsQ0FBQSxHQUE2QyxDQUE3RDtFQUREO0VBRUEsVUFBQSxHQUFhLE1BQUEsQ0FBTyxVQUFQO0VBRWIsUUFBQSxDQUFTLEdBQVQsRUFBYSxVQUFiO0VBQ0EsU0FBQSxDQUFVLEdBQVYsRUFBYyxVQUFkO0VBRUEsU0FBQSxDQUFVLEdBQVY7RUFFQSxnQkFBQSxDQUFBO0VBQ0EsU0FBQSxDQUFVLFNBQVYsRUFBb0IsU0FBcEI7RUFFQSxRQUFRLENBQUMsS0FBVCxHQUFpQixRQUFRLENBQUM7U0FFMUIsUUFBUSxDQUFDLGdCQUFULENBQTBCLFNBQTFCLEVBQXFDLFFBQUEsQ0FBQyxLQUFELENBQUEsRUFBQTtBQUN0QyxRQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtJQUFFLEtBQUEsR0FBUSxJQUFJLElBQUosQ0FBQTtJQUNSLEdBQUEsR0FBTSxLQUFLLENBQUM7SUFDWixJQUFHLFFBQVEsT0FBUixRQUFZLE9BQVosUUFBZ0IsR0FBbkI7TUFBNkIsU0FBQSxDQUFVLEdBQVYsRUFBN0I7O0lBRUEsSUFBRyxHQUFBLEtBQU8sV0FBVjtNQUE0QixXQUFBLENBQVksQ0FBQyxDQUFiLEVBQTVCOztJQUNBLElBQUcsR0FBQSxLQUFPLFlBQVY7TUFBNEIsV0FBQSxDQUFZLENBQUMsQ0FBYixFQUE1Qjs7SUFDQSxJQUFHLEdBQUEsS0FBTyxTQUFWO01BQTRCLFdBQUEsQ0FBWSxDQUFDLENBQWIsRUFBNUI7O0lBQ0EsSUFBRyxHQUFBLEtBQU8sV0FBVjtNQUE0QixXQUFBLENBQVksQ0FBQyxDQUFiLEVBQTVCOztJQUVBLEdBQUEsR0FBTTtJQUNOLElBQUcsR0FBQSxLQUFPLEdBQVY7TUFBbUIsU0FBQSxDQUFVLEdBQVYsRUFBZSxHQUFmLEVBQW5COztJQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7TUFBbUIsU0FBQSxDQUFVLEdBQVYsRUFBZSxHQUFmLEVBQW5COztJQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7TUFBbUIsU0FBQSxDQUFVLEdBQVYsRUFBZSxHQUFmLEVBQW5COztJQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7TUFBbUIsU0FBQSxDQUFVLEdBQVYsRUFBZSxHQUFmLEVBQW5COztJQUVBLElBQUcsR0FBQSxLQUFPLEdBQVY7TUFBbUIsUUFBQSxDQUFTLENBQUMsQ0FBVixFQUFuQjs7SUFDQSxJQUFHLEdBQUEsS0FBTyxHQUFWO01BQW1CLFFBQUEsQ0FBUyxDQUFDLENBQVYsRUFBbkI7O0lBRUEsSUFBRyxHQUFBLEtBQU8sR0FBVjtNQUNDLElBQUEsQ0FBSyxPQUFMO01BQ0EsSUFBQSxDQUFLLFdBQUwsRUFBaUIsU0FBakI7TUFDQSxJQUFBLENBQUssV0FBTCxFQUFpQixTQUFqQjtNQUNBLElBQUEsQ0FBSyxZQUFMLEVBQWtCLFFBQWxCO01BQ0EsSUFBQSxDQUFLLFdBQUwsRUFBaUIsT0FBakI7TUFDQSxJQUFBLENBQUssVUFBTCxFQUFnQixNQUFoQjtNQUNBLElBQUEsQ0FBSyxXQUFMLEVBQWtCLE9BQWxCO01BQ0EsSUFBQSxDQUFLLFNBQUwsRUFBZSxLQUFmLEVBUkQ7O0lBVUEsR0FBQSxHQUFNLFFBQVEsQ0FBQyxLQUFULEdBQWlCLFFBQVEsQ0FBQztJQUVoQyxJQUFHLEdBQUEsS0FBTyxHQUFWO01BQW1CLFVBQUEsQ0FBVyxDQUFYLEVBQWlCLElBQWpCLEVBQW5COztJQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7TUFBbUIsVUFBQSxDQUFXLENBQVgsRUFBaUIsSUFBakIsRUFBbkI7O0lBQ0EsSUFBRyxHQUFBLEtBQU8sR0FBVjtNQUFtQixVQUFBLENBQVcsQ0FBWCxFQUFpQixLQUFqQixFQUFuQjs7SUFDQSxJQUFHLEdBQUEsS0FBTyxHQUFWO01BQW1CLFVBQUEsQ0FBVyxDQUFBLEdBQUUsR0FBYixFQUFpQixLQUFqQixFQUFuQjs7SUFDQSxJQUFHLEdBQUEsS0FBTyxHQUFWO01BQW1CLFVBQUEsQ0FBVyxDQUFBLEdBQUUsR0FBYixFQUFpQixLQUFqQixFQUFuQjs7SUFFQSxTQUFBLENBQVUsU0FBVixFQUFvQixTQUFwQixFQXBDRjs7OztJQXdDRSxHQUFBLEdBQU0sUUFBUSxDQUFDLGdCQUFULENBQTBCLGtCQUExQixDQUE2QyxDQUFDLFNBQUQ7V0FDbkQsR0FBRyxDQUFDLGNBQUosQ0FBbUI7TUFBRSxRQUFBLEVBQVUsUUFBWjtNQUFzQixLQUFBLEVBQU87SUFBN0IsQ0FBbkI7RUExQ29DLENBQXJDO0FBOURNOztBQTBHUCxLQUFBLEdBQVEsSUFBSSxJQUFKLENBQUE7O0FBQ1IsSUFBQSxDQUFBOztBQTdzQmEiLCJzb3VyY2VzQ29udGVudCI6WyIjIMK9IOKAoiDihpEg4oaTIOKGkCDihpJcclxuXHJcbmltcG9ydCB7UGxheWVyfSBmcm9tICcuL3BsYXllci5qcydcclxuaW1wb3J0IHtGbG9hdGluZ30gZnJvbSAnLi9mbG9hdGluZy5qcydcclxuaW1wb3J0IHtoZWxwVGV4dH0gZnJvbSAnLi90ZXh0cy5qcydcclxuaW1wb3J0IHtwZXJmb3JtYW5jZX0gZnJvbSAnLi9yYXRpbmcuanMnXHJcblxyXG5lY2hvID0gY29uc29sZS5sb2dcclxucmFuZ2UgPSBfLnJhbmdlXHJcblxyXG5BTElHTl9MRUZUICAgPSB7c3R5bGU6IFwidGV4dC1hbGlnbjpsZWZ0XCJ9XHJcbkFMSUdOX0NFTlRFUiA9IHtzdHlsZTogXCJ0ZXh0LWFsaWduOmNlbnRlclwifVxyXG5BTElHTl9SSUdIVCAgPSB7c3R5bGU6IFwidGV4dC1hbGlnbjpyaWdodFwifVxyXG5cclxuQUxGQUJFVCA9ICcxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwJyAjIDEwMFxyXG5OQU1FU19QRVJfQ09MID0gMzBcclxuVEFCTEVTX1BFUl9DT0wgPSAzMFxyXG5cclxuS0VZUyA9IHt9XHJcbktFWVMuYSA9IFwiICBiIGMgIOKGkCDihpIgICMgbiBlIHAgciAgbSBsXCJcclxuS0VZUy5iID0gXCJhICAgYyAg4oaQIOKGkiAg4oaRIOKGkyAgMCBTcGFjZSAxICBEZWxcIlxyXG5LRVlTLmMgPSBcImEgYiAgICDihpAg4oaSXCJcclxuXHJcbiMjIFYgQSBSIEkgQSBCIEwgRSBSICMjXHJcblxyXG5zZXR0aW5ncyA9IHtUSVRMRTonVGl0ZWwgc2FrbmFzJywgR0FNRVM6MSwgUk9VTkRTOjAsIFNPUlQ6MSwgT05FOjEsIEJBTEFOQ0U6MSwgREVDSU1BTFM6MH0gIyBPTkUgPSAxICMgMD1kZXYgMT1wcm9kXHJcblxyXG4jIFRpbGxzdMOlbmRldCBnZXMgYXYgZGVzc2EgdmFyaWFibGVyOlxyXG5wbGF5ZXJzID0gW11cclxuXHJcbnJlc3VsdHMgPSBbXSAjIHJvbmRlciB4IGJvcmQuIGNlbGw6ICd4JywgJzAnLCAnMScgZWxsZXIgJzInXHJcbnJvdW5kcyAgPSBbXSAjIHJvbmRlciB4IGJvcmQuIGNlbGw6IFt3LGJdIFxyXG5sb25ncyAgID0gW10gIyBwbGF5ZXJzIHggcm9uZGVyLiBjZWxsOiBbdyxiLGNvbCxyZXNdXHJcblxyXG5jdXJyU2NyZWVuID0gJ2EnXHJcbmN1cnJSb3VuZCA9IDBcclxuY3VyclRhYmxlID0gMFxyXG5cclxuZnJpcm9uZCA9IG51bGwgIyBpbmdlbiBmcmlyb25kLiBBbm5hcnMgaW5kZXggZsO2ciBmcmlyb25kZW5cclxuXHJcbmJlcmdlciA9IG51bGxcclxuXHJcbiMjIEYgVSBOIEsgVCBJIE8gTiBFIFIgIyNcclxuXHJcbmFkZEJvcmQgPSAoYm9yZCxyZXMsYzAsYzEpIC0+XHJcblx0ZWNobyAnYWRkQm9yZCcsYm9yZCxyZXMsYzAsYzFcclxuXHR2aXQgPSBwbGF5ZXJzW2MwXS5uYW1lXHJcblx0c3ZhcnQgPSBwbGF5ZXJzW2MxXS5uYW1lXHJcblx0dml0X2VsbyA9IHBsYXllcnNbYzBdLmVsb1xyXG5cdHN2YXJ0X2VsbyA9IHBsYXllcnNbYzFdLmVsb1xyXG5cdHRyMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ3RyJ1xyXG5cdGNvbG9yID0gaWYgYm9yZCA9PSBjdXJyVGFibGUgdGhlbiAneWVsbG93JyBlbHNlICd3aGl0ZSdcclxuXHJcblx0a29wcGxhICd0ZCcsIHRyMSwge3RleHQgOiBib3JkICsgc2V0dGluZ3MuT05FfVxyXG5cdGtvcHBsYSAndGQnLCB0cjEsIHtzdHlsZTpcInRleHQtYWxpZ246bGVmdFwiLCB0ZXh0IDogdml0fVxyXG5cdGtvcHBsYSAndGQnLCB0cjEsIHtzdHlsZTpcInRleHQtYWxpZ246bGVmdFwiLCB0ZXh0IDogdml0X2Vsb31cclxuXHRrb3BwbGEgJ3RkJywgdHIxLCB7c3R5bGU6XCJ0ZXh0LWFsaWduOmxlZnRcIiwgdGV4dCA6IHN2YXJ0X2Vsb31cclxuXHRrb3BwbGEgJ3RkJywgdHIxLCB7c3R5bGU6XCJ0ZXh0LWFsaWduOmxlZnRcIiwgdGV4dCA6IHN2YXJ0fVxyXG5cdGtvcHBsYSAndGQnLCB0cjEsIHtzdHlsZTpcInRleHQtYWxpZ246Y2VudGVyOyBiYWNrZ3JvdW5kLWNvbG9yOiN7Y29sb3J9XCIsIHRleHQgOiBwcmV0dHlSZXN1bHQgcmVzfVxyXG5cdHRyMVxyXG5cdFxyXG5jaGFuZ2VSb3VuZCA9IChkZWx0YSkgLT4gIyBieXQgcm9uZCBvY2ggdXBwZGF0ZXJhIGJvcmRzbGlzdGFuXHJcblx0Y3VyclJvdW5kID0gKGN1cnJSb3VuZCArIGRlbHRhKSAlJSByb3VuZHMubGVuZ3RoXHJcblx0Y3VyclRhYmxlID0gMFxyXG5cdFxyXG5cdHNldFNjcmVlbiBjdXJyU2NyZWVuXHJcblx0c2hvd1RhYmxlcygpXHJcblx0c2hvd05hbWVzKClcclxuXHJcbmNoYW5nZVRhYmxlID0gKGRlbHRhKSAtPiAjIGJ5dCBib3JkXHJcblx0Y3VyclRhYmxlID0gKGN1cnJUYWJsZSArIGRlbHRhKSAlJSB0YWJsZUNvdW50KClcclxuXHJcbmNodW5rSW50b0NvbHVtbnMgPSAoaXRlbXMsIHNpemUpIC0+ICMgRGVsYSB1cHAgZW4gbGlzdGEgaSBmbGVyYSBtZWQgc2FtbWEgc3RvcmxlaywgdCBleCAzMCArIDMwICsgMThcclxuXHRjb2xzID0gW11cclxuXHRmb3IgaSBpbiByYW5nZSAwLCBpdGVtcy5sZW5ndGgsIHNpemVcclxuXHRcdGNvbHMucHVzaCBpdGVtcy5zbGljZSBpLCBpICsgc2l6ZVxyXG5cdGNvbHNcclxuXHJcbmNvbnZlcnQgPSAoaW5wdXQsYSxiKSAtPiAjIGJ5dCBhbGxhIHRlY2tlbiBpIGlucHV0IHNvbSBmaW5ucyBpIGEgbW90IHRlY2tlbiBtZWQgc2FtbWEgaW5kZXggaSBiXHJcblx0aWYgaW5wdXQgaW4gYSB0aGVuIGJbYS5pbmRleE9mIGlucHV0XSBlbHNlIGlucHV0ICMgYSBvY2ggYiDDpHIgc3Ryw6RuZ2FyXHJcblxyXG5jb252ZXJ0TG9uZyA9IChpbnB1dCxhLGIpIC0+ICMgYnl0IGFsbGEgdGVja2VuIGkgaW5wdXQgc29tIGZpbm5zIGkgYSBtb3Qgc3Ryw6RuZyBtZWQgc2FtbWEgaW5kZXggaSBiLiBiIMOkciBzZXBhcmVyYWQgbWVkIHxcclxuXHRpID0gYS5pbmRleE9mIGlucHV0XHJcblx0YiA9IGIuc3BsaXQgJ3wnXHJcblx0aWYgaW5wdXQgaW4gYSB0aGVuIGJbaV0gZWxzZSBpbnB1dFxyXG5cclxuY3JlYXRlU29ydEV2ZW50cyA9IC0+ICMgU3BlbGFybGlzdGFuIHNvcnRlcmFzIGJlcm9lbmRlIHDDpSB2aWxrZW4ga29sdW1uIG1hbiBrbGlja2FyIHDDpS4gIyBOYW1uIEVsbyBQIGVsbGVyIFBSXHJcblxyXG5cdHRocyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJyNzdGFsbG5pbmcgdGgnXHJcblxyXG5cdGluZGV4ID0gLTFcclxuXHRmb3IgdGggaW4gdGhzXHJcblx0XHRpbmRleCsrXHJcblx0XHRkbyAodGgsaW5kZXgpIC0+XHJcblx0XHRcdHRoLmFkZEV2ZW50TGlzdGVuZXIgJ2NsaWNrJywgKGV2ZW50KSAtPlxyXG5cdFx0XHRcdGtleSA9IHRoLnRleHRDb250ZW50XHJcblx0XHRcdFx0aWYgIWlzTmFOIHBhcnNlSW50IGtleVxyXG5cdFx0XHRcdFx0a2V5ID0gcGFyc2VJbnQoa2V5KSAtIHNldHRpbmdzLk9ORVxyXG5cdFx0XHRcdFx0c2hvd1RhYmxlcygpICMga2V5XHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRzb3J0Q29sdW1uIGluZGV4LCBrZXkgaW4gXCIjIE5hbW5cIi5zcGxpdCAnICdcclxuXHJcbmV4cG9ydCBleHBhbmQgPSAoZ2FtZXMsIHJvdW5kcykgLT4gIyBtYWtlIGEgZG91YmxlIHJvdW5kIGZyb20gYSBzaW5nbGUgcm91bmRcclxuXHRyZXN1bHQgPSBbXVxyXG5cdCNlY2hvICdyb3VuZHMnLHJvdW5kc1xyXG5cdGZvciByb3VuZCBpbiByb3VuZHNcclxuXHRcdHJlc3VsdC5wdXNoIChbdyxiXSBmb3IgW3csYl0gaW4gcm91bmQpXHJcblx0XHRpZiBnYW1lcyA9PSAyIHRoZW4gcmVzdWx0LnB1c2ggKFtiLHddIGZvciBbdyxiXSBpbiByb3VuZClcclxuXHRyZXR1cm4gcmVzdWx0XHJcblxyXG5leHBvcnQgZmluZE51bWJlck9mRGVjaW1hbHMgPSAobHN0KSAtPiAjIGxldGEgdXBwIG1pbnN0YSBhbnRhbCBkZWNpbWFsZXIgc29tIGtyw6R2cyBmw7ZyIHVuaWtoZXQgaSBsaXN0YW5cclxuXHRiZXN0ID0gMFxyXG5cdGZvciBpIGluIHJhbmdlIDZcclxuXHRcdHVuaWsgPSBfLnVuaXEgKGl0ZW0udG9GaXhlZChpKSBmb3IgaXRlbSBpbiBsc3QpXHJcblx0XHRpZiB1bmlrLmxlbmd0aCA+IGJlc3QgdGhlbiBbYmVzdCxpYmVzdF0gPSBbdW5pay5sZW5ndGgsaV1cclxuXHRpYmVzdFxyXG5cclxuaW52ZXJ0ID0gKGxzdCkgLT5cclxuXHRyZXN1bHQgPSBfLmNsb25lIGxzdFxyXG5cdGZvciBpdGVtLGkgaW4gbHN0XHJcblx0XHRyZXN1bHRbaXRlbV0gPSBpXHJcblx0cmVzdWx0XHJcblxyXG5rb3BwbGEgPSAodHlwLCBwYXJlbnQsIGF0dHJzID0ge30pIC0+XHJcbiAgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgdHlwXHJcblxyXG4gIGlmICd0ZXh0JyBvZiBhdHRyc1xyXG4gICAgZWxlbS50ZXh0Q29udGVudCA9IGF0dHJzLnRleHRcclxuICAgIGRlbGV0ZSBhdHRycy50ZXh0XHJcblxyXG4gIGlmICdodG1sJyBvZiBhdHRyc1xyXG4gICAgZWxlbS5pbm5lckhUTUwgPSBhdHRycy5odG1sXHJcbiAgICBkZWxldGUgYXR0cnMuaHRtbFxyXG5cclxuICBmb3Igb3duIGtleSBvZiBhdHRyc1xyXG4gICAgZWxlbS5zZXRBdHRyaWJ1dGUga2V5LCBhdHRyc1trZXldXHJcblxyXG4gIHBhcmVudC5hcHBlbmRDaGlsZCBlbGVtXHJcbiAgZWxlbVxyXG5cclxuZXhwb3J0IGxvbmdGb3JtID0gKHJvdW5kcywgcmVzdWx0cykgLT4gIyBwcm9kdWNlcyB0aGUgbG9uZyBmb3JtIGZvciBPTkUgcm91bmQgKHNwZWxhcmxpc3RhbikuIElmIHRoZXJlIGlzIGEgQllFLCBwdXQgaXQgbGFzdCBpbiB0aGUgbGlzdFxyXG5cdHJlc3VsdCA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aFxyXG5cdFx0W3csYl0gPSByb3VuZHNbaV1cclxuXHRcdHJlcyA9IHJlc3VsdHNbaV1cclxuXHRcdHJlc3VsdC5wdXNoIFt3LGIsJ3cnLHJlc11cclxuXHRcdHJlc3VsdC5wdXNoIFtiLHcsJ2InLG90aGVyIHJlc11cclxuXHJcblx0cmVzdWx0LnNvcnQgKGEsYikgLT4gYVswXSAtIGJbMF1cclxuXHRyZXN1bHRcclxuXHJcbm1ha2VCZXJnZXIgPSAtPiAjIGxvdHRhIGVuIGhlbCBiZXJnZXItdHVybmVyaW5nLlxyXG4jIFxyXG5cdG4gPSBwbGF5ZXJzLmxlbmd0aFxyXG5cdGhhbGYgPSBuIC8vIDIgXHJcblx0QSA9IFswLi4ubl1cclxuXHRyb3VuZHMgPSBbXVxyXG5cdGZvciBpIGluIHJhbmdlIHNldHRpbmdzLlJPVU5EU1xyXG5cdFx0cm91bmRzLnB1c2ggc2F2ZVBhaXJpbmcgaSwgQSwgaGFsZiwgblxyXG5cdFx0QS5wb3AoKVxyXG5cdFx0QSA9IEEuc2xpY2UoaGFsZikuY29uY2F0IEEuc2xpY2UoMCxoYWxmKVxyXG5cdFx0QS5wdXNoIG4tMVxyXG5cdHJvdW5kc1xyXG5cclxubWFrZUZsb2F0aW5nID0gLT4gIyBsb3R0YSBlbiBoZWwgZmxvYXRpbmctdHVybmVyaW5nXHJcblx0ZmxvYXRpbmcgPSBuZXcgRmxvYXRpbmcgcGxheWVycywgc2V0dGluZ3NcclxuXHRzaG93TWF0cml4IGZsb2F0aW5nXHJcblx0I2VjaG8gJ3N1bW1hJyxmbG9hdGluZy5zdW1tYVxyXG5cdGVjaG8gcGxheWVyc1xyXG5cdGZsb2F0aW5nLnJvdW5kc1xyXG5cclxubWFrZVVSTCA9IC0+XHJcblx0dXJsID0gXCIuL1wiXHJcblxyXG5cdHVybCArPSBcIj9USVRMRT0je3NldHRpbmdzLlRJVExFfVwiXHJcblx0dXJsICs9IFwiJkdBTUVTPSN7c2V0dGluZ3MuR0FNRVN9XCJcclxuXHR1cmwgKz0gXCImUk9VTkRTPSN7c2V0dGluZ3MuUk9VTkRTfVwiXHJcblx0dXJsICs9IFwiJlNPUlQ9I3tzZXR0aW5ncy5TT1JUfVwiXHJcblx0dXJsICs9IFwiJk9ORT0je3NldHRpbmdzLk9ORX1cIlxyXG5cdHVybCArPSBcIiZCQUxBTkNFPSN7c2V0dGluZ3MuQkFMQU5DRX1cIlxyXG5cclxuXHRmb3IgcGxheWVyIGluIHBsYXllcnNcclxuXHRcdHVybCArPSBcIiZwPSN7cGxheWVyfVwiXHJcblxyXG5cdGZvciByIGluIHJhbmdlIHJvdW5kcy5sZW5ndGhcclxuXHRcdHMgPSByZXN1bHRzW3JdLmpvaW4gJydcclxuXHRcdHMgPSBfLnRyaW1FbmQgcywgJ3gnXHJcblx0XHRpZiBzICE9ICcnIHRoZW4gdXJsICs9IFwiJnIje3IrMX09I3tzfVwiXHJcblxyXG5cdHVybCA9IHVybC5yZXBsYWNlQWxsICcgJywgJysnXHJcblx0dXJsXHJcblxyXG5leHBvcnQgb3RoZXIgPSAoaW5wdXQpIC0+IGNvbnZlcnQgaW5wdXQsIFwiMDEyeFwiLFwiMjEweFwiXHJcblxyXG5wYXJzZVRleHRhcmVhID0gLT4gIyBsw6RzIGluIGluaXRpYWxhIHVwcGdpZnRlciBvbSBzcGVsYXJuYVxyXG5cdHJhdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkIFwidGV4dGFyZWFcIlxyXG5cclxuXHRsaW5lcyA9IHJhdy52YWx1ZVxyXG5cdGxpbmVzID0gbGluZXMuc3BsaXQgXCJcXG5cIlxyXG5cclxuXHRyb3VuZHMgPSBudWxsXHJcblxyXG5cdGZvciBsaW5lIGluIGxpbmVzIFxyXG5cdFx0aWYgbGluZS5sZW5ndGggPT0gMCBvciBsaW5lWzBdID09ICcjJyB0aGVuIGNvbnRpbnVlXHJcblx0XHRpZiBsaW5lLmluY2x1ZGVzICc9J1xyXG5cdFx0XHRba2V5LCB2YWxdID0gbGluZS5zcGxpdCAnPSdcclxuXHRcdFx0a2V5ID0ga2V5LnRyaW0oKVxyXG5cdFx0XHR2YWwgPSB2YWwudHJpbSgpXHJcblx0XHRcdGlmIGtleSA9PSAnVElUTEUnIHRoZW4gc2V0dGluZ3MuVElUTEUgPSB2YWxcclxuXHRcdFx0aWYga2V5ID09ICdHQU1FUycgdGhlbiBzZXR0aW5ncy5HQU1FUyA9IHZhbFxyXG5cdFx0XHRpZiBrZXkgPT0gJ1JPVU5EUycgdGhlbiBzZXR0aW5ncy5ST1VORFMgPSB2YWxcclxuXHRcdFx0aWYga2V5ID09ICdTT1JUJyB0aGVuIHNldHRpbmdzLlNPUlQgPSB2YWxcclxuXHRcdFx0aWYga2V5ID09ICdPTkUnIHRoZW4gc2V0dGluZ3MuT05FID0gdmFsXHJcblx0XHRcdGlmIGtleSA9PSAnQkFMQU5DRScgdGhlbiBzZXR0aW5ncy5CQUxBTkNFID0gdmFsXHJcblx0XHRlbHNlXHJcblx0XHRcdHBsYXllcnMucHVzaCBsaW5lXHJcblxyXG5cdGlmIHBsYXllcnMubGVuZ3RoICUgMiA9PSAxXHJcblx0XHRmcmlyb25kID0gcGxheWVycy5sZW5ndGhcclxuXHRcdHBsYXllcnMucHVzaCAnMDAwMCBCWUUnXHJcblx0ZWxzZVxyXG5cdFx0ZnJpcm9uZCA9IG51bGxcclxuXHJcblx0aWYgc2V0dGluZ3MuUk9VTkRTID09IDAgdGhlbiBzZXR0aW5ncy5ST1VORFMgPSBwbGF5ZXJzLmxlbmd0aCAtIDFcclxuXHJcblx0aWYgcm91bmRzID09IG51bGwgdGhlbiByb3VuZHMgPSBbXVxyXG5cclxuXHR1cmwgPSBtYWtlVVJMKClcclxuXHRwbGF5ZXJzID0gW11cclxuXHRyb3VuZHMgPSBbXVxyXG5cdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsXHJcblx0ZWNobyAnd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmwnXHJcblxyXG5wYXJzZVVSTCA9IC0+IFxyXG5cdHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMgd2luZG93LmxvY2F0aW9uLnNlYXJjaFxyXG5cclxuXHRzZXR0aW5ncy5USVRMRSA9IHNhZmVHZXQgcGFyYW1zLCBcIlRJVExFXCJcclxuXHRzZXR0aW5ncy5HQU1FUyA9IHBhcnNlSW50IHNhZmVHZXQgcGFyYW1zLCBcIkdBTUVTXCIsIFwiMVwiXHJcblx0c2V0dGluZ3MuU09SVCA9IHBhcnNlSW50IHNhZmVHZXQgcGFyYW1zLCBcIlNPUlRcIiwgXCIxXCJcclxuXHRzZXR0aW5ncy5PTkUgPSBwYXJzZUludCBzYWZlR2V0IHBhcmFtcywgXCJPTkVcIiwgXCIxXCJcclxuXHRzZXR0aW5ncy5CQUxBTkNFID0gcGFyc2VJbnQgc2FmZUdldCBwYXJhbXMsIFwiQkFMQU5DRVwiLCBcIjFcIlxyXG5cclxuXHRwbGF5ZXJzID0gW11cclxuXHRwZXJzb25zID0gcGFyYW1zLmdldEFsbCBcInBcIlxyXG5cclxuXHRpZiB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmNsdWRlcyAnQllFJyB0aGVuIGZyaXJvbmQgPSBwZXJzb25zLmxlbmd0aCAtIDFcclxuXHRpZiBzZXR0aW5ncy5TT1JUID09IDEgdGhlbiBwZXJzb25zLnNvcnQoKS5yZXZlcnNlKClcclxuXHJcblx0c2V0dGluZ3MuUk9VTkRTID0gcGFyc2VJbnQgc2FmZUdldCBwYXJhbXMsIFwiUk9VTkRTXCIsIFwiI3twbGF5ZXJzLmxlbmd0aC0xfVwiXHJcblxyXG5cdGkgPSAwXHJcblx0Zm9yIHBlcnNvbiBpbiBwZXJzb25zXHJcblx0XHRpICs9IDFcclxuXHRcdGVsbyA9IHBhcnNlSW50IHBlcnNvbi5zbGljZSAwLDRcclxuXHRcdG5hbWUgPSBwZXJzb24uc2xpY2UoNCkudHJpbSgpXHJcblx0XHRwbGF5ZXJzLnB1c2ggbmV3IFBsYXllciBwbGF5ZXJzLmxlbmd0aCwgbmFtZSwgZWxvXHJcblxyXG5cdCMgaW5pdGlhbGlzZXJhIHJvdW5kcyBtZWQgJ3gnIGkgYWxsYSBjZWxsZXJcclxuXHRuID0gcGxheWVycy5sZW5ndGggLy8gMlxyXG5cdHJvdW5kcyA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2Ugc2V0dGluZ3MuR0FNRVMgKiBzZXR0aW5ncy5ST1VORFNcclxuXHRcdHJvdW5kcy5wdXNoIG5ldyBBcnJheShuKS5maWxsICd4J1xyXG5cclxuXHRyZWFkUmVzdWx0cyBwYXJhbXNcclxuXHJcbmV4cG9ydCBwcmV0dHlSZXN1bHQgPSAoY2gpIC0+ICMgw7Z2ZXJzw6R0dCBpbnRlcm5hIHJlc3VsdGF0IHRpbGwgZXh0ZXJuYVxyXG5cdGlmIGNoID09ICd4JyB0aGVuIHJldHVybiBcIi1cIlxyXG5cdGlmIGNoID09ICcwJyB0aGVuIHJldHVybiBcIjAgLSAxXCJcclxuXHRpZiBjaCA9PSAnMScgdGhlbiByZXR1cm4gXCLCvSAtIMK9XCJcclxuXHRpZiBjaCA9PSAnMicgdGhlbiByZXR1cm4gXCIxIC0gMFwiXHJcblxyXG5yZWFkUmVzdWx0cyA9IChwYXJhbXMpIC0+ICMgUmVzdWx0YXRlbiBsw6RzZXMgZnLDpW4gdXJsZW5cclxuXHRyZXN1bHRzID0gW11cclxuXHRuID0gcGxheWVycy5sZW5ndGhcclxuXHRpZiBmcmlyb25kIHRoZW4gbiAtPSAyXHJcblx0biAvLz0gMlxyXG5cdFxyXG5cdGZvciByIGluIHJhbmdlIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXHJcblx0XHRyZXN1bHQgPSBzYWZlR2V0IHBhcmFtcywgXCJyI3tyKzF9XCIsIG5ldyBBcnJheShuKS5maWxsIFwieFwiXHJcblx0XHRhcnIgPSBbXVxyXG5cdFx0Zm9yIGNoIGluIHJlc3VsdCBcclxuXHRcdFx0aWYgY2g9PScwJyB0aGVuIGFyci5wdXNoICcwJ1xyXG5cdFx0XHRpZiBjaD09JzEnIHRoZW4gYXJyLnB1c2ggJzEnXHJcblx0XHRcdGlmIGNoPT0nMicgdGhlbiBhcnIucHVzaCAnMidcclxuXHRcdFx0aWYgY2g9PSd4JyB0aGVuIGFyci5wdXNoICd4J1xyXG5cdFx0cmVzdWx0cy5wdXNoIGFyclxyXG5cclxucm91bmRzQ29udGVudCA9IChsb25nLCBpLCB0cikgLT4gIyByb25kZXJuYXMgZGF0YSArIHBvw6RuZyArIFBSLiBpIGFuZ2VyIHNwZWxhcm51bW1lclxyXG5cdGZvciBbdyxiLGNvbG9yLHJlc3VsdF0gaW4gbG9uZ1xyXG5cdFx0b3Bwb25lbnQgPSBzZXR0aW5ncy5PTkUgKyBpZiB3ID09IGkgdGhlbiBiIGVsc2Ugd1xyXG5cdFx0cmVzdWx0ID0gY29udmVydCByZXN1bHQsICd4MjAxRkcnLCAnIDEwwr0xMSdcclxuXHRcdGF0dHIgPSBpZiBjb2xvciA9PSAndycgdGhlbiBcInJpZ2h0OjBweDtcIiBlbHNlIFwibGVmdDowcHg7XCJcclxuXHRcdGNlbGwgPSBrb3BwbGEgJ3RkJywgdHIsIHtzdHlsZTogXCJwb3NpdGlvbjpyZWxhdGl2ZTtcIn1cclxuXHRcdGtvcHBsYSAnZGl2JywgY2VsbCwge3N0eWxlOiBcInBvc2l0aW9uOmFic29sdXRlOyB0b3A6MHB4OyBmb250LXNpemU6MC43ZW07XCIgKyBhdHRyLCB0ZXh0OiBvcHBvbmVudH1cclxuXHRcdCMga29wcGxhICdkaXYnLCBjZWxsLCB7c3R5bGU6IFwicG9zaXRpb246YWJzb2x1dGU7IHRvcDo3cHg7IGZvbnQtc2l6ZToxLjFlbTsgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTEwJSwgLTEwJSlcIiwgdGV4dDogcmVzdWx0fVxyXG5cdFx0a29wcGxhICdkaXYnLCBjZWxsLCB7c3R5bGU6IFwicG9zaXRpb246cmVsYXRpdmU7IGZvbnQtc2l6ZToxLjFlbTsgdG9wOjZweFwiLCB0ZXh0OiByZXN1bHR9XHJcblxyXG5cdFx0IyB0ZXh0LWFsaWduOmNlbnRlcjsgcG9zaXRpb246cmVsYXRpdmU7IHRvcDozcHg7XHJcblxyXG5cdGtvcHBsYSAndGQnLCB0ciwge3N0eWxlIDogXCJ0ZXh0LWFsaWduOnJpZ2h0XCJ9ICMgUFxyXG5cdGtvcHBsYSAndGQnLCB0ciwge3N0eWxlIDogXCJ0ZXh0LWFsaWduOnJpZ2h0XCJ9ICMgUFJcclxuXHJcbnNhZmVHZXQgPSAocGFyYW1zLGtleSxzdGFuZGFyZD1cIlwiKSAtPiAjIEjDpG10YSBwYXJhbWV0ZXJuIGdpdmVuIGF2IGtleSBmcsOlbiB1cmxlblxyXG5cdGlmIHBhcmFtcy5nZXQga2V5IHRoZW4gcmV0dXJuIHBhcmFtcy5nZXQoa2V5KS50cmltKClcclxuXHRpZiBwYXJhbXMuZ2V0ICcgJyArIGtleSB0aGVuIHJldHVybiBwYXJhbXMuZ2V0KCcgJyArIGtleSkudHJpbSgpXHJcblx0c3RhbmRhcmRcclxuXHJcbnNhdmVQYWlyaW5nID0gKHIsIEEsIGhhbGYsIG4pIC0+ICMgc2thcGEgZW4gYm9yZHNsaXN0YSB1dGlmcsOlbiBiZXJnZXIuXHJcblx0bHN0ID0gaWYgciAlIDIgPT0gMSB0aGVuIFtbQVtuIC0gMV0sIEFbMF1dXSBlbHNlIFtbQVswXSwgQVtuIC0gMV1dXVxyXG5cdGZvciBpIGluIFsxLi4uaGFsZl1cclxuXHRcdGxzdC5wdXNoIFtBW2ldLCBBW24gLSAxIC0gaV1dXHJcblx0aWYgZnJpcm9uZCB0aGVuIGxzdC5wdXNoIGxzdC5zaGlmdCgpXHJcblx0bHN0LnNvcnQoKVxyXG5cclxuc2V0QWxsUFIgPSAoZGVsdGEpIC0+XHJcblx0I2VjaG8gJ3NldEFsbFBSJ1xyXG5cclxuXHR0cnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICcjc3RhbGxuaW5nIHRyJ1xyXG5cdHRyYW5zbGF0b3IgPSBbXVxyXG5cdGZvciBpIGluIHJhbmdlIHRycy5sZW5ndGhcclxuXHRcdHRyYW5zbGF0b3IucHVzaCBNYXRoLnJvdW5kKHRyc1tpXS5jaGlsZHJlblswXS50ZXh0Q29udGVudCkgLSAxXHJcblx0dHJhbnNsYXRvciA9IGludmVydCB0cmFuc2xhdG9yXHJcblxyXG5cdGRlY2ltYWxzID0gc2V0dGluZ3MuREVDSU1BTFMgKyBkZWx0YVxyXG5cdGlmIDAgPD0gZGVjaW1hbHMgPD0gNiB0aGVuIHNldHRpbmdzLkRFQ0lNQUxTID0gZGVjaW1hbHNcclxuXHJcblx0dHJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnI3N0YWxsbmluZyB0cidcclxuXHRmb3IgaW5kZXggaW4gcmFuZ2UgcGxheWVycy5sZW5ndGhcclxuXHRcdGlmIHBsYXllcnNbaW5kZXhdLlBSID4gMFxyXG5cdFx0XHR0ZFBSID0gdHJzW3RyYW5zbGF0b3JbaW5kZXhdXS5jaGlsZHJlbls0ICsgc2V0dGluZ3MuR0FNRVMgKiBzZXR0aW5ncy5ST1VORFNdXHJcblx0XHRcdHRkUFIudGV4dENvbnRlbnQgPSBwbGF5ZXJzW3RyYW5zbGF0b3JbaW5kZXhdXS5QUi50b0ZpeGVkIHNldHRpbmdzLkRFQ0lNQUxTXHJcblxyXG5zZXRCeWVSZXN1bHRzID0gLT5cclxuXHRpZiBub3QgZnJpcm9uZCB0aGVuIHJldHVyblxyXG5cdGZvciByIGluIHJhbmdlIHJvdW5kcy5sZW5ndGhcclxuXHRcdHJvdW5kID0gcm91bmRzW3JdXHJcblx0XHRmb3IgdCBpbiByYW5nZSByb3VuZC5sZW5ndGhcclxuXHRcdFx0W3csYl0gPSByb3VuZFt0XVxyXG5cdFx0XHRpZiBiZXJnZXJcclxuXHRcdFx0XHRpZiB3ID09IGZyaXJvbmQgdGhlbiByZXN1bHRzW3JdW3RdID0gJzInXHJcblx0XHRcdFx0aWYgYiA9PSBmcmlyb25kIHRoZW4gcmVzdWx0c1tyXVt0XSA9ICcwJ1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0aWYgdyA9PSBmcmlyb25kIHRoZW4gcmVzdWx0c1tyXVt0XSA9ICcwJ1xyXG5cdFx0XHRcdGlmIGIgPT0gZnJpcm9uZCB0aGVuIHJlc3VsdHNbcl1bdF0gPSAnMidcclxuXHJcbnNldEN1cnNvciA9IChyb3VuZCwgdGFibGUpIC0+ICMgRGVuIGd1bGEgYmFrZ3J1bmRlbiB1cHBkYXRlcmFzIGJlcm9lbmRlIHDDpSBwaWx0YW5nZW50ZXJuYVxyXG5cdHRocyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJyNzdGFsbG5pbmcgdGgnXHJcblx0Zm9yIHRoLGluZGV4IGluIHRoc1xyXG5cdFx0Y29sb3IgPSBpZiBpbmRleCA9PSBjdXJyUm91bmQgKyAzIHRoZW4gJ3llbGxvdycgZWxzZSAnd2hpdGUnXHJcblx0XHR0aC5zdHlsZSA9IFwiYmFja2dyb3VuZC1jb2xvcjoje2NvbG9yfVwiXHJcblxyXG5cdHRycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJyN0YWJsZXMgdHInXHJcblx0Zm9yIHRyLGluZGV4IGluIHRyc1xyXG5cdFx0Y29sb3IgPSBpZiBpbmRleCA9PSBjdXJyVGFibGUgKyAwIHRoZW4gJ3llbGxvdycgZWxzZSAnd2hpdGUnXHJcblx0XHR0ci5jaGlsZHJlbls1XS5zdHlsZSA9IFwiYmFja2dyb3VuZC1jb2xvcjoje2NvbG9yfVwiXHJcblxyXG5zZXRQID0gKHRycywgaW5kZXgsIHRyYW5zbGF0b3IpIC0+XHJcblx0c2NvcmVzUCA9IDBcclxuXHRzY29yZXNQUiA9IDBcclxuXHRlbG9zID0gW11cclxuXHRmb3IgciBpbiByYW5nZSBzZXR0aW5ncy5HQU1FUyAqIHNldHRpbmdzLlJPVU5EU1xyXG5cdFx0Y2ggPSBsb25nc1tpbmRleF1bcl1bM11cclxuXHRcdHZhbHVlID0gJzAxMicuaW5kZXhPZiBjaFxyXG5cdFx0b3BwID0gbG9uZ3NbaW5kZXhdW3JdWzFdXHJcblx0XHRpZiB2YWx1ZSAhPSAtMVxyXG5cdFx0XHRlbG8gPSBwbGF5ZXJzW29wcF0uZWxvXHJcblx0XHRcdHNjb3Jlc1AgKz0gdmFsdWVcclxuXHRcdFx0aWYgZWxvICE9IDBcclxuXHRcdFx0XHRzY29yZXNQUiArPSB2YWx1ZVxyXG5cdFx0XHRcdGVsb3MucHVzaCBNYXRoLnJvdW5kIGVsb1xyXG5cclxuXHR0ZFAgID0gdHJzW3RyYW5zbGF0b3JbaW5kZXhdXS5jaGlsZHJlblszICsgc2V0dGluZ3MuR0FNRVMgKiBzZXR0aW5ncy5ST1VORFNdXHJcblx0dGRQLnRleHRDb250ZW50ID0gaWYgZWxvcy5sZW5ndGggPT0gMCB0aGVuICcnIGVsc2UgKHNjb3Jlc1AvMikudG9GaXhlZCAxXHJcblxyXG5cdCMga2Fsa3lsZXJhIHBlcmZvcm1hbmNlIHJhdGluZyBtaGEgdmluc3RhbmRlbCBvY2ggZWxvLXRhbFxyXG5cdGlmIGVsb3MubGVuZ3RoID09IDAgXHJcblx0XHRwbGF5ZXJzW2luZGV4XS5QUiA9IDBcclxuXHRlbHNlXHJcblx0XHRhbmRlbCA9IHNjb3Jlc1BSLzJcclxuXHRcdHBlcmYgPSBwZXJmb3JtYW5jZSBhbmRlbCwgZWxvc1xyXG5cdFx0cGxheWVyc1tpbmRleF0uUFIgPSBwZXJmXHJcblxyXG5zZXRQX2FsbCA9ICh0cnMsdHJhbnNsYXRvcikgLT5cclxuXHQjZWNobyAnc2V0UF9hbGwnLGxvbmdzLmxlbmd0aCx0cmFuc2xhdG9yLmxlbmd0aFxyXG5cdGZvciBpIGluIHJhbmdlIHRyYW5zbGF0b3IubGVuZ3RoXHJcblx0XHRzZXRQIHRycyxpLHRyYW5zbGF0b3JcclxuXHJcbnNldFBSID0gKHRycywgaW5kZXgsIHRyYW5zbGF0b3IpIC0+XHJcblx0dGRQUiA9IHRyc1t0cmFuc2xhdG9yW2luZGV4XV0uY2hpbGRyZW5bNCArIHNldHRpbmdzLkdBTUVTICogc2V0dGluZ3MuUk9VTkRTXVxyXG5cdHRkUFIudGV4dENvbnRlbnQgPSBpZiBwbGF5ZXJzW2luZGV4XS5QUiA9PSAwIHRoZW4gJycgZWxzZSBwbGF5ZXJzW2luZGV4XS5QUi50b0ZpeGVkIHNldHRpbmdzLkRFQ0lNQUxTXHJcblxyXG5zZXRQUl9hbGwgPSAodHJzLHRyYW5zbGF0b3IpIC0+XHJcblx0Zm9yIGkgaW4gcmFuZ2UgdHJhbnNsYXRvci5sZW5ndGhcclxuXHRcdHNldFBSIHRycyxpLHRyYW5zbGF0b3JcclxuXHJcbnNldFJlc3VsdCA9IChrZXksIHJlcykgLT4gIyBVcHBkYXRlcmEgcmVzdWx0cyBzYW10IGd1aTp0LlxyXG5cdG9sZCA9IHJlc3VsdHNbY3VyclJvdW5kXVtjdXJyVGFibGVdXHJcblx0W3csYl0gPSByb3VuZHNbY3VyclJvdW5kXVtjdXJyVGFibGVdXHJcblx0aWYgZnJpcm9uZCBhbmQgKHc9PWZyaXJvbmQgb3IgYj09ZnJpcm9uZCkgdGhlbiByZXR1cm5cclxuXHJcblx0Y2VsbCA9IG9sZCArIHJlcyAjIHRyYW5zaXRpb24sIDE2IHBvc3NpYmlsaXRpZXNcclxuXHJcblx0aWYgY2VsbCBpbiAneHggMDAgMTEgMjInLnNwbGl0ICcgJyAjIGx5Y2thZCBrb250cm9sbGlubWF0bmluZywgZ8OlIHRpbGwgbsOkc3RhIGJvcmRcclxuXHRcdGN1cnJUYWJsZSA9IChjdXJyVGFibGUgKyAxKSAlJSB0YWJsZUNvdW50KClcclxuXHRcdCNlY2hvICdjdXJyVGFibGUnLGN1cnJUYWJsZVxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGlmIGNlbGwgaW4gJzAxIDAyIDEwIDEyIDIwIDIxJy5zcGxpdCAnICdcclxuXHRcdGVjaG8gJ2V4aXQnXHJcblx0XHRyZXR1cm4gIyBpbm1hdG5pbmcgc3TDpG1tZXIgZWosIGzDpG1uYVxyXG5cclxuXHQjIHVwcGRhdGVyYSBvY2ggZ8OlIHRpbGwgbsOkc3RhIGJvcmRcclxuXHRyZXN1bHRzW2N1cnJSb3VuZF1bY3VyclRhYmxlXSA9IHJlc1xyXG5cclxuXHR1cGRhdGVMb25ncygpXHJcblxyXG5cdG9uZSA9IHNldHRpbmdzLk9ORVxyXG5cclxuXHR0cnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICcjc3RhbGxuaW5nIHRyJ1xyXG5cdHRyYW5zbGF0b3IgPSBbXVxyXG5cdGZvciBpIGluIHJhbmdlIHRycy5sZW5ndGhcclxuXHRcdHRyYW5zbGF0b3IucHVzaCBNYXRoLnJvdW5kKHRyc1tpXS5jaGlsZHJlblswXS50ZXh0Q29udGVudCkgLSAxXHJcblx0dHJhbnNsYXRvciA9IGludmVydCB0cmFuc2xhdG9yXHJcblxyXG5cdHRkID0gdHJzW3RyYW5zbGF0b3Jbd11dLmNoaWxkcmVuWzMgKyBjdXJyUm91bmRdLmNoaWxkcmVuWzFdXHJcblx0dGQudGV4dENvbnRlbnQgPSBcIjDCvTFcIltyZXNdXHJcblxyXG5cdHRkID0gdHJzW3RyYW5zbGF0b3JbYl1dLmNoaWxkcmVuWzMgKyBjdXJyUm91bmRdLmNoaWxkcmVuWzFdXHJcblx0dGQudGV4dENvbnRlbnQgPSBcIjHCvTBcIltyZXNdXHJcblxyXG5cdHNldFAgdHJzLCBiLCB0cmFuc2xhdG9yXHJcblx0c2V0UCB0cnMsIHcsIHRyYW5zbGF0b3JcclxuXHJcblx0c2V0UFIgdHJzLCBiLCB0cmFuc2xhdG9yXHJcblx0c2V0UFIgdHJzLCB3LCB0cmFuc2xhdG9yXHJcblxyXG5cdCMgU8OkdHQgdGFibGVzXHJcblx0dHJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnI3RhYmxlcyB0cidcclxuXHR0ciA9IHRyc1tjdXJyVGFibGVdICMgU2thIHZhcmEgTk9MTCFcclxuXHR0cjUgPSB0ci5jaGlsZHJlbls1XVxyXG5cclxuXHR0cjUudGV4dENvbnRlbnQgPSBwcmV0dHlSZXN1bHQgcmVzXHJcblx0Y3VyclRhYmxlID0gKGN1cnJUYWJsZSArIDEpICUlIHRhYmxlQ291bnQoKVxyXG5cclxuXHRoaXN0b3J5LnJlcGxhY2VTdGF0ZSB7fSwgXCJcIiwgbWFrZVVSTCgpICMgZsO2ciBhdHQgc2xpcHBhIG9tbGFkZG5pbmcgYXYgc2lkYW5cclxuXHJcbnNldFNjcmVlbiA9IChrZXkpIC0+XHJcblxyXG5cdGN1cnJTY3JlZW4gPSBrZXlcclxuXHJcblx0aGVhZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgJ2hlYWRlcidcclxuXHRoZWFkZXIuaW5uZXJIVE1MID0gJydcclxuXHRoMiA9IGtvcHBsYSAnaDInLCBoZWFkZXJcclxuXHJcblx0a29wcGxhICdwcmUnLCBoZWFkZXIsIHt0ZXh0OiBLRVlTW2tleV19XHJcblxyXG5cdGlmIGtleSA9PSAnYScgdGhlbiBoMi50ZXh0Q29udGVudCA9IFwiQSBTdMOkbGxuaW5nIGbDtnIgXCIgKyBzZXR0aW5ncy5USVRMRVxyXG5cdGlmIGtleSA9PSAnYicgdGhlbiBoMi50ZXh0Q29udGVudCA9IFwiQiBCb3Jkc2xpc3RhIHJvbmQgI3tjdXJyUm91bmQgKyBzZXR0aW5ncy5PTkV9IGbDtnIgI3tzZXR0aW5ncy5USVRMRX1cIlxyXG5cdGlmIGtleSA9PSAnYycgdGhlbiBoMi50ZXh0Q29udGVudCA9IFwiQyBOYW1ubGlzdGEgcm9uZCAje2N1cnJSb3VuZCArIHNldHRpbmdzLk9ORX0gZsO2ciAje3NldHRpbmdzLlRJVExFfVwiXHJcblxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFsbG5pbmcnKS5zdHlsZS5kaXNwbGF5ID0gaWYga2V5PT0nYScgdGhlbiAnZmxleCcgZWxzZSAnbm9uZSdcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFibGVzJykuc3R5bGUuZGlzcGxheSAgICA9IGlmIGtleT09J2InIHRoZW4gJ2ZsZXgnIGVsc2UgJ25vbmUnXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWVzJykuc3R5bGUuZGlzcGxheSAgICAgPSBpZiBrZXk9PSdjJyB0aGVuICdmbGV4JyBlbHNlICdub25lJ1xyXG5cclxuc2hvd0luZm8gPSAobWVzc2FnZSkgLT4gIyBWaXNhIGhlbHBUZXh0IHDDpSBza8Okcm1lblxyXG5cdHJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpXHJcblx0cm9vdC5pbm5lckhUTUwgPSBcIlwiXHJcblx0ZGl2MSA9IGtvcHBsYSAnZGl2Jywgcm9vdFxyXG5cdGRpdjIgPSBrb3BwbGEgJ2RpdicsIGRpdjEsIHtjbGFzczpcImhlbHBcIn0gXHJcblx0cHJlMSA9IGtvcHBsYSAncHJlJywgZGl2MlxyXG5cdHByZTEuaW5uZXJIVE1MID0gbWVzc2FnZVxyXG5cclxuc2hvd01hdHJpeCA9IChmbG9hdGluZykgLT4gIyBWaXNhIG1hdHJpc2VuIEFsbGEgbW90IGFsbGEuIERvdCBiZXR5ZGVyOiBpbmdldCBtw7Z0ZVxyXG5cdFNQQUNJTkcgPSAnICdcclxuXHRuID0gcGxheWVycy5sZW5ndGhcclxuXHRpZiBuID4gQUxGQUJFVC5sZW5ndGggdGhlbiBuID0gQUxGQUJFVC5sZW5ndGhcclxuXHRlY2hvICcgICAgJyArIChBTEZBQkVUW2ldIGZvciBpIGluIHJhbmdlIG4pLmpvaW4gU1BBQ0lOR1xyXG5cdGZvciBpIGluIHJhbmdlIG5cclxuXHRcdGxpbmUgPSBmbG9hdGluZy5tYXRyaXhbaV0uc2xpY2UgMCxuXHJcblx0XHRlY2hvIEFMRkFCRVRbaV0gKyAnICAgJyArIGxpbmUuam9pbihTUEFDSU5HKSArICcgICAnICsgcGxheWVyc1tpXS5lbG8gICMgKyAnICcgKyBNYXRoLnJvdW5kIHBsYXllcnNbaV0uc3VtbWFcclxuXHJcbnNob3dOYW1lcyA9IC0+XHJcblx0cGVyc29ucyA9IFtdXHJcblx0Zm9yIFt3LGJdLGkgaW4gcm91bmRzW2N1cnJSb3VuZF1cclxuXHRcdHB3ID0gW3BsYXllcnNbd10ubmFtZSwgXCIje2kgKyBzZXR0aW5ncy5PTkV9IOKAoiBXXCJdXHJcblx0XHRwYiA9IFtwbGF5ZXJzW2JdLm5hbWUsIFwiI3tpICsgc2V0dGluZ3MuT05FfSDigKIgQlwiXVxyXG5cdFx0aWYgcHdbMF0gPT0gJ0JZRScgXHJcblx0XHRcdHBiWzFdID0gJ0JZRSdcclxuXHRcdFx0cGVyc29ucy5wdXNoIHBiXHJcblx0XHRlbHNlIGlmIHBiWzBdID09ICdCWUUnIFxyXG5cdFx0XHRwd1sxXSA9ICdCWUUnXHJcblx0XHRcdHBlcnNvbnMucHVzaCBwd1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRwZXJzb25zLnB1c2ggcHdcclxuXHRcdFx0cGVyc29ucy5wdXNoIHBiXHJcblxyXG5cdHBlcnNvbnMuc29ydCgpXHJcblx0XHJcblx0IyBCeWdnIGtvbHVtbmVybmEgKGZ5bGxzIGtvbHVtbnZpczogMzAgKyAzMCArIDMwICsgMTApXHJcblx0Y29sdW1ucyA9IGNodW5rSW50b0NvbHVtbnMgcGVyc29ucyxOQU1FU19QRVJfQ09MXHJcblxyXG5cdHJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAnbmFtZXMnXHJcblx0cm9vdC5pbm5lckhUTUwgPSAnJyAjIHJlbnNhXHJcblxyXG5cdGNvbnRhaW5lciA9IGtvcHBsYSAnZGl2Jywgcm9vdFxyXG5cdGNvbnRhaW5lci5jbGFzc05hbWUgPSAnY29sdW1ucydcclxuXHJcblx0Y29sdW1ucy5mb3JFYWNoIChjb2wpID0+XHJcblxyXG5cdFx0Y29sRGl2ID0ga29wcGxhICdkaXYnLCBjb250YWluZXIsIHtjbGFzczonY29sdW1uJ31cclxuXHRcdHRhYmVsbCA9IGtvcHBsYSAndGFibGUnLCBjb2xEaXZcclxuXHJcblx0XHR0aGVhZCA9IGtvcHBsYSAndGhlYWQnLCB0YWJlbGxcclxuXHRcdGtvcHBsYSAndGgnLCB0aGVhZCwge3RleHQ6XCJOYW1uXCJ9XHJcblx0XHRrb3BwbGEgJ3RoJywgdGhlYWQsIHt0ZXh0OlwiUGxhdHNcIn1cclxuXHJcblx0XHRjb2wuZm9yRWFjaCAocCkgPT4gXHJcblx0XHRcdHRyMSA9IGtvcHBsYSAndHInLHRhYmVsbFxyXG5cdFx0XHR0ZDEgPSBrb3BwbGEgJ3RkJyx0cjEsIHtjbGFzczonbmFtZScsIHRleHQ6cFswXX1cclxuXHRcdFx0dGQyID0ga29wcGxhICd0ZCcsdHIxLCB7Y2xhc3M6J3NlYXQnLCB0ZXh0OnBbMV19XHJcbiAgXHJcbnNob3dQbGF5ZXJzID0gKGxvbmdzKSAtPiAjIFZpc2Egc3BlbGFybGlzdGFuLiAobG9uZ3MgbGFncmFkIHNvbSBsaXN0YSBhdiBzcGVsYXJlKVxyXG5cdGNvbHVtbnMgPSBjaHVua0ludG9Db2x1bW5zIGxvbmdzLE5BTUVTX1BFUl9DT0xcclxuXHRyb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgJ3N0YWxsbmluZydcclxuXHRyb290LmlubmVySFRNTCA9ICcnXHJcblx0Y29udGFpbmVyID0ga29wcGxhICdkaXYnLCByb290XHJcblx0Y29udGFpbmVyLmNsYXNzTmFtZSA9ICdjb2x1bW5zJ1xyXG5cclxuXHRvZmZzZXQgPSAwXHJcblx0Y29sdW1ucy5mb3JFYWNoIChjb2wpID0+XHJcblx0XHRjb2xEaXYgPSBrb3BwbGEgJ2RpdicsIGNvbnRhaW5lciwge2NsYXNzOidjb2x1bW4nfVxyXG5cdFx0dGFiZWxsID0ga29wcGxhICd0YWJsZScsIGNvbERpdlxyXG5cdFx0dGhlYWQgPSBrb3BwbGEgJ3RoZWFkJywgdGFiZWxsXHJcblx0XHRrb3BwbGEgJ3RoJywgdGhlYWQsIHt0ZXh0OlwiI1wifVxyXG5cdFx0a29wcGxhICd0aCcsIHRoZWFkLCB7dGV4dDpcIk5hbW5cIn1cclxuXHRcdGtvcHBsYSAndGgnLCB0aGVhZCwge3RleHQ6XCJFbG9cIn1cclxuXHRcdGZvciBpIGluIHJhbmdlIHJvdW5kcy5sZW5ndGhcclxuXHRcdFx0a29wcGxhICd0aCcsIHRoZWFkLCB7dGV4dDpcIiN7aSArIHNldHRpbmdzLk9ORX1cIn1cclxuXHRcdGtvcHBsYSAndGgnLCB0aGVhZCwge3RleHQ6XCJQXCJ9XHJcblx0XHRrb3BwbGEgJ3RoJywgdGhlYWQsIHt0ZXh0OlwiUFJcIn1cclxuXHJcblx0XHRjb2wuZm9yRWFjaCAobG9uZyxpKSA9PlxyXG5cdFx0XHRwbGF5ZXIgPSBwbGF5ZXJzW29mZnNldCArIGldXHJcblx0XHRcdGlmIHBsYXllci5uYW1lID09ICdCWUUnIHRoZW4gcmV0dXJuXHJcblx0XHRcdHRyID0ga29wcGxhICd0cicsIHRhYmVsbFxyXG5cdFx0XHRrb3BwbGEgJ3RkJywgdHIsIHt0ZXh0OiBcIiN7b2Zmc2V0ICsgaSArIHNldHRpbmdzLk9ORX1cIn1cclxuXHRcdFx0a29wcGxhICd0ZCcsIHRyLCB7c3R5bGU6XCJ0ZXh0LWFsaWduOmxlZnRcIiAsIHRleHQ6IHBsYXllci5uYW1lfVxyXG5cdFx0XHRrb3BwbGEgJ3RkJywgdHIsIHtzdHlsZTpcInRleHQtYWxpZ246bGVmdFwiICwgdGV4dDogcGxheWVyLmVsb31cclxuXHRcdFx0cm91bmRzQ29udGVudCBsb25nLCBvZmZzZXQgKyBpLCB0clxyXG5cdFx0b2Zmc2V0ICs9IDMwXHJcblxyXG5zaG93VGFibGVzID0gLT4gIyBWaXNhIGJvcmRzbGlzdGFuXHJcblx0aWYgcm91bmRzLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuXHJcblx0cm91bmQgPSByb3VuZHNbY3VyclJvdW5kXVxyXG5cdGNvbHVtbnMgPSBjaHVua0ludG9Db2x1bW5zIHJvdW5kLCBUQUJMRVNfUEVSX0NPTFxyXG5cdGVjaG8gJ2NvbHVtbnMnLGNvbHVtbnNcclxuXHJcblx0cm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkICd0YWJsZXMnXHJcblx0cm9vdC5pbm5lckhUTUwgPSAnJ1xyXG5cclxuXHRlY2hvICdwbGF5ZXJzJyxwbGF5ZXJzXHJcblxyXG5cdGNvbnRhaW5lciA9IGtvcHBsYSAnZGl2Jywgcm9vdFxyXG5cdGNvbnRhaW5lci5jbGFzc05hbWUgPSAnY29sdW1ucydcclxuXHJcblx0b2Zmc2V0ID0gMFxyXG5cdGNvbHVtbnMuZm9yRWFjaCAoY29sKSA9PlxyXG5cdFx0Y29sRGl2ID0ga29wcGxhICdkaXYnLCBjb250YWluZXIsIHtjbGFzczonY29sdW1uJ31cclxuXHRcdHRhYmVsbCA9IGtvcHBsYSAndGFibGUnLCBjb2xEaXZcclxuXHJcblx0XHR0aGVhZCA9IGtvcHBsYSAndGhlYWQnLCB0YWJlbGxcclxuXHRcdGtvcHBsYSAndGgnLCB0aGVhZCwge3RleHQ6XCJCb3JkXCJ9XHJcblx0XHRrb3BwbGEgJ3RoJywgdGhlYWQsIHt0ZXh0OlwiVml0XCJ9XHJcblx0XHRrb3BwbGEgJ3RoJywgdGhlYWQsIHt0ZXh0OlwiRWxvXCJ9XHJcblx0XHRrb3BwbGEgJ3RoJywgdGhlYWQsIHt0ZXh0OlwiRWxvXCJ9XHJcblx0XHRrb3BwbGEgJ3RoJywgdGhlYWQsIHt0ZXh0OlwiU3ZhcnRcIn1cclxuXHRcdGtvcHBsYSAndGgnLCB0aGVhZCwge3RleHQ6XCJSZXN1bHRhdFwifVxyXG5cclxuXHRcdGVjaG8gJ2NvbCcsY29sXHJcblx0XHRjb2wuZm9yRWFjaCAoW3csYl0saVRhYmxlKSA9PlxyXG5cdFx0XHRlY2hvICd3LGInLFt3LGJdLCBpVGFibGVcclxuXHRcdFx0dGFiZWxsLmFwcGVuZENoaWxkIGFkZEJvcmQgb2Zmc2V0ICsgaVRhYmxlLCByZXN1bHRzW2N1cnJSb3VuZF1bb2Zmc2V0ICsgaVRhYmxlXSwgdyxiXHJcblx0XHRvZmZzZXQgKz0gVEFCTEVTX1BFUl9DT0xcclxuXHJcbnNvcnRDb2x1bW4gPSAoaW5kZXgsc3RpZ2FuZGUpIC0+XHJcblx0dGFibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yICcjc3RhbGxuaW5nIHRhYmxlJ1xyXG5cdHJhZGVyID0gQXJyYXkuZnJvbSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsICd0cidcclxuXHJcblx0cmFkZXIuc29ydCAoYSwgYikgLT5cclxuXHRcdGNlbGxBID0gYS5jaGlsZHJlbltpbmRleF0udGV4dENvbnRlbnQudHJpbSgpXHJcblx0XHRjZWxsQiA9IGIuY2hpbGRyZW5baW5kZXhdLnRleHRDb250ZW50LnRyaW0oKVxyXG5cclxuXHRcdCMgRsO2cnPDtmsgasOkbWbDtnJhIHNvbSB0YWwsIGFubmFycyBzb20gdGV4dFxyXG5cdFx0bnVtQSA9IHBhcnNlRmxvYXQgY2VsbEFcclxuXHRcdG51bUIgPSBwYXJzZUZsb2F0IGNlbGxCXHJcblx0XHRpZiAhaXNOYU4obnVtQSkgYW5kICFpc05hTihudW1CKVxyXG5cdFx0XHRyZXR1cm4gaWYgc3RpZ2FuZGUgdGhlbiBudW1BIC0gbnVtQiBlbHNlIG51bUIgLSBudW1BXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBpZiBzdGlnYW5kZSB0aGVuIGNlbGxBLmxvY2FsZUNvbXBhcmUgY2VsbEIgZWxzZSBjZWxsQi5sb2NhbGVDb21wYXJlIGNlbGxBXHJcblxyXG5cdCMgTMOkZ2cgdGlsbGJha2EgcmFkZXJuYSBpIHNvcnRlcmFkIG9yZG5pbmdcclxuXHRmb3IgcmFkIGluIHJhZGVyXHJcblx0XHR0YWJsZS5hcHBlbmRDaGlsZCByYWRcclxuXHJcbnRhYmxlQ291bnQgPSAtPiBwbGF5ZXJzLmxlbmd0aCAvLyAyICMgQmVyw6RrbmEgYW50YWwgYm9yZFxyXG5cclxudXBkYXRlTG9uZ3MgPSAtPiAjIFVwcGRhdGVyYXIgbG9uZ3MgdXRpZnLDpW4gcm91bmRzIG9jaCByZXN1bHRzXHJcblx0bG9uZ3MgPSAobG9uZ0Zvcm0gcm91bmRzW3JdLHJlc3VsdHNbcl0gZm9yIHIgaW4gcmFuZ2Ugcm91bmRzLmxlbmd0aClcclxuXHRsb25ncyA9IF8uemlwIC4uLmxvbmdzICMgdHJhbnNwb25lcmFyIG1hdHJpc2VuXHJcblxyXG5tYWluID0gLT4gIyBIw6RtdGEgdXJsZW4gaSBmw7Zyc3RhIGhhbmQsIHRleHRhcmVhbiBpIGFuZHJhIGhhbmQuXHJcblxyXG5cdHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMgd2luZG93LmxvY2F0aW9uLnNlYXJjaFxyXG5cclxuXHRpZiBwYXJhbXMuc2l6ZSA9PSAwIFxyXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lciBcImNsaWNrXCIsIHBhcnNlVGV4dGFyZWFcclxuXHRcdHNob3dJbmZvIGhlbHBUZXh0XHJcblx0XHRyZXR1cm5cclxuXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0YXJlYVwiKS5zdHlsZSA9ICdkaXNwbGF5OiBub25lJ1xyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uXCIpLnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmUnXHJcblxyXG5cdHBhcnNlVVJMKClcclxuXHJcblx0aWYgcGxheWVycy5sZW5ndGggPCA0XHJcblx0XHRzaG93SW5mbyBcIkR1IG3DpXN0ZSBhbmdlIG1pbnN0IGZ5cmEgc3BlbGFyZSFcIlxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGJlcmdlciA9IHNldHRpbmdzLlJPVU5EUyA9PSBwbGF5ZXJzLmxlbmd0aCAtIDFcclxuXHRmbG9hdGluZyA9IHNldHRpbmdzLlJPVU5EUyA8PSBwbGF5ZXJzLmxlbmd0aCAvLyAyXHJcblxyXG5cdGlmIG5vdCBiZXJnZXIgXiBmbG9hdGluZyAjc2V0dGluZ3MuUk9VTkRTID49IHBsYXllcnMubGVuZ3RoIC8vIDIgYW5kIHNldHRpbmdzLlJPVU5EUyAhPSBwbGF5ZXJzLmxlbmd0aCAtIDFcclxuXHRcdHNob3dJbmZvIFwiQW50YWxldCByb25kZXIgZHUgYW5naXZpdCDDpHIgZWogYWNjZXB0YWJlbHQhXCJcclxuXHRcdHJldHVyblxyXG5cclxuXHRyb3VuZHMgPSBpZiBiZXJnZXIgdGhlbiBtYWtlQmVyZ2VyKCkgZWxzZSBtYWtlRmxvYXRpbmcoKVxyXG5cdHJvdW5kcyA9IGV4cGFuZCBzZXR0aW5ncy5HQU1FUywgcm91bmRzXHJcblxyXG5cdCMgYXJyID0gW11cclxuXHQjIGZvciBwIGluIHBsYXllcnNcclxuXHQjIFx0YXJyLnB1c2ggXCJbI3sobysxIGZvciBvIGluIHAub3BwKX1dXCJcclxuXHQjIGVjaG8gYXJyLmpvaW4gXCJcXG5cIlx0XHJcblxyXG5cdGZvciBpIGluIHJhbmdlIHNldHRpbmdzLlJPVU5EU1xyXG5cdFx0cmVzdWx0cy5wdXNoIEFycmF5KHRhYmxlQ291bnQoKSkuZmlsbCAneCdcclxuXHJcblx0cmVhZFJlc3VsdHMgcGFyYW1zXHJcblxyXG5cdHNldEJ5ZVJlc3VsdHMoKVxyXG5cclxuXHR1cGRhdGVMb25ncygpXHJcblxyXG5cdHNob3dQbGF5ZXJzIGxvbmdzXHJcblx0c2hvd1RhYmxlcygpXHJcblx0c2hvd05hbWVzKClcclxuXHJcblx0dHJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCAnI3N0YWxsbmluZyB0cidcclxuXHR0cmFuc2xhdG9yID0gW11cclxuXHRmb3IgaSBpbiByYW5nZSB0cnMubGVuZ3RoXHJcblx0XHR0cmFuc2xhdG9yLnB1c2ggTWF0aC5yb3VuZCh0cnNbaV0uY2hpbGRyZW5bMF0udGV4dENvbnRlbnQpIC0gMVxyXG5cdHRyYW5zbGF0b3IgPSBpbnZlcnQgdHJhbnNsYXRvclxyXG5cclxuXHRzZXRQX2FsbCB0cnMsdHJhbnNsYXRvclxyXG5cdHNldFBSX2FsbCB0cnMsdHJhbnNsYXRvclxyXG5cclxuXHRzZXRTY3JlZW4gJ2EnXHJcblxyXG5cdGNyZWF0ZVNvcnRFdmVudHMoKVxyXG5cdHNldEN1cnNvciBjdXJyUm91bmQsY3VyclRhYmxlXHJcblxyXG5cdGRvY3VtZW50LnRpdGxlID0gc2V0dGluZ3MuVElUTEVcclxuXHJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAna2V5ZG93bicsIChldmVudCkgLT4gIyBIYW50ZXJhciBhbGxhIHRhbmdlbnR0cnlja25pbmdhclxyXG5cdFx0c3RhcnQgPSBuZXcgRGF0ZSgpXHJcblx0XHRrZXkgPSBldmVudC5rZXlcclxuXHRcdGlmIGtleSBpbiBbJ2EnLCdiJywnYyddIHRoZW4gc2V0U2NyZWVuIGtleVxyXG5cdFx0XHJcblx0XHRpZiBrZXkgPT0gJ0Fycm93TGVmdCcgIHRoZW4gY2hhbmdlUm91bmQgLTFcclxuXHRcdGlmIGtleSA9PSAnQXJyb3dSaWdodCcgdGhlbiBjaGFuZ2VSb3VuZCArMVxyXG5cdFx0aWYga2V5ID09ICdBcnJvd1VwJyAgICB0aGVuIGNoYW5nZVRhYmxlIC0xXHJcblx0XHRpZiBrZXkgPT0gJ0Fycm93RG93bicgIHRoZW4gY2hhbmdlVGFibGUgKzFcclxuXHJcblx0XHRkZWwgPSAnRGVsZXRlJ1xyXG5cdFx0aWYga2V5ID09IGRlbCB0aGVuIHNldFJlc3VsdCBrZXksICd4JyAjIFwiICAtICBcIlxyXG5cdFx0aWYga2V5ID09ICcwJyB0aGVuIHNldFJlc3VsdCBrZXksICcwJyAjIFwiMCAtIDFcIlxyXG5cdFx0aWYga2V5ID09ICcgJyB0aGVuIHNldFJlc3VsdCBrZXksICcxJyAjIFwiwr0gLSDCvVwiXHJcblx0XHRpZiBrZXkgPT0gJzEnIHRoZW4gc2V0UmVzdWx0IGtleSwgJzInICMgXCIxIC0gMFwiXHJcblxyXG5cdFx0aWYga2V5ID09ICdtJyB0aGVuIHNldEFsbFBSICsxXHJcblx0XHRpZiBrZXkgPT0gJ2wnIHRoZW4gc2V0QWxsUFIgLTFcclxuXHJcblx0XHRpZiBrZXkgPT0gJ2QnXHJcblx0XHRcdGVjaG8gJ0R1bXA6J1xyXG5cdFx0XHRlY2hvICdjdXJyUm91bmQnLGN1cnJSb3VuZFxyXG5cdFx0XHRlY2hvICdjdXJyVGFibGUnLGN1cnJUYWJsZVxyXG5cdFx0XHRlY2hvICcgIHNldHRpbmdzJyxzZXR0aW5nc1xyXG5cdFx0XHRlY2hvICcgIHBsYXllcnMnLHBsYXllcnNcclxuXHRcdFx0ZWNobyAnICByb3VuZHMnLHJvdW5kc1xyXG5cdFx0XHRlY2hvICcgIHJlc3VsdHMnLCByZXN1bHRzXHJcblx0XHRcdGVjaG8gJyAgbG9uZ3MnLGxvbmdzXHJcblxyXG5cdFx0Z3hyID0gc2V0dGluZ3MuR0FNRVMgKiBzZXR0aW5ncy5ST1VORFNcclxuXHJcblx0XHRpZiBrZXkgPT0gJyMnIHRoZW4gc29ydENvbHVtbiAwLCAgICB0cnVlXHJcblx0XHRpZiBrZXkgPT0gJ24nIHRoZW4gc29ydENvbHVtbiAxLCAgICB0cnVlXHJcblx0XHRpZiBrZXkgPT0gJ2UnIHRoZW4gc29ydENvbHVtbiAyLCAgICBmYWxzZVxyXG5cdFx0aWYga2V5ID09ICdwJyB0aGVuIHNvcnRDb2x1bW4gMytneHIsZmFsc2VcclxuXHRcdGlmIGtleSA9PSAncicgdGhlbiBzb3J0Q29sdW1uIDQrZ3hyLGZhbHNlXHJcblxyXG5cdFx0c2V0Q3Vyc29yIGN1cnJSb3VuZCxjdXJyVGFibGVcclxuXHRcdCNlY2hvICdjcHUnLCBrZXksIG5ldyBEYXRlKCkgLSBzdGFydFxyXG5cclxuXHRcdCMgdHZpbmdhIGJvcmRldCBhdHQgc3luYXNcclxuXHRcdHJhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjdGFibGVzIHRhYmxlIHRyXCIpW2N1cnJUYWJsZV1cclxuXHRcdHJhZC5zY3JvbGxJbnRvVmlldyB7IGJlaGF2aW9yOiBcInNtb290aFwiLCBibG9jazogXCJjZW50ZXJcIiB9XHJcblxyXG5zdGFydCA9IG5ldyBEYXRlKClcclxubWFpbigpXHJcbiNlY2hvICdjcHUnLG5ldyBEYXRlKCkgLSBzdGFydFxyXG4iXX0=
//# sourceURL=c:\github\FloatingBerger\tournament.coffee