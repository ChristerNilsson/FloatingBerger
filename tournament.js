// Generated by CoffeeScript 2.7.0
  // ½ • ↑ ↓ ← →
var ALFABET, ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT, KEYS, NAMES_PER_COL, addBord, changeRound, changeTable, convert, convertLong, createSortEvents, currRound, currScreen, currTable, echo, frirond, invert, koppla, longs, main, makeBerger, makeFloating, makeURL, parseTextarea, parseURL, players, range, readResults, results, rounds, roundsContent, safeGet, savePairing, setAllPR, setByeResults, setCursor, setP, setPR, setPR_all, setP_all, setResult, setScreen, settings, showInfo, showMatrix, showNames, showPlayers, showTables, sortColumn, start, tableCount, updateLongs,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf,
  hasProp = {}.hasOwnProperty;

import {
  Player
} from './player.js';

import {
  Floating
} from './floating.js';

import {
  helpText
} from './texts.js';

import {
  performance
} from './rating.js';

echo = console.log;

range = _.range;

ALIGN_LEFT = {
  style: "text-align:left"
};

ALIGN_CENTER = {
  style: "text-align:center"
};

ALIGN_RIGHT = {
  style: "text-align:right"
};

ALFABET = '12345678901234567890123456789012345678901234567890';

NAMES_PER_COL = 30;

KEYS = {};

KEYS.a = "  b c  ← →  # n e p r  m l";

KEYS.b = "a   c  ← →  ↑ ↓  0 Space 1  Del";

KEYS.c = "a b    ← →";

//# V A R I A B L E R ##
settings = {
  TITLE: 'Titel saknas',
  GAMES: 1,
  ROUNDS: 0,
  SORT: 1,
  ONE: 1,
  BALANCE: 1,
  DECIMALS: 0 // ONE = 1 # 0=dev 1=prod
};


// Tillståndet ges av dessa variabler:
players = [];

results = []; // ronder x bord. cell: 'x', '0', '1' eller '2'

rounds = []; // ronder x bord. cell: [w,b] 

longs = []; // players x ronder. cell: [w,b,col,res]

currScreen = 'a';

currRound = 0;

currTable = 0;

frirond = null; // ingen frirond. Annars index för frironden


//# F U N K T I O N E R ##
addBord = function(bord, res, c0, c1) {
  var color, svart, svart_elo, tr1, vit, vit_elo;
  vit = players[c0].name;
  svart = players[c1].name;
  vit_elo = players[c0].elo;
  svart_elo = players[c1].elo;
  tr1 = document.createElement('tr');
  color = bord === currTable ? 'yellow' : 'white';
  koppla('td', tr1, {
    text: bord + settings.ONE
  });
  koppla('td', tr1, {
    style: "text-align:left",
    text: vit
  });
  koppla('td', tr1, {
    style: "text-align:left",
    text: vit_elo
  });
  koppla('td', tr1, {
    style: "text-align:left",
    text: svart_elo
  });
  koppla('td', tr1, {
    style: "text-align:left",
    text: svart
  });
  koppla('td', tr1, {
    style: `text-align:center; background-color:${color}`,
    text: prettyResult(res)
  });
  return tr1;
};

changeRound = function(delta) { // byt rond och uppdatera bordslistan
  currRound = modulo(currRound + delta, rounds.length);
  currTable = 0;
  setScreen(currScreen);
  showTables();
  return showNames();
};

changeTable = function(delta) { // byt bord
  return currTable = modulo(currTable + delta, tableCount());
};

convert = function(input, a, b) { // byt alla tecken i input som finns i a mot tecken med samma index i b
  if (indexOf.call(a, input) >= 0) {
    return b[a.indexOf(input)];
  } else {
    return input; // a och b är strängar
  }
};

convertLong = function(input, a, b) { // byt alla tecken i input som finns i a mot sträng med samma index i b. b är separerad med |
  var i;
  i = a.indexOf(input);
  b = b.split('|');
  if (indexOf.call(a, input) >= 0) {
    return b[i];
  } else {
    return input;
  }
};

createSortEvents = function() { // Spelarlistan sorteras beroende på vilken kolumn man klickar på. # Namn Elo P eller PR
  var _th, index, j, len, results1, ths;
  ths = document.querySelectorAll('#stallning th');
  index = -1;
  results1 = [];
  for (j = 0, len = ths.length; j < len; j++) {
    _th = ths[j];
    index++;
    results1.push((function(_th, index) {
      return _th.addEventListener('click', function(event) {
        var key;
        key = _th.textContent;
        if (!isNaN(parseInt(key))) {
          key = parseInt(key) - settings.ONE;
          showTables(); // key
          return;
        }
        return sortColumn(index, indexOf.call("# Namn".split(' '), key) >= 0);
      });
    })(_th, index));
  }
  return results1;
};

export var expand = function(games, rounds) { // make a double round from a single round
  var b, j, len, result, round, w;
  result = [];
  for (j = 0, len = rounds.length; j < len; j++) {
    round = rounds[j];
    result.push((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = round.length; k < len1; k++) {
        [w, b] = round[k];
        results1.push([w, b]);
      }
      return results1;
    })());
    if (games === 2) {
      result.push((function() {
        var k, len1, results1;
        results1 = [];
        for (k = 0, len1 = round.length; k < len1; k++) {
          [w, b] = round[k];
          results1.push([b, w]);
        }
        return results1;
      })());
    }
  }
  return result;
};

export var findNumberOfDecimals = function(lst) { // leta upp minsta antal decimaler som krävs för unikhet i listan
  var best, i, ibest, item, j, len, ref, unik;
  best = 0;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    unik = _.uniq((function() {
      var k, len1, results1;
      results1 = [];
      for (k = 0, len1 = lst.length; k < len1; k++) {
        item = lst[k];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

invert = function(lst) {
  var i, item, j, len, result;
  result = _.clone(lst);
  for (i = j = 0, len = lst.length; j < len; i = ++j) {
    item = lst[i];
    result[item] = i;
  }
  return result;
};

koppla = function(typ, parent, attrs = {}) {
  var elem, key;
  elem = document.createElement(typ);
  if ('text' in attrs) {
    elem.textContent = attrs.text;
    delete attrs.text;
  }
  if ('html' in attrs) {
    elem.innerHTML = attrs.html;
    delete attrs.html;
  }
  for (key in attrs) {
    if (!hasProp.call(attrs, key)) continue;
    elem.setAttribute(key, attrs[key]);
  }
  parent.appendChild(elem);
  return elem;
};

export var longForm = function(rounds, results) { // produces the long form for ONE round (spelarlistan). If there is a BYE, put it last in the list
  var b, i, j, len, ref, res, result, w;
  result = [];
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [w, b] = rounds[i];
    res = results[i];
    result.push([w, b, 'w', res]);
    result.push([b, w, 'b', other(res)]);
  }
  result.sort(function(a, b) {
    return a[0] - b[0];
  });
  return result;
};

makeBerger = function() { // lotta en hel berger-turnering.
  var A, half, i, j, len, n, ref;
  
  n = players.length;
  half = Math.floor(n / 2);
  A = (function() {
    var results1 = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results1.push(j); }
    return results1;
  }).apply(this);
  rounds = [];
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    rounds.push(savePairing(i, A, half, n));
    A.pop();
    A = A.slice(half).concat(A.slice(0, half));
    A.push(n - 1);
  }
  return rounds;
};

makeFloating = function() { // lotta en hel floating-turnering
  var floating;
  floating = new Floating(players, settings);
  showMatrix(floating);
  echo('summa', floating.summa);
  return floating.rounds;
};

makeURL = function() {
  var j, k, len, len1, player, r, ref, s, url;
  url = "./";
  url += `?TITLE=${settings.TITLE}`;
  url += `&GAMES=${settings.GAMES}`;
  url += `&ROUNDS=${settings.ROUNDS}`;
  url += `&SORT=${settings.SORT}`;
  url += `&ONE=${settings.ONE}`;
  url += `&BALANCE=${settings.BALANCE}`;
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    url += `&p=${player}`;
  }
  ref = range(rounds.length);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    r = ref[k];
    s = results[r].join('');
    s = _.trimEnd(s, 'x');
    if (s !== '') {
      url += `&r${r + 1}=${s}`;
    }
  }
  url = url.replaceAll(' ', '+');
  return url;
};

export var other = function(input) {
  return convert(input, "012x", "210x");
};

parseTextarea = function() { // läs in initiala uppgifter om spelarna
  var j, key, len, line, lines, raw, url, val;
  raw = document.getElementById("textarea");
  lines = raw.value;
  lines = lines.split("\n");
  rounds = null;
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (line.length === 0 || line[0] === '#') {
      continue;
    }
    if (line.includes('=')) {
      [key, val] = line.split('=');
      key = key.trim();
      val = val.trim();
      if (key === 'TITLE') {
        settings.TITLE = val;
      }
      if (key === 'GAMES') {
        settings.GAMES = val;
      }
      if (key === 'ROUNDS') {
        settings.ROUNDS = val;
      }
      if (key === 'SORT') {
        settings.SORT = val;
      }
      if (key === 'ONE') {
        settings.ONE = val;
      }
    } else {
      //if key == 'BALANCE' then settings.BALANCE = val
      players.push(line);
    }
  }
  if (players.length % 2 === 1) {
    frirond = players.length;
    players.push('0000 BYE');
  } else {
    frirond = null;
  }
  if (settings.ROUNDS === 0) {
    settings.ROUNDS = players.length - 1;
  }
  if (rounds === null) {
    rounds = [];
  }
  url = makeURL();
  players = [];
  rounds = [];
  window.location.href = url;
  return echo('window.location.href = url');
};

parseURL = function() {
  var elo, i, j, k, len, len1, n, name, params, person, persons, ref;
  params = new URLSearchParams(window.location.search);
  settings.TITLE = safeGet(params, "TITLE");
  settings.GAMES = parseInt(safeGet(params, "GAMES", "1"));
  settings.SORT = parseInt(safeGet(params, "SORT", "1"));
  settings.ONE = parseInt(safeGet(params, "ONE", "1"));
  settings.BALANCE = 1; //parseInt safeGet params, "BALANCE", "1"
  players = [];
  persons = params.getAll("p");
  if (window.location.href.includes('BYE')) {
    frirond = persons.length - 1;
  }
  if (settings.SORT === 1) {
    persons.sort().reverse();
  }
  settings.ROUNDS = parseInt(safeGet(params, "ROUNDS", `${players.length - 1}`));
  i = 0;
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    i += 1;
    elo = parseInt(person.slice(0, 4));
    name = person.slice(4).trim();
    players.push(new Player(players.length, name, elo));
  }
  // initialisera rounds med 'x' i alla celler
  n = Math.floor(players.length / 2);
  rounds = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    rounds.push(new Array(n).fill('x'));
  }
  return readResults(params);
};

export var prettyResult = function(ch) { // översätt interna resultat till externa
  if (ch === 'x') {
    return "-";
  }
  if (ch === '0') {
    return "0 - 1";
  }
  if (ch === '1') {
    return "½ - ½";
  }
  if (ch === '2') {
    return "1 - 0";
  }
};

readResults = function(params) { // Resultaten läses från urlen
  var arr, ch, j, k, len, len1, n, r, ref, result, results1;
  results = [];
  n = players.length;
  if (frirond) {
    n -= 2;
  }
  n = Math.floor(n / 2);
  ref = range(settings.GAMES * settings.ROUNDS);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    result = safeGet(params, `r${r + 1}`, new Array(n).fill("x"));
    arr = [];
    for (k = 0, len1 = result.length; k < len1; k++) {
      ch = result[k];
      if (ch === '0') {
        arr.push('0');
      }
      if (ch === '1') {
        arr.push('1');
      }
      if (ch === '2') {
        arr.push('2');
      }
      if (ch === 'x') {
        arr.push('x');
      }
    }
    results1.push(results.push(arr));
  }
  return results1;
};

roundsContent = function(long, i, _tr) { // rondernas data + poäng + PR. i anger spelarnummer
  var attr, b, cell, color, div1, div2, div3, div4, j, len, opponent, result, w;
  for (j = 0, len = long.length; j < len; j++) {
    [w, b, color, result] = long[j];
    opponent = settings.ONE + (w === i ? b : w);
    result = convert(result, 'x201FG', ' 10½11');
    attr = color === 'w' ? "right:0px;" : "left:0px;";
    cell = koppla('td', _tr, {
      style: "position:relative;"
    });
    div1 = koppla('div', cell, {
      style: "position:absolute; top:0px;  font-size:0.7em;" + attr,
      text: opponent
    });
    div2 = koppla('div', cell, {
      style: "position:absolute; top:12px; font-size:1.1em; transform: translate(-10%, -10%)" + attr,
      text: result
    });
  }
  div3 = koppla('td', _tr, {
    style: "text-align:right" // P
  });
  return div4 = koppla('td', _tr, {
    style: "text-align:right" // PR
  });
};

safeGet = function(params, key, standard = "") { // Hämta parametern given av key från urlen
  if (params.get(key)) {
    return params.get(key).trim();
  }
  if (params.get(' ' + key)) {
    return params.get(' ' + key).trim();
  }
  return standard;
};

savePairing = function(r, A, half, n) { // skapa en bordslista utifrån berger.
  var i, j, lst, ref;
  lst = r % 2 === 1 ? [[A[n - 1], A[0]]] : [[A[0], A[n - 1]]];
  for (i = j = 1, ref = half; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    lst.push([A[i], A[n - 1 - i]]);
  }
  if (frirond) {
    lst.push(lst.shift());
  }
  return lst.sort();
};

setAllPR = function(delta) {
  var _tdPR, decimals, i, index, j, k, len, len1, ref, ref1, results1, translator, trs;
  //echo 'setAllPR'
  trs = document.querySelectorAll('#stallning tr');
  translator = [];
  ref = range(trs.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    translator.push(Math.round(trs[i].children[0].textContent) - 1);
  }
  translator = invert(translator);
  decimals = settings.DECIMALS + delta;
  if ((0 <= decimals && decimals <= 6)) {
    settings.DECIMALS = decimals;
  }
  trs = document.querySelectorAll('#stallning tr');
  ref1 = range(players.length);
  results1 = [];
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    index = ref1[k];
    if (players[index].PR > 0) {
      _tdPR = trs[translator[index]].children[4 + settings.GAMES * settings.ROUNDS];
      results1.push(_tdPR.textContent = players[translator[index]].PR.toFixed(settings.DECIMALS));
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

setByeResults = function() {
  var b, j, len, r, ref, results1, round, t, w;
  if (!frirond) {
    return;
  }
  ref = range(rounds.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    round = rounds[r];
    results1.push((function() {
      var k, len1, ref1, results2;
      ref1 = range(round.length);
      results2 = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        t = ref1[k];
        [w, b] = round[t];
        if (w === frirond) {
          results[r][t] = '0';
        }
        if (b === frirond) {
          results2.push(results[r][t] = '2');
        } else {
          results2.push(void 0);
        }
      }
      return results2;
    })());
  }
  return results1;
};

setCursor = function(round, table) { // Den gula bakgrunden uppdateras beroende på piltangenterna
  var _th, _tr, color, index, j, k, len, len1, results1, ths, trs;
  ths = document.querySelectorAll('#stallning th');
  for (index = j = 0, len = ths.length; j < len; index = ++j) {
    _th = ths[index];
    color = index === currRound + 3 ? 'yellow' : 'white';
    _th.style = `background-color:${color}`;
  }
  trs = document.querySelectorAll('#tables tr');
  results1 = [];
  for (index = k = 0, len1 = trs.length; k < len1; index = ++k) {
    _tr = trs[index];
    color = index === currTable + 0 ? 'yellow' : 'white';
    results1.push(_tr.children[5].style = `background-color:${color}`);
  }
  return results1;
};

setP = function(trs, index, translator) {
  var _tdP, andel, ch, elo, elos, j, len, opp, perf, r, ref, scoresP, scoresPR, value;
  scoresP = 0;
  scoresPR = 0;
  elos = [];
  ref = range(settings.GAMES * settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    ch = longs[index][r][3];
    value = '012'.indexOf(ch);
    opp = longs[index][r][1];
    if (value !== -1) {
      elo = players[opp].elo;
      scoresP += value;
      if (elo !== 0) {
        scoresPR += value;
        elos.push(Math.round(elo));
      }
    }
  }
  _tdP = trs[translator[index]].children[3 + settings.GAMES * settings.ROUNDS];
  _tdP.textContent = elos.length === 0 ? '' : (scoresP / 2).toFixed(1);
  // kalkylera performance rating mha vinstandel och elo-tal
  if (elos.length === 0) {
    return players[index].PR = 0;
  } else {
    andel = scoresPR / 2;
    perf = performance(andel, elos);
    return players[index].PR = perf;
  }
};

setP_all = function(trs, translator) {
  var i, j, len, ref, results1;
  echo('setP_all', longs.length, translator.length);
  ref = range(translator.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results1.push(setP(trs, i, translator));
  }
  return results1;
};

setPR = function(trs, index, translator) {
  var _tdPR;
  _tdPR = trs[translator[index]].children[4 + settings.GAMES * settings.ROUNDS];
  return _tdPR.textContent = players[index].PR === 0 ? '' : players[index].PR.toFixed(settings.DECIMALS);
};

setPR_all = function(trs, translator) {
  var i, j, len, ref, results1;
  ref = range(translator.length);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results1.push(setPR(trs, i, translator));
  }
  return results1;
};

setResult = function(key, res) { // Uppdatera results samt gui:t.
  var _td, _tr, b, cell, i, j, len, old, one, ref, tr5, translator, trs, w;
  old = results[currRound][currTable];
  [w, b] = rounds[currRound][currTable];
  if (frirond && (w === frirond || b === frirond)) {
    return;
  }
  cell = old + res; // transition, 16 possibilities
  if (indexOf.call('xx 00 11 22'.split(' '), cell) >= 0) { // lyckad kontrollinmatning, gå till nästa bord
    currTable = modulo(currTable + 1, tableCount());
    return;
  }
  //echo 'currTable',currTable
  if (indexOf.call('01 02 10 12 20 21'.split(' '), cell) >= 0) {
    echo('exit'); // inmatning stämmer ej, lämna
    return;
  }
  
  // uppdatera och gå till nästa bord
  results[currRound][currTable] = res;
  updateLongs();
  one = settings.ONE;
  trs = document.querySelectorAll('#stallning tr');
  translator = [];
  ref = range(trs.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    translator.push(Math.round(trs[i].children[0].textContent) - 1);
  }
  translator = invert(translator);
  _td = trs[translator[w]].children[3 + currRound].children[1];
  _td.textContent = "0½1"[res];
  _td = trs[translator[b]].children[3 + currRound].children[1];
  _td.textContent = "1½0"[res];
  setP(trs, b, translator);
  setP(trs, w, translator);
  setPR(trs, b, translator);
  setPR(trs, w, translator);
  // Sätt tables
  trs = document.querySelectorAll('#tables tr');
  _tr = trs[currTable];
  tr5 = _tr.children[5];
  tr5.textContent = prettyResult(res);
  currTable = modulo(currTable + 1, tableCount());
  return history.replaceState({}, "", makeURL()); // för att slippa omladdning av sidan
};

setScreen = function(key) {
  var _h2, header;
  currScreen = key;
  header = document.getElementById('header');
  header.innerHTML = '';
  _h2 = koppla('h2', header);
  koppla('pre', header, {
    text: KEYS[key]
  });
  if (key === 'a') {
    _h2.textContent = "A Ställning för " + settings.TITLE;
  }
  if (key === 'b') {
    _h2.textContent = `B Bordslista rond ${currRound + settings.ONE} för ${settings.TITLE}`;
  }
  if (key === 'c') {
    _h2.textContent = `C Namnlista rond ${currRound + settings.ONE} för ${settings.TITLE}`;
  }
  document.getElementById('stallning').style.display = key === 'a' ? 'flex' : 'none';
  document.getElementById('tables').style.display = key === 'b' ? 'flex' : 'none';
  return document.getElementById('names').style.display = key === 'c' ? 'flex' : 'none';
};

showInfo = function(message) { // Visa helpText på skärmen
  var div1, div2, pre1, root;
  root = document.getElementById('info');
  root.innerHTML = "";
  div1 = koppla('div', root);
  div2 = koppla('div', div1, {
    class: "help"
  });
  pre1 = koppla('pre', div2);
  return pre1.innerHTML = message;
};

showMatrix = function(floating) { // Visa matrisen Alla mot alla. Dot betyder: inget möte
  var i, j, len, line, n, ref, results1;
  n = players.length;
  if (n > ALFABET.length) {
    n = ALFABET.length;
  }
  echo('    ' + ((function() {
    var j, len, ref, results1;
    ref = range(n);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results1.push(ALFABET[i]);
    }
    return results1;
  })()).join('   '));
  ref = range(n);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line = floating.matrix[i].slice(0, n);
    results1.push(echo(ALFABET[i] + '   ' + line.join('   ') + '  ' + players[i].elo));
  }
  return results1;
};

showNames = function() {
  var b, chunkIntoColumns, columns, container, i, j, len, pb, persons, pw, ref, root, w;
  persons = [];
  ref = rounds[currRound];
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    [w, b] = ref[i];
    pw = [players[w].name, `${i + settings.ONE} • W`];
    pb = [players[b].name, `${i + settings.ONE} • B`];
    if (pw[0] === 'BYE') {
      pb[1] = 'BYE';
      persons.push(pb);
    } else if (pb[0] === 'BYE') {
      pw[1] = 'BYE';
      persons.push(pw);
    } else {
      persons.push(pw);
      persons.push(pb);
    }
  }
  persons.sort();
  
  // Dela upp i kolumner om max 30 spelare vardera
  chunkIntoColumns = function(items, size) {
    var cols, k, len1, ref1;
    cols = [];
    ref1 = range(0, items.length, size);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      cols.push(items.slice(i, i + size));
    }
    return cols;
  };
  // Bygg kolumnerna (fylls kolumnvis: 30 + 30 + 30 + 10)
  columns = chunkIntoColumns(persons, NAMES_PER_COL);
  root = document.getElementById('names');
  root.innerHTML = ''; // rensa
  container = koppla('div', root);
  container.className = 'columns';
  return columns.forEach((col) => {
    var colDiv, tabell;
    colDiv = koppla('div', container, {
      class: 'column'
    });
    tabell = koppla('table', colDiv);
    return col.forEach((p) => {
      var td1, td2, tr1;
      tr1 = koppla('tr', tabell);
      td1 = koppla('td', tr1, {
        class: 'name',
        text: p[0]
      });
      return td2 = koppla('td', tr1, {
        class: 'seat',
        text: p[1]
      });
    });
  });
};

showPlayers = function(longs) { // Visa spelarlistan. (longs lagrad som lista av spelare)
  var _div, _table, _thead, _tr, i, j, k, len, len1, long, player, ref, results1, root;
  root = document.getElementById('stallning');
  root.innerHTML = '';
  _div = koppla('div', root);
  _table = koppla('table', _div);
  _thead = koppla('thead', _table);
  koppla('th', _thead, {
    text: "#"
  });
  koppla('th', _thead, {
    text: "Namn"
  });
  koppla('th', _thead, {
    text: "Elo"
  });
  ref = range(rounds.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    koppla('th', _thead, {
      text: `${i + settings.ONE}`
    });
  }
  koppla('th', _thead, {
    text: "P"
  });
  koppla('th', _thead, {
    text: "PR"
  });
  results1 = [];
  for (i = k = 0, len1 = longs.length; k < len1; i = ++k) {
    long = longs[i];
    player = players[i];
    if (player.name === 'BYE') {
      continue;
    }
    _tr = koppla('tr', _table);
    koppla('td', _tr, {
      text: `${i + settings.ONE}`
    });
    koppla('td', _tr, {
      style: "text-align:left",
      text: player.name
    });
    koppla('td', _tr, {
      style: "text-align:left",
      text: player.elo
    });
    results1.push(roundsContent(long, i, _tr));
  }
  return results1;
};

showTables = function() { // Visa bordslistan
  var _div, _table, _thead, b, iTable, j, len, ref, results1, root, w;
  if (rounds.length === 0) {
    return;
  }
  root = document.getElementById('tables');
  root.innerHTML = '';
  _div = koppla('div', root);
  _table = koppla('table', _div);
  _thead = koppla('thead', _table);
  koppla('th', _thead, {
    text: "Bord"
  });
  koppla('th', _thead, {
    text: "Vit"
  });
  koppla('th', _thead, {
    text: "Elo"
  });
  koppla('th', _thead, {
    text: "Elo"
  });
  koppla('th', _thead, {
    text: "Svart"
  });
  koppla('th', _thead, {
    text: "Resultat"
  });
  ref = rounds[currRound];
  results1 = [];
  for (iTable = j = 0, len = ref.length; j < len; iTable = ++j) {
    [w, b] = ref[iTable];
    results1.push(_table.appendChild(addBord(iTable, results[currRound][iTable], w, b)));
  }
  return results1;
};

sortColumn = function(index, stigande) {
  var j, len, rad, rader, results1, table;
  table = document.querySelector('#stallning table');
  rader = Array.from(table.querySelectorAll('tr'));
  rader.sort(function(a, b) {
    var cellA, cellB, numA, numB;
    cellA = a.children[index].textContent.trim();
    cellB = b.children[index].textContent.trim();
    // Försök jämföra som tal, annars som text
    numA = parseFloat(cellA);
    numB = parseFloat(cellB);
    if (!isNaN(numA) && !isNaN(numB)) {
      if (stigande) {
        return numA - numB;
      } else {
        return numB - numA;
      }
    } else {
      if (stigande) {
        return cellA.localeCompare(cellB);
      } else {
        return cellB.localeCompare(cellA);
      }
    }
  });
// Lägg tillbaka raderna i sorterad ordning
  results1 = [];
  for (j = 0, len = rader.length; j < len; j++) {
    rad = rader[j];
    results1.push(table.appendChild(rad));
  }
  return results1;
};

tableCount = function() {
  return Math.floor(players.length / 2); // Beräkna antal bord
};

updateLongs = function() { // Uppdaterar longs utifrån rounds och results
  var r;
  longs = (function() {
    var j, len, ref, results1;
    ref = range(rounds.length);
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      results1.push(longForm(rounds[r], results[r]));
    }
    return results1;
  })();
  return longs = _.zip(...longs); // transponerar matrisen
};

main = function() { // Hämta urlen i första hand, textarean i andra hand.
  var berger, floating, i, j, k, len, len1, params, ref, ref1, translator, trs;
  params = new URLSearchParams(window.location.search);
  if (params.size === 0) {
    document.getElementById("button").addEventListener("click", parseTextarea);
    showInfo(helpText);
    return;
  }
  document.getElementById("textarea").style = 'display: none';
  document.getElementById("button").style = 'display: none';
  parseURL();
  if (players.length < 4) {
    showInfo("Du måste ange minst fyra spelare!");
    return;
  }
  berger = settings.ROUNDS === players.length - 1;
  floating = settings.ROUNDS <= Math.floor(players.length / 2);
  if (!berger ^ floating) { //settings.ROUNDS >= players.length // 2 and settings.ROUNDS != players.length - 1
    showInfo("Antalet ronder du angivit är ej acceptabelt!");
    return;
  }
  rounds = berger ? makeBerger() : makeFloating();
  rounds = expand(settings.GAMES, rounds);
  ref = range(settings.ROUNDS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(Array(tableCount()).fill('x'));
  }
  readResults(params);
  setByeResults();
  updateLongs();
  showPlayers(longs);
  showTables();
  showNames();
  trs = document.querySelectorAll('#stallning tr');
  translator = [];
  ref1 = range(trs.length);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    translator.push(Math.round(trs[i].children[0].textContent) - 1);
  }
  translator = invert(translator);
  setP_all(trs, translator);
  setPR_all(trs, translator);
  setScreen('a');
  createSortEvents();
  setCursor(currRound, currTable);
  document.title = settings.TITLE;
  return document.addEventListener('keydown', function(event) { // Hanterar alla tangenttryckningar
    var del, gxr, key, start;
    start = new Date();
    key = event.key;
    if (key === 'a' || key === 'b' || key === 'c') {
      setScreen(key);
    }
    if (key === 'ArrowLeft') {
      changeRound(-1);
    }
    if (key === 'ArrowRight') {
      changeRound(+1);
    }
    if (key === 'ArrowUp') {
      changeTable(-1);
    }
    if (key === 'ArrowDown') {
      changeTable(+1);
    }
    del = 'Delete';
    if (key === del) {
      setResult(key, 'x'); // "  -  "
    }
    if (key === '0') {
      setResult(key, '0'); // "0 - 1"
    }
    if (key === ' ') {
      setResult(key, '1'); // "½ - ½"
    }
    if (key === '1') {
      setResult(key, '2'); // "1 - 0"
    }
    if (key === 'm') {
      setAllPR(+1);
    }
    if (key === 'l') {
      setAllPR(-1);
    }
    if (key === 'd') {
      echo('Dump:');
      echo('currRound', currRound);
      echo('currTable', currTable);
      echo('  settings', settings);
      echo('  players', players);
      echo('  rounds', rounds);
      echo('  results', results);
      echo('  longs', longs);
    }
    gxr = settings.GAMES * settings.ROUNDS;
    if (key === '#') {
      sortColumn(0, true);
    }
    if (key === 'n') {
      sortColumn(1, true);
    }
    if (key === 'e') {
      sortColumn(2, false);
    }
    if (key === 'p') {
      sortColumn(3 + gxr, false);
    }
    if (key === 'r') {
      sortColumn(4 + gxr, false);
    }
    return setCursor(currRound, currTable);
  });
};

//echo 'cpu', key, new Date() - start
start = new Date();

main();

//echo 'cpu',new Date() - start

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FloatingBerger\tournament.coffee