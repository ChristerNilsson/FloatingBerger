// Generated by CoffeeScript 2.7.0
var echo, range,
  indexOf = [].indexOf;

import {
  Edmonds
} from './blossom.js';

range = _.range;

echo = console.log;

export var FairPair = class FairPair {
  constructor(players, settings) {
    var edges, edmonds, i, j, k, l, len, len1, magic, p, r, ref, ref1;
    this.players = players;
    this.settings = settings;
    this.N = this.players.length;
    if (this.settings.sort === 1) {
      this.players.sort(function(a, b) {
        return a.elo - b.elo;
      });
    }
    this.matrix = (function() {
      var k, len, ref, results;
      ref = range(this.N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        j = ref[k];
        results.push((function() {
          var l, len1, ref1, results1;
          ref1 = range(this.N);
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            i = ref1[l];
            results1.push("•");
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this);
    this.rounds = [];
    ref = range(this.settings.ROUNDS);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      edges = this.makeEdges();
      edmonds = new Edmonds(edges);
      magic = edmonds.maxWeightMatching(edges);
      this.rounds.unshift(this.updatePlayers(magic, r));
    }
    ref1 = this.players;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      p = ref1[l];
      delete p.opp;
      delete p.col;
    }
  }

  makeEdges() {
    var a, b, diff, edges, i, j, k, l, len, len1, ref, ref1;
    edges = [];
    ref = range(this.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      a = this.players[i];
      ref1 = range(this.N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        if (i === j) {
          this.matrix[i][j] = ' ';
        }
        b = this.players[j];
        diff = Math.abs(a.elo - b.elo);
        if (this.ok(a, b)) {
          edges.push([i, j, 10000 - diff ** 1.01]);
        }
      }
    }
    return edges;
  }

  ok(a, b) {
    var ref;
    if (a.id === b.id) {
      return false;
    }
    if (ref = a.id, indexOf.call(b.opp, ref) >= 0) {
      return false;
    }
    if (this.settings.GAMES === 2 || this.settings.BALANCE === 0) {
      return true;
    }
    return Math.abs(a.balance() + b.balance()) < this.settings.BALANCE;
  }

  save(a, b, ca, cb, ia, ib) {
    a.col += ca;
    b.col += cb;
    return this.tables.push([ia, ib]);
  }

  updatePlayers(magic, r) {
    var a, b, diff, flip, i, id, j, k, len;
    this.tables = [];
    flip = false; // om två spelare har diff==0, ska varannan bli vit, varannan svart
    for (k = 0, len = magic.length; k < len; k++) {
      id = magic[k];
      i = id;
      j = magic[id];
      if (i === this.matrix.length || j === this.matrix[0].length) {
        continue;
      }
      this.matrix[i][j] = `${'123456789abcdefgh'[r]}`;
      if (i > j) {
        continue;
      }
      diff = Math.abs(this.players[i].elo - this.players[j].elo);
      a = this.players[i];
      b = this.players[j];
      a.opp.push(j);
      b.opp.push(i);
      diff = a.balance() - b.balance();
      if (diff > 0) {
        this.save(a, b, 'b', 'w', j, i);
      } else if (diff < 0) {
        this.save(a, b, 'w', 'b', i, j);
      } else {
        if (flip) {
          this.save(a, b, 'b', 'w', j, i);
        } else {
          this.save(a, b, 'w', 'b', i, j);
        }
        flip = !flip;
      }
    }
    return this.tables;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFpcnBhaXIuanMiLCJzb3VyY2VSb290IjoiXFwiLCJzb3VyY2VzIjpbImZhaXJwYWlyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUEsS0FBQTtFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFFQSxLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUNWLElBQUEsR0FBTyxPQUFPLENBQUM7O0FBRWYsT0FBQSxJQUFhLFdBQU4sTUFBQSxTQUFBO0VBQ04sV0FBYyxRQUFBLFVBQUEsQ0FBQTtBQUNmLFFBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7SUFEZ0IsSUFBQyxDQUFBO0lBQVMsSUFBQyxDQUFBO0lBQ3pCLElBQUMsQ0FBQSxDQUFELEdBQUssSUFBQyxDQUFBLE9BQU8sQ0FBQztJQUNkLElBQUcsSUFBQyxDQUFBLFFBQVEsQ0FBQyxJQUFWLEtBQWdCLENBQW5CO01BQTBCLElBQUMsQ0FBQSxPQUFPLENBQUMsSUFBVCxDQUFjLFFBQUEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBO2VBQVMsQ0FBQyxDQUFDLEdBQUYsR0FBUSxDQUFDLENBQUM7TUFBbkIsQ0FBZCxFQUExQjs7SUFDQSxJQUFDLENBQUEsTUFBRDs7QUFBVztBQUFBO01BQUEsS0FBQSxxQ0FBQTs7OztBQUFDO0FBQUE7VUFBQSxLQUFBLHdDQUFBOzswQkFBQTtVQUFBLENBQUE7OztNQUFELENBQUE7OztJQUNYLElBQUMsQ0FBQSxNQUFELEdBQVU7QUFFVjtJQUFBLEtBQUEscUNBQUE7O01BQ0MsS0FBQSxHQUFRLElBQUMsQ0FBQSxTQUFELENBQUE7TUFDUixPQUFBLEdBQVUsSUFBSSxPQUFKLENBQVksS0FBWjtNQUNWLEtBQUEsR0FBUSxPQUFPLENBQUMsaUJB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QXZDViIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkbW9uZHMgfSBmcm9tICcuL2Jsb3Nzb20uanMnICBcclxuXHJcbnJhbmdlID0gXy5yYW5nZVxyXG5lY2hvID0gY29uc29sZS5sb2dcclxuXHJcbmV4cG9ydCBjbGFzcyBGYWlyUGFpciBcclxuXHRjb25zdHJ1Y3RvciA6IChAcGxheWVycywgQHNldHRpbmdzKSAtPlxyXG5cdFx0QE4gPSBAcGxheWVycy5sZW5ndGhcclxuXHRcdGlmIEBzZXR0aW5ncy5zb3J0PT0xIHRoZW4gQHBsYXllcnMuc29ydCAoYSxiKSAtPiBhLmVsbyAtIGIuZWxvXHJcblx0XHRAbWF0cml4ID0gKChcIuKAolwiIGZvciBpIGluIHJhbmdlIEBOKSBmb3IgaiBpbiByYW5nZSBATilcclxuXHRcdEByb3VuZHMgPSBbXVxyXG5cclxuXHRcdGZvciByIGluIHJhbmdlIEBzZXR0aW5ncy5ST1VORFNcclxuXHRcdFx0ZWRnZXMgPSBAbWFrZUVkZ2VzKClcclxuXHRcdFx0ZWRtb25kcyA9IG5ldyBFZG1vbmRzIGVkZ2VzXHJcblx0XHRcdG1hZ2ljID0gZWRtb25kcy5tYXhXZWlnaHRNYXRjaGluZyBlZGdlc1xyXG5cdFx0XHRAcm91bmRzLnVuc2hpZnQgQHVwZGF0ZVBsYXllcnMgbWFnaWMsclxyXG5cclxuXHRcdGZvciBwIGluIEBwbGF5ZXJzXHJcblx0XHRcdGRlbGV0ZSBwLm9wcFxyXG5cdFx0XHRkZWxldGUgcC5jb2xcclxuXHJcblx0bWFrZUVkZ2VzIDogLT5cclxuXHRcdGVkZ2VzID0gW10gXHJcblx0XHRmb3IgaSBpbiByYW5nZSBATlxyXG5cdFx0XHRhID0gQHBsYXllcnNbaV1cclxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgQE5cclxuXHRcdFx0XHRpZiBpPT1qIHRoZW4gQG1hdHJpeFtpXVtqXSA9ICcgJ1xyXG5cdFx0XHRcdGIgPSBAcGxheWVyc1tqXVxyXG5cdFx0XHRcdGRpZmYgPSBNYXRoLmFicyBhLmVsbyAtIGIuZWxvXHJcblx0XHRcdFx0aWYgQG9rIGEsYiB0aGVuIGVkZ2VzLnB1c2ggW2ksIGosIDEwMDAwIC0gZGlmZiAqKiAxLjAxXVxyXG5cdFx0ZWRnZXNcclxuXHJcblx0b2sgOiAoYSxiKSAtPiBcclxuXHRcdGlmIGEuaWQgPT0gYi5pZCB0aGVuIHJldHVybiBmYWxzZVxyXG5cdFx0aWYgYS5pZCBpbiBiLm9wcCB0aGVuIHJldHVybiBmYWxzZVxyXG5cdFx0aWYgQHNldHRpbmdzLkdBTUVTID09IDIgb3IgQHNldHRpbmdzLkJBTEFOQ0UgPT0gMCB0aGVuIHJldHVybiB0cnVlXHJcblx0XHRNYXRoLmFicyhhLmJhbGFuY2UoKSArIGIuYmFsYW5jZSgpKSA8IEBzZXR0aW5ncy5CQUxBTkNFXHJcblxyXG5cdHNhdmUgOiAoYSwgYiwgY2EsIGNiLCBpYSwgaWIpIC0+XHJcblx0XHRhLmNvbCArPSBjYVxyXG5cdFx0Yi5jb2wgKz0gY2JcclxuXHRcdEB0YWJsZXMucHVzaCBbaWEsIGliXVxyXG5cclxuXHR1cGRhdGVQbGF5ZXJzIDogKG1hZ2ljLHIpIC0+IFxyXG5cdFx0QHRhYmxlcyA9IFtdXHJcblx0XHRmbGlwID0gZmFsc2UgIyBvbSB0dsOlIHNwZWxhcmUgaGFyIGRpZmY9PTAsIHNrYSB2YXJhbm5hbiBibGkgdml0LCB2YXJhbm5hbiBzdmFydFxyXG5cdFx0Zm9yIGlkIGluIG1hZ2ljXHJcblx0XHRcdGkgPSBpZFxyXG5cdFx0XHRqID0gbWFnaWNbaWRdXHJcblx0XHRcdGlmIGkgPT0gQG1hdHJpeC5sZW5ndGggb3IgaiA9PSBAbWF0cml4WzBdLmxlbmd0aCB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdEBtYXRyaXhbaV1bal0gPSBcIiN7JzEyMzQ1Njc4OWFiY2RlZmdoJ1tyXX1cIlxyXG5cdFx0XHRpZiBpID4gaiB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdGRpZmYgPSBNYXRoLmFicyBAcGxheWVyc1tpXS5lbG8gLSBAcGxheWVyc1tqXS5lbG9cclxuXHRcdFx0YSA9IEBwbGF5ZXJzW2ldXHJcblx0XHRcdGIgPSBAcGxheWVyc1tqXVxyXG5cdFx0XHRhLm9wcC5wdXNoIGpcclxuXHRcdFx0Yi5vcHAucHVzaCBpXHJcblx0XHRcdGRpZmYgPSBhLmJhbGFuY2UoKSAtIGIuYmFsYW5jZSgpXHJcblx0XHRcdGlmIGRpZmYgPiAwXHJcblx0XHRcdFx0QHNhdmUgYSxiLCdiJywndycsaixpXHJcblx0XHRcdGVsc2UgaWYgZGlmZiA8IDBcclxuXHRcdFx0XHRAc2F2ZSBhLGIsJ3cnLCdiJyxpLGpcclxuXHRcdFx0ZWxzZSBcclxuXHRcdFx0XHRpZiBmbGlwXHJcblx0XHRcdFx0XHRAc2F2ZSBhLGIsJ2InLCd3JyxqLGkgXHJcblx0XHRcdFx0ZWxzZSBcclxuXHRcdFx0XHRcdEBzYXZlIGEsYiwndycsJ2InLGksalxyXG5cdFx0XHRcdGZsaXAgPSBub3QgZmxpcFxyXG5cdFx0QHRhYmxlc1xyXG4iXX0=
//# sourceURL=c:\github\FloatingBerger\fairpair.coffee