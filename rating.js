// Generated by CoffeeScript 2.7.0
var echo, expected_score, extrapolate, performance_rating, summa;

echo = console.log;

expected_score = function(ratings, own_rating) {
  var rating;
  return summa((function() {
    var i, len, results;
    results = [];
    for (i = 0, len = ratings.length; i < len; i++) {
      rating = ratings[i];
      results.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
    }
    return results;
  })());
};

// Use two extreme values when calculating 0% or 100%
extrapolate = function(a0, b0, elos) {
  var a, b;
  a = performance_rating(a0, elos);
  b = performance_rating(b0, elos);
  return b + b - a;
};

export var performance = function(pp, elos) {
  var n;
  n = elos.length;
  if (pp === 0) {
    return extrapolate(0.5, 0.25, elos);
  }
  if (pp === n) {
    return extrapolate(n - 0.5, n - 0.25, elos);
  }
  return performance_rating(pp, elos);
};

// export performance = (pp,elos) -> 
// 	n = elos.length
// 	if n == 1
// 		if pp == 0 then return extrapolate 0.50,0.25,elos
// 		if pp == n then return extrapolate 0.50,0.75,elos
// 	else
// 		if pp == 0 then return extrapolate   1,  0.5,elos
// 		if pp == n then return extrapolate n-1,n-0.5,elos
// 	performance_rating pp,elos
performance_rating = function(pp, ratings) {
  var hi, lo, rating;
  lo = 0;
  hi = 4000;
  while (Math.abs(hi - lo) > 0.001) {
    rating = (lo + hi) / 2;
    if (pp > expected_score(ratings, rating)) {
      lo = rating;
    } else {
      hi = rating;
    }
  }
  //echo 'performance_rating', pp, ratings,rating
  return rating;
};

summa = function(arr) {
  var i, item, len, res;
  res = 0;
  for (i = 0, len = arr.length; i < len; i++) {
    item = arr[i];
    res += item;
  }
  return res;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0aW5nLmpzIiwic291cmNlUm9vdCI6IlxcIiwic291cmNlcyI6WyJyYXRpbmcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLElBQUEsRUFBQSxjQUFBLEVBQUEsV0FBQSxFQUFBLGtCQUFBLEVBQUE7O0FBQUEsSUFBQSxHQUFPLE9BQU8sQ0FBQzs7QUFFZixjQUFBLEdBQWlCLFFBQUEsQ0FBQyxPQUFELEVBQVUsVUFBVixDQUFBO0FBQXdCLE1BQUE7U0FBQyxLQUFBOztBQUFPO0lBQUEsS0FBQSx5Q0FBQTs7bUJBQUEsQ0FBQSxHQUFJLENBQUMsQ0FBQSxHQUFJLEVBQUEsSUFBSSxDQUFDLENBQUMsTUFBQSxHQUFTLFVBQVYsQ0FBQSxHQUF3QixHQUF6QixDQUFUO0lBQUosQ0FBQTs7TUFBUDtBQUF6QixFQUZqQjs7O0FBS0EsV0FBQSxHQUFjLFFBQUEsQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLElBQVQsQ0FBQTtBQUNkLE1BQUEsQ0FBQSxFQUFBO0VBQUMsQ0FBQSxHQUFJLGtCQUFBLENBQW1CLEVBQW5CLEVBQXNCLElBQXRCO0VBQ0osQ0FBQSxHQUFJLGtCQUFBLENBQW1CLEVBQW5CLEVBQXNCLElBQXRCO1NBQ0osQ0FBQSxHQUFJLENBQUosR0FBUTtBQUhLOztBQUtkLE9BQUEsSUFBTyxXQUFBLEdBQWMsUUFBQSxDQUFDLEVBQUQsRUFBSSxJQUFKLENBQUE7QUFDckIsTUFBQTtFQUFDLENBQUEsR0FBSSxJQUFJLENBQUM7RUFDVCxJQUFHLEVBQUEsS0FBTSxDQUFUO0FBQWdCLFdBQU8sV0FBQSxDQUFjLEdBQWQsRUFBb0IsSUFBcEIsRUFBeUIsSUFBekIsRUFBdkI7O0VBQ0EsSUFBRyxFQUFBLEtBQU0sQ0FBVDtBQUFnQixXQUFPLFdBQUEsQ0FBWSxDQUFBLEdBQUUsR0FBZCxFQUFrQixDQUFBLEdBQUUsSUFBcEIsRUFBeUIsSUFBekIsRUFBdkI7O1NBQ0Esa0JBQUEsQ0FBbUIsRUFBbkIsRUFBc0IsSUFBdEI7QUFKb0IsRUFWckI7Ozs7Ozs7Ozs7O0FBMEJBLGtCQUFBLEdBQXFCLFFBQUEsQ0FBQyxFQUFELEVBQUssT0FBTCxDQUFBO0FBQ3JCLE1BQUEsRUFBQSxFQUFBLEVBQUEsRUFBQTtFQUFDLEVBQUEsR0FBSztFQUNMLEVBQUEsR0FBSztBQUNMLFNBQU0sSUFBSSxDQUFDLEdBQUwsQ0FBUyxFQUFBLEdBQUssRUFBZCxDQUFBLEdBQW9CLEtBQTFCO0lBQ0MsTUFBQSxHQUFTLENBQUMsRUFBQSxHQUFLLEVBQU4sQ0FBQSxHQUFZO0lBQ3JCLElBQUcsRUFBQSxHQUFLLGNBQUEsQ0FBZSxPQUFmLEVBQXdCLE1BQXhCLENBQVI7TUFDQyxFQUFBLEdBQUssT0FETjtLQUFBLE1BQUE7TUFHQyxFQUFBLEdBQUssT0FITjs7RUFGRCxDQUZEOztTQVNDO0FBVm9COztBQVlyQixLQUFBLEdBQVEsUUFBQSxDQUFDLEdBQUQsQ0FBQTtBQUNSLE1BQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQyxHQUFBLEdBQU07RUFDTixLQUFBLHFDQUFBOztJQUNDLEdBQUEsSUFBTztFQURSO1NBRUE7QUFKTyIsInNvdXJjZXNDb250ZW50IjpbImVjaG8gPSBjb25zb2xlLmxvZyBcclxuXHJcbmV4cGVjdGVkX3Njb3JlID0gKHJhdGluZ3MsIG93bl9yYXRpbmcpIC0+IHN1bW1hICgxIC8gKDEgKyAxMCoqKChyYXRpbmcgLSBvd25fcmF0aW5nKSAvIDQwMCkpIGZvciByYXRpbmcgaW4gcmF0aW5ncylcclxuXHJcbiMgVXNlIHR3byBleHRyZW1lIHZhbHVlcyB3aGVuIGNhbGN1bGF0aW5nIDAlIG9yIDEwMCVcclxuZXh0cmFwb2xhdGUgPSAoYTAsIGIwLCBlbG9zKSAtPlxyXG5cdGEgPSBwZXJmb3JtYW5jZV9yYXRpbmcgYTAsZWxvc1xyXG5cdGIgPSBwZXJmb3JtYW5jZV9yYXRpbmcgYjAsZWxvc1xyXG5cdGIgKyBiIC0gYVxyXG5cclxuZXhwb3J0IHBlcmZvcm1hbmNlID0gKHBwLGVsb3MpIC0+IFxyXG5cdG4gPSBlbG9zLmxlbmd0aFxyXG5cdGlmIHBwID09IDAgdGhlbiByZXR1cm4gZXh0cmFwb2xhdGUgICAwLjUsICAwLjI1LGVsb3NcclxuXHRpZiBwcCA9PSBuIHRoZW4gcmV0dXJuIGV4dHJhcG9sYXRlIG4tMC41LG4tMC4yNSxlbG9zXHJcblx0cGVyZm9ybWFuY2VfcmF0aW5nIHBwLGVsb3NcclxuXHJcbiMgZXhwb3J0IHBlcmZvcm1hbmNlID0gKHBwLGVsb3MpIC0+IFxyXG4jIFx0biA9IGVsb3MubGVuZ3RoXHJcbiMgXHRpZiBuID09IDFcclxuIyBcdFx0aWYgcHAgPT0gMCB0aGVuIHJldHVybiBleHRyYXBvbGF0ZSAwLjUwLDAuMjUsZWxvc1xyXG4jIFx0XHRpZiBwcCA9PSBuIHRoZW4gcmV0dXJuIGV4dHJhcG9sYXRlIDAuNTAsMC43NSxlbG9zXHJcbiMgXHRlbHNlXHJcbiMgXHRcdGlmIHBwID09IDAgdGhlbiByZXR1cm4gZXh0cmFwb2xhdGUgICAxLCAgMC41LGVsb3NcclxuIyBcdFx0aWYgcHAgPT0gbiB0aGVuIHJldHVybiBleHRyYXBvbGF0ZSBuLTEsbi0wLjUsZWxvc1xyXG4jIFx0cGVyZm9ybWFuY2VfcmF0aW5nIHBwLGVsb3NcclxuXHJcbnBlcmZvcm1hbmNlX3JhdGluZyA9IChwcCwgcmF0aW5ncykgLT5cclxuXHRsbyA9IDBcclxuXHRoaSA9IDQwMDBcclxuXHR3aGlsZSBNYXRoLmFicyhoaSAtIGxvKSA+IDAuMDAxXHJcblx0XHRyYXRpbmcgPSAobG8gKyBoaSkgLyAyXHJcblx0XHRpZiBwcCA+IGV4cGVjdGVkX3Njb3JlIHJhdGluZ3MsIHJhdGluZ1xyXG5cdFx0XHRsbyA9IHJhdGluZ1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRoaSA9IHJhdGluZ1xyXG5cdCNlY2hvICdwZXJmb3JtYW5jZV9yYXRpbmcnLCBwcCwgcmF0aW5ncyxyYXRpbmdcclxuXHRyYXRpbmdcclxuXHJcbnN1bW1hID0gKGFycikgLT5cclxuXHRyZXMgPSAwXHJcblx0Zm9yIGl0ZW0gaW4gYXJyXHJcblx0XHRyZXMgKz0gaXRlbVxyXG5cdHJlc1xyXG4iXX0=
//# sourceURL=c:\github\FloatingBerger\rating.coffee