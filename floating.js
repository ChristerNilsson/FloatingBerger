// Generated by CoffeeScript 2.7.0
var echo, range,
  indexOf = [].indexOf;

import {
  Edmonds
} from './blossom.js';

range = _.range;

echo = console.log;

export var Floating = class Floating {
  constructor(players, settings) {
    var edges, edmonds, i, j, k, len, magic, r, ref;
    this.players = players;
    this.settings = settings;
    this.N = this.players.length;
    if (this.settings.sort === 1) {
      this.players.sort(function(a, b) {
        return a.elo - b.elo;
      });
    }
    this.matrix = (function() {
      var k, len, ref, results;
      ref = range(this.N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        j = ref[k];
        results.push((function() {
          var l, len1, ref1, results1;
          ref1 = range(this.N);
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            i = ref1[l];
            results1.push("•");
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this);
    this.summa = 0;
    this.rounds = [];
    ref = range(this.settings.ROUNDS);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      edges = this.makeEdges();
      edmonds = new Edmonds(edges);
      magic = edmonds.maxWeightMatching(edges);
      this.rounds.push(this.updatePlayers(magic, r));
    }
  }

  makeEdges() {
    var a, b, diff, edges, i, j, k, l, len, len1, ref, ref1;
    edges = [];
    ref = range(this.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      a = this.players[i];
      ref1 = range(this.N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        if (i === j) {
          this.matrix[i][j] = ' ';
        }
        b = this.players[j];
        diff = Math.abs(a.elo - b.elo);
        // diff = Math.abs a.id - b.id
        //echo diff
        if (this.ok(a, b)) {
          edges.push([i, j, 10000 - diff ** 1.01]);
        }
      }
    }
    return edges;
  }

  ok(a, b) {
    var ref;
    if (a.id === b.id) {
      return false;
    }
    if (ref = a.id, indexOf.call(b.opp, ref) >= 0) {
      return false;
    }
    if (this.settings.GAMES === 2 || this.settings.BALANCE === 0) {
      return true;
    }
    return Math.abs(a.balance() + b.balance()) < this.settings.BALANCE;
  }

  save(a, b, ca, cb, ia, ib) {
    a.col += ca;
    b.col += cb;
    return this.tables.push([ia, ib]);
  }

  updatePlayers(magic, r) {
    var a, b, diff, flip, i, id, j, k, len;
    this.tables = [];
    // echo 'matrix',@matrix
    flip = false; // om två spelare har diff==0, ska varannan bli vit, varannan svart
    for (k = 0, len = magic.length; k < len; k++) {
      id = magic[k];
      i = id;
      j = magic[id];
      if (i === this.matrix.length || j === this.matrix[0].length) {
        continue;
      }
      this.matrix[i][j] = `${'123456789abcdefgh'[r]}`;
      if (i > j) {
        continue;
      }
      diff = Math.abs(this.players[i].elo - this.players[j].elo);
      this.players[i].summa += diff ** 1.01;
      this.players[j].summa += diff ** 1.01;
      this.summa += diff ** 1.01;
      a = this.players[i];
      b = this.players[j];
      a.opp.push(j);
      b.opp.push(i);
      diff = a.balance() - b.balance();
      if (diff > 0) {
        this.save(a, b, 'b', 'w', j, i);
      } else if (diff < 0) {
        this.save(a, b, 'w', 'b', i, j);
      } else {
        if (flip) {
          this.save(a, b, 'b', 'w', j, i);
        } else {
          this.save(a, b, 'w', 'b', i, j);
        }
        flip = !flip;
      }
    }
    return this.tables;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FloatingBerger\floating.coffee