// Generated by CoffeeScript 2.7.0
var echo, range,
  indexOf = [].indexOf;

import {
  Edmonds
} from './blossom.js';

range = _.range;

echo = console.log;

export var Floating = class Floating {
  constructor(players, settings) {
    var edges, edmonds, i, j, k, len, magic, r, ref;
    this.players = players;
    this.settings = settings;
    this.N = this.players.length;
    if (this.settings.sort === 1) {
      this.players.sort(function(a, b) {
        return a.elo - b.elo;
      });
    }
    this.matrix = (function() {
      var k, len, ref, results;
      ref = range(this.N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        j = ref[k];
        results.push((function() {
          var l, len1, ref1, results1;
          ref1 = range(this.N);
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            i = ref1[l];
            results1.push("•");
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this);
    this.summa = 0;
    this.rounds = [];
    ref = range(this.settings.ROUNDS);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      edges = this.makeEdges();
      edmonds = new Edmonds(edges);
      magic = edmonds.maxWeightMatching(edges);
      this.rounds.unshift(this.updatePlayers(magic, r));
    }
  }

  makeEdges() {
    var a, b, diff, edges, i, j, k, l, len, len1, ref, ref1;
    edges = [];
    ref = range(this.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      a = this.players[i];
      ref1 = range(this.N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        if (i === j) {
          this.matrix[i][j] = ' ';
        }
        b = this.players[j];
        diff = Math.abs(a.elo - b.elo);
        if (this.ok(a, b)) {
          edges.push([i, j, 10000 - diff ** 1.01]);
        }
      }
    }
    return edges;
  }

  ok(a, b) {
    var ref;
    if (a.id === b.id) {
      return false;
    }
    if (ref = a.id, indexOf.call(b.opp, ref) >= 0) {
      return false;
    }
    if (this.settings.GAMES === 2 || this.settings.BALANCE === 0) {
      return true;
    }
    return Math.abs(a.balance() + b.balance()) < this.settings.BALANCE;
  }

  save(a, b, ca, cb, ia, ib) {
    a.col += ca;
    b.col += cb;
    return this.tables.push([ia, ib]);
  }

  updatePlayers(magic, r) {
    var a, b, diff, flip, i, id, j, k, len;
    this.tables = [];
    // echo 'matrix',@matrix
    flip = false; // om två spelare har diff==0, ska varannan bli vit, varannan svart
    for (k = 0, len = magic.length; k < len; k++) {
      id = magic[k];
      i = id;
      j = magic[id];
      if (i === this.matrix.length || j === this.matrix[0].length) {
        continue;
      }
      this.matrix[i][j] = `${'123456789abcdefgh'[r]}`;
      if (i > j) {
        continue;
      }
      diff = Math.abs(this.players[i].elo - this.players[j].elo);
      this.players[i].summa += diff ** 1.01;
      this.players[j].summa += diff ** 1.01;
      this.summa += diff ** 1.01;
      a = this.players[i];
      b = this.players[j];
      a.opp.push(j);
      b.opp.push(i);
      diff = a.balance() - b.balance();
      if (diff > 0) {
        this.save(a, b, 'b', 'w', j, i);
      } else if (diff < 0) {
        this.save(a, b, 'w', 'b', i, j);
      } else {
        if (flip) {
          this.save(a, b, 'b', 'w', j, i);
        } else {
          this.save(a, b, 'w', 'b', i, j);
        }
        flip = !flip;
      }
    }
    return this.tables;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvYXRpbmcuanMiLCJzb3VyY2VSb290IjoiXFwiLCJzb3VyY2VzIjpbImZsb2F0aW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUEsS0FBQTtFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFFQSxLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUNWLElBQUEsR0FBTyxPQUFPLENBQUM7O0FBRWYsT0FBQSxJQUFhLFdBQU4sTUFBQSxTQUFBO0VBQ04sV0FBYyxRQUFBLFVBQUEsQ0FBQTtBQUNmLFFBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQTtJQURnQixJQUFDLENBQUE7SUFBUyxJQUFDLENBQUE7SUFDekIsSUFBQyxDQUFBLENBQUQsR0FBSyxJQUFDLENBQUEsT0FBTyxDQUFDO0lBQ2QsSUFBRyxJQUFDLENBQUEsUUFBUSxDQUFDLElBQVYsS0FBZ0IsQ0FBbkI7TUFBMEIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxJQUFULENBQWMsUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7ZUFBUyxDQUFDLENBQUMsR0FBRixHQUFRLENBQUMsQ0FBQztNQUFuQixDQUFkLEVBQTFCOztJQUNBLElBQUMsQ0FBQSxNQUFEOztBQUFXO0FBQUE7TUFBQSxLQUFBLHFDQUFBOzs7O0FBQUM7QUFBQTtVQUFBLEtBQUEsd0NBQUE7OzBCQUFBO1VBQUEsQ0FBQTs7O01BQUQsQ0FBQTs7O0lBQ1gsSUFBQyxDQUFBLEtBQUQsR0FBUztJQUNULElBQUMsQ0FBQSxNQUFELEdBQVU7QUFFVjtJQUFBLEtBQUEscUNBQUE7O01BQ0MsS0FBQSxHQUFRLElBQUMsQ0FBQSxTQUFELENBQUE7TUFDUixPQUFBLEdBQVUsSUFBSSxPQUFKLENBQVksS0FBWjtNQUNWLEtBQUEsR0FBUSxPQUFPLENBQUMsaUJBQVIsQ0FBMEIsS0FBMUI7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QWtCLENBQWxCLEVBQW9CLENBQXBCLEVBSEQ7O1FBSUEsSUFBQSxHQUFPLENBQUksS0FQUDs7SUFqQk47V0F5QkEsSUFBQyxDQUFBO0VBN0JjOztBQXBDViIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkbW9uZHMgfSBmcm9tICcuL2Jsb3Nzb20uanMnICBcclxuXHJcbnJhbmdlID0gXy5yYW5nZVxyXG5lY2hvID0gY29uc29sZS5sb2dcclxuXHJcbmV4cG9ydCBjbGFzcyBGbG9hdGluZ1xyXG5cdGNvbnN0cnVjdG9yIDogKEBwbGF5ZXJzLCBAc2V0dGluZ3MpIC0+XHJcblx0XHRATiA9IEBwbGF5ZXJzLmxlbmd0aFxyXG5cdFx0aWYgQHNldHRpbmdzLnNvcnQ9PTEgdGhlbiBAcGxheWVycy5zb3J0IChhLGIpIC0+IGEuZWxvIC0gYi5lbG9cclxuXHRcdEBtYXRyaXggPSAoKFwi4oCiXCIgZm9yIGkgaW4gcmFuZ2UgQE4pIGZvciBqIGluIHJhbmdlIEBOKVxyXG5cdFx0QHN1bW1hID0gMFxyXG5cdFx0QHJvdW5kcyA9IFtdXHJcblxyXG5cdFx0Zm9yIHIgaW4gcmFuZ2UgQHNldHRpbmdzLlJPVU5EU1xyXG5cdFx0XHRlZGdlcyA9IEBtYWtlRWRnZXMoKVxyXG5cdFx0XHRlZG1vbmRzID0gbmV3IEVkbW9uZHMgZWRnZXNcclxuXHRcdFx0bWFnaWMgPSBlZG1vbmRzLm1heFdlaWdodE1hdGNoaW5nIGVkZ2VzXHJcblx0XHRcdEByb3VuZHMudW5zaGlmdCBAdXBkYXRlUGxheWVycyBtYWdpYyxyXHJcblxyXG5cdG1ha2VFZGdlcyA6IC0+XHJcblx0XHRlZGdlcyA9IFtdIFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQE5cclxuXHRcdFx0YSA9IEBwbGF5ZXJzW2ldXHJcblx0XHRcdGZvciBqIGluIHJhbmdlIEBOXHJcblx0XHRcdFx0aWYgaT09aiB0aGVuIEBtYXRyaXhbaV1bal0gPSAnICdcclxuXHRcdFx0XHRiID0gQHBsYXllcnNbal1cclxuXHRcdFx0XHRkaWZmID0gTWF0aC5hYnMgYS5lbG8gLSBiLmVsb1xyXG5cdFx0XHRcdGlmIEBvayBhLGIgdGhlbiBlZGdlcy5wdXNoIFtpLCBqLCAxMDAwMCAtIGRpZmYgKiogMS4wMV1cclxuXHRcdGVkZ2VzXHJcblxyXG5cdG9rIDogKGEsYikgLT4gXHJcblx0XHRpZiBhLmlkID09IGIuaWQgdGhlbiByZXR1cm4gZmFsc2VcclxuXHRcdGlmIGEuaWQgaW4gYi5vcHAgdGhlbiByZXR1cm4gZmFsc2VcclxuXHRcdGlmIEBzZXR0aW5ncy5HQU1FUyA9PSAyIG9yIEBzZXR0aW5ncy5CQUxBTkNFID09IDAgdGhlbiByZXR1cm4gdHJ1ZVxyXG5cdFx0TWF0aC5hYnMoYS5iYWxhbmNlKCkgKyBiLmJhbGFuY2UoKSkgPCBAc2V0dGluZ3MuQkFMQU5DRVxyXG5cclxuXHRzYXZlIDogKGEsIGIsIGNhLCBjYiwgaWEsIGliKSAtPlxyXG5cdFx0YS5jb2wgKz0gY2FcclxuXHRcdGIuY29sICs9IGNiXHJcblx0XHRAdGFibGVzLnB1c2ggW2lhLCBpYl1cclxuXHJcblx0dXBkYXRlUGxheWVycyA6IChtYWdpYyxyKSAtPiBcclxuXHRcdEB0YWJsZXMgPSBbXVxyXG5cdFx0IyBlY2hvICdtYXRyaXgnLEBtYXRyaXhcclxuXHRcdGZsaXAgPSBmYWxzZSAjIG9tIHR2w6Ugc3BlbGFyZSBoYXIgZGlmZj09MCwgc2thIHZhcmFubmFuIGJsaSB2aXQsIHZhcmFubmFuIHN2YXJ0XHJcblx0XHRmb3IgaWQgaW4gbWFnaWNcclxuXHRcdFx0aSA9IGlkXHJcblx0XHRcdGogPSBtYWdpY1tpZF1cclxuXHRcdFx0aWYgaSA9PSBAbWF0cml4Lmxlbmd0aCBvciBqID09IEBtYXRyaXhbMF0ubGVuZ3RoIHRoZW4gY29udGludWVcclxuXHRcdFx0QG1hdHJpeFtpXVtqXSA9IFwiI3snMTIzNDU2Nzg5YWJjZGVmZ2gnW3JdfVwiXHJcblx0XHRcdGlmIGkgPiBqIHRoZW4gY29udGludWVcclxuXHRcdFx0ZGlmZiA9IE1hdGguYWJzIEBwbGF5ZXJzW2ldLmVsbyAtIEBwbGF5ZXJzW2pdLmVsb1xyXG5cdFx0XHRAcGxheWVyc1tpXS5zdW1tYSArPSBkaWZmICoqIDEuMDFcclxuXHRcdFx0QHBsYXllcnNbal0uc3VtbWEgKz0gZGlmZiAqKiAxLjAxXHJcblx0XHRcdEBzdW1tYSArPSBkaWZmICoqIDEuMDFcclxuXHRcdFx0YSA9IEBwbGF5ZXJzW2ldXHJcblx0XHRcdGIgPSBAcGxheWVyc1tqXVxyXG5cdFx0XHRhLm9wcC5wdXNoIGpcclxuXHRcdFx0Yi5vcHAucHVzaCBpXHJcblx0XHRcdGRpZmYgPSBhLmJhbGFuY2UoKSAtIGIuYmFsYW5jZSgpXHJcblx0XHRcdGlmIGRpZmYgPiAwXHJcblx0XHRcdFx0QHNhdmUgYSxiLCdiJywndycsaixpXHJcblx0XHRcdGVsc2UgaWYgZGlmZiA8IDBcclxuXHRcdFx0XHRAc2F2ZSBhLGIsJ3cnLCdiJyxpLGpcclxuXHRcdFx0ZWxzZSBcclxuXHRcdFx0XHRpZiBmbGlwXHJcblx0XHRcdFx0XHRAc2F2ZSBhLGIsJ2InLCd3JyxqLGkgXHJcblx0XHRcdFx0ZWxzZSBcclxuXHRcdFx0XHRcdEBzYXZlIGEsYiwndycsJ2InLGksalxyXG5cdFx0XHRcdGZsaXAgPSBub3QgZmxpcFxyXG5cdFx0QHRhYmxlc1xyXG4iXX0=
//# sourceURL=c:\github\FloatingBerger\floating.coffee