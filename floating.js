// Generated by CoffeeScript 2.7.0
var echo, range,
  indexOf = [].indexOf;

import {
  Edmonds
} from './blossom.js';

range = _.range;

echo = console.log;

export var Floating = class Floating {
  constructor(players, settings) {
    var edges, edmonds, i, j, k, len, magic, r, ref;
    this.players = players;
    this.settings = settings;
    this.N = this.players.length;
    if (this.settings.sort === 1) {
      this.players.sort(function(a, b) {
        return a.elo - b.elo;
      });
    }
    this.matrix = (function() {
      var k, len, ref, results;
      ref = range(this.N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        j = ref[k];
        results.push((function() {
          var l, len1, ref1, results1;
          ref1 = range(this.N);
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            i = ref1[l];
            results1.push("•");
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this);
    this.summa = 0;
    this.rounds = [];
    ref = range(this.settings.ROUNDS);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      edges = this.makeEdges();
      edmonds = new Edmonds(edges);
      magic = edmonds.maxWeightMatching(edges);
      this.rounds.push(this.updatePlayers(magic, r));
    }
  }

  makeEdges() {
    var a, b, diff, edges, i, j, k, l, len, len1, ref, ref1;
    edges = [];
    ref = range(this.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      a = this.players[i];
      ref1 = range(this.N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        if (i === j) {
          this.matrix[i][j] = ' ';
        }
        b = this.players[j];
        diff = Math.abs(a.elo - b.elo);
        if (this.ok(a, b)) {
          edges.push([i, j, 10000 - diff ** 1.01]);
        }
      }
    }
    return edges;
  }

  ok(a, b) {
    var ref;
    if (a.id === b.id) {
      return false;
    }
    if (ref = a.id, indexOf.call(b.opp, ref) >= 0) {
      return false;
    }
    if (this.settings.BALANS === 0) {
      return true;
    }
    return Math.abs(a.balans() + b.balans()) < 2;
  }

  save(a, b, ca, cb, ia, ib) {
    a.col += ca;
    b.col += cb;
    return this.tables.push([ia, ib]);
  }

  updatePlayers(magic, r) {
    var a, b, diff, flip, i, id, j, k, len;
    this.tables = [];
    // echo 'matrix',@matrix
    flip = false; // om två spelare har diff==0, ska varannan bli vit, varannan svart
    for (k = 0, len = magic.length; k < len; k++) {
      id = magic[k];
      i = id;
      j = magic[id];
      if (i === this.matrix.length || j === this.matrix[0].length) {
        continue;
      }
      this.matrix[i][j] = `${'123456789abcdefgh'[r]}`;
      if (i > j) {
        continue;
      }
      this.summa += Math.abs(this.players[i].elo - this.players[j].elo);
      a = this.players[i];
      b = this.players[j];
      a.opp.push(j);
      b.opp.push(i);
      diff = a.balans() - b.balans();
      if (diff > 0) {
        this.save(a, b, 'b', 'w', j, i);
      } else if (diff < 0) {
        this.save(a, b, 'w', 'b', i, j);
      } else {
        if (flip) {
          this.save(a, b, 'b', 'w', j, i);
        } else {
          this.save(a, b, 'w', 'b', i, j);
        }
        flip = !flip;
      }
    }
    return this.tables;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvYXRpbmcuanMiLCJzb3VyY2VSb290IjoiXFwiLCJzb3VyY2VzIjpbImZsb2F0aW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUEsS0FBQTtFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFFQSxLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUNWLElBQUEsR0FBTyxPQUFPLENBQUM7O0FBRWYsT0FBQSxJQUFhLFdBQU4sTUFBQSxTQUFBO0VBQ04sV0FBYyxRQUFBLFVBQUEsQ0FBQTtBQUNmLFFBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQTtJQURnQixJQUFDLENBQUE7SUFBUyxJQUFDLENBQUE7SUFDekIsSUFBQyxDQUFBLENBQUQsR0FBSyxJQUFDLENBQUEsT0FBTyxDQUFDO0lBQ2QsSUFBRyxJQUFDLENBQUEsUUFBUSxDQUFDLElBQVYsS0FBZ0IsQ0FBbkI7TUFBMEIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxJQUFULENBQWMsUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7ZUFBUyxDQUFDLENBQUMsR0FBRixHQUFRLENBQUMsQ0FBQztNQUFuQixDQUFkLEVBQTFCOztJQUNBLElBQUMsQ0FBQSxNQUFEOztBQUFXO0FBQUE7TUFBQSxLQUFBLHFDQUFBOzs7O0FBQUM7QUFBQTtVQUFBLEtBQUEsd0NBQUE7OzBCQUFBO1VBQUEsQ0FBQTs7O01BQUQsQ0FBQTs7O0lBQ1gsSUFBQyxDQUFBLEtBQUQsR0FBUztJQUNULElBQUMsQ0FBQSxNQUFELEdBQVU7QUFFVjtJQUFBLEtBQUEscUNBQUE7O01BQ0MsS0FBQSxHQUFRLElBQUMsQ0FBQSxTQUFELENBQUE7TUFDUixPQUFBLEdBQVUsSUFBSSxPQUFKLENBQVksS0FBWjtNQUNWLEtBQUEsR0FBUSxPQUFPLENBQUMsaUJBQVIsQ0FBMEIsS0FBMUI7TUFDUixJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsQ0FBYSxJQUFDLENBQUEsYUFBRCxDQUFlLEtBQWYsRUFBcUIsQ0FBckIsQ0FBYjtJQUpEO0VBUGE7O0VBYWQsU0FBWSxDQUFBLENBQUE7QUFDYixRQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUE7SUFBRSxLQUFBLEdBQVE7QUFDUjtJQUFBLEtBQUEscUNBQUE7O01BQ0MsQ0FBQSxHQUFJLElBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBRDtBQUNaO01BQUEsS0FBQSx3Q0FBQTs7UUFDQyxJQUFHLENBQUEsS0FBRyxDQUFOO1VBQWEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFELENBQVYsR0FBZ0IsSUFBN0I7O1FBQ0EsQ0FBQSxHQUFJLElBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBRDtRQUNaLElBQUEsR0FBTyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQyxHQUFGLEdBQVEsQ0FBQyxDQUFDLEdBQW5CO1FBQ1AsSUFBRyxJQUFDLENBQUEsRUFBRCxDQUFJLENBQUosRUFBTSxDQUFOLENBQUg7VUFBZ0IsS0FBSyxDQUFDLElBQU4sQ0FBVyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sS0FBQSxHQUFRLElBQUEsSUFBUSxJQUF2QixDQUFYLEVBQWhCOztNQUpEO0lBRkQ7V0FPQTtFQVRXOztFQVdaLEVBQUssQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBO0FBQ04sUUFBQTtJQUFFLElBQUcsQ0FBQyxDQUFDLEVBQUYsS0FBUSxDQUFDLENBQUMsRUFBYjtBQUFxQixhQUFPLE1BQTVCOztJQUNBLFVBQUcsQ0FBQyxDQUFDLGlCQUFNLENBQUMsQ0FBQyxLQUFWLFNBQUg7QUFBc0IsYUFBTyxNQUE3Qjs7SUFDQSxJQUFHLElBQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixLQUFvQixDQUF2QjtBQUE4QixhQUFPLEtBQXJDOztXQUNBLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxDQUFDLE1BQUYsQ0FBQSxDQUFBLEdBQWEsQ0FBQyxDQUFDLE1BQUYsQ0FBQSxDQUF0QixDQUFBLEdBQW9DO0VBSmhDOztFQU1MLElBQU8sQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLEVBQVAsRUFBVyxFQUFYLEVBQWUsRUFBZixFQUFtQixFQUFuQixDQUFBO0lBQ04sQ0FBQyxDQUFDLEdBQUYsSUFBUztJQUNULENBQUMsQ0FBQyxHQUFGLElBQVM7V0FDVCxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsQ0FBYSxDQUFDLEVBQUQsRUFBSyxFQUFMLENBQWI7RUFITTs7RUFLUCxhQUFnQixDQUFDLEtBQUQsRUFBTyxDQUFQLENBQUE7QUFDakIsUUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBO0lBQUUsSUFBQyxDQUFBLE1BQUQsR0FBVSxHQUFaOztJQUVFLElBQUEsR0FBTyxNQUZUO0lBR0UsS0FBQSx1Q0FBQTs7TUFDQyxDQUFBLEdBQUk7TUFDSixDQUFBLEdBQUksS0FBSyxDQUFDLEVBQUQ7TUFDVCxJQUFHLENBQUEsS0FBSyxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQWIsSUFBdUIsQ0FBQSxLQUFLLElBQUMsQ0FBQSxNQUFNLENBQUMsQ0FBRCxDQUFHLENBQUMsTUFBMUM7QUFBc0QsaUJBQXREOztNQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsQ0FBRCxDQUFHLENBQUMsQ0FBRCxDQUFWLEdBQWdCLENBQUEsQ0FBQSxDQUFHLG1CQUFtQixDQUFDLENBQUQsQ0FBdEIsQ0FBQTtNQUNoQixJQUFHLENBQUEsR0FBSSxDQUFQO0FBQWMsaUJBQWQ7O01BQ0EsSUFBQyxDQUFBLEtBQUQsSUFBVSxJQUFJLENBQUMsR0FBTCxDQUFTLElBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBRCxDQUFHLENBQUMsR0FBWixHQUFrQixJQUFDLENBQUEsT0FBTyxDQUFDLENBQUQsQ0FBRyxDQUFDLEdBQXZDO01BQ1YsQ0FBQSxHQUFJLElBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBRDtNQUNaLENBQUEsR0FBSSxJQUFDLENBQUEsT0FBTyxDQUFDLENBQUQ7TUFDWixDQUFDLENBQUMsR0FBRyxDQUFDLElBQU4sQ0FBVyxDQUFYO01BQ0EsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFOLENBQVcsQ0FBWDtNQUNBLElBQUEsR0FBTyxDQUFDLENBQUMsTUFBRixDQUFBLENBQUEsR0FBYSxDQUFDLENBQUMsTUFBRixDQUFBO01BQ3BCLElBQUcsSUFBQSxHQUFPLENBQVY7UUFBaUIsSUFBQyxDQUFBLElBQUQsQ0FBTSxDQUFOLEVBQVEsQ0FBUixFQUFVLEdBQVYsRUFBYyxHQUFkLEVBQWtCLENBQWxCLEVBQW9CLENBQXBCLEVBQWpCO09BQUEsTUFDSyxJQUFHLElBQUEsR0FBTyxDQUFWO1FBQWlCLElBQUMsQ0FBQSxJQUFELENBQU0sQ0FBTixFQUFRLENBQVIsRUFBVSxHQUFWLEVBQWMsR0FBZCxFQUFrQixDQUFsQixFQUFvQixDQUFwQixFQUFqQjtPQUFBLE1BQUE7UUFFSixJQUFHLElBQUg7VUFBYSxJQUFDLENBQUEsSUFBRCxDQUFNLENBQU4sRUFBUSxDQUFSLEVBQVUsR0FBVixFQUFjLEdBQWQsRUFBa0IsQ0FBbEIsRUFBb0IsQ0FBcEIsRUFBYjtTQUFBLE1BQUE7VUFBd0MsSUFBQyxDQUFBLElBQUQsQ0FBTSxDQUFOLEVBQVEsQ0FBUixFQUFVLEdBQVYsRUFBYyxHQUFkLEVBQWtCLENBQWxCLEVBQW9CLENBQXBCLEVBQXhDOztRQUNBLElBQUEsR0FBTyxDQUFJLEtBSFA7O0lBYk47V0FpQkEsSUFBQyxDQUFBO0VBckJjOztBQXBDViIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkbW9uZHMgfSBmcm9tICcuL2Jsb3Nzb20uanMnICBcclxuXHJcbnJhbmdlID0gXy5yYW5nZVxyXG5lY2hvID0gY29uc29sZS5sb2dcclxuXHJcbmV4cG9ydCBjbGFzcyBGbG9hdGluZ1xyXG5cdGNvbnN0cnVjdG9yIDogKEBwbGF5ZXJzLCBAc2V0dGluZ3MpIC0+XHJcblx0XHRATiA9IEBwbGF5ZXJzLmxlbmd0aFxyXG5cdFx0aWYgQHNldHRpbmdzLnNvcnQ9PTEgdGhlbiBAcGxheWVycy5zb3J0IChhLGIpIC0+IGEuZWxvIC0gYi5lbG9cclxuXHRcdEBtYXRyaXggPSAoKFwi4oCiXCIgZm9yIGkgaW4gcmFuZ2UgQE4pIGZvciBqIGluIHJhbmdlIEBOKVxyXG5cdFx0QHN1bW1hID0gMFxyXG5cdFx0QHJvdW5kcyA9IFtdXHJcblxyXG5cdFx0Zm9yIHIgaW4gcmFuZ2UgQHNldHRpbmdzLlJPVU5EU1xyXG5cdFx0XHRlZGdlcyA9IEBtYWtlRWRnZXMoKVxyXG5cdFx0XHRlZG1vbmRzID0gbmV3IEVkbW9uZHMgZWRnZXNcclxuXHRcdFx0bWFnaWMgPSBlZG1vbmRzLm1heFdlaWdodE1hdGNoaW5nIGVkZ2VzXHJcblx0XHRcdEByb3VuZHMucHVzaCBAdXBkYXRlUGxheWVycyBtYWdpYyxyXHJcblxyXG5cdG1ha2VFZGdlcyA6IC0+XHJcblx0XHRlZGdlcyA9IFtdIFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQE5cclxuXHRcdFx0YSA9IEBwbGF5ZXJzW2ldXHJcblx0XHRcdGZvciBqIGluIHJhbmdlIEBOXHJcblx0XHRcdFx0aWYgaT09aiB0aGVuIEBtYXRyaXhbaV1bal0gPSAnICdcclxuXHRcdFx0XHRiID0gQHBsYXllcnNbal1cclxuXHRcdFx0XHRkaWZmID0gTWF0aC5hYnMgYS5lbG8gLSBiLmVsb1xyXG5cdFx0XHRcdGlmIEBvayBhLGIgdGhlbiBlZGdlcy5wdXNoIFtpLCBqLCAxMDAwMCAtIGRpZmYgKiogMS4wMV1cclxuXHRcdGVkZ2VzXHJcblxyXG5cdG9rIDogKGEsYikgLT4gXHJcblx0XHRpZiBhLmlkID09IGIuaWQgdGhlbiByZXR1cm4gZmFsc2VcclxuXHRcdGlmIGEuaWQgaW4gYi5vcHAgdGhlbiByZXR1cm4gZmFsc2VcclxuXHRcdGlmIEBzZXR0aW5ncy5CQUxBTlMgPT0gMCB0aGVuIHJldHVybiB0cnVlXHJcblx0XHRNYXRoLmFicyhhLmJhbGFucygpICsgYi5iYWxhbnMoKSkgPCAyXHJcblxyXG5cdHNhdmUgOiAoYSwgYiwgY2EsIGNiLCBpYSwgaWIpIC0+XHJcblx0XHRhLmNvbCArPSBjYVxyXG5cdFx0Yi5jb2wgKz0gY2JcclxuXHRcdEB0YWJsZXMucHVzaCBbaWEsIGliXVxyXG5cclxuXHR1cGRhdGVQbGF5ZXJzIDogKG1hZ2ljLHIpIC0+IFxyXG5cdFx0QHRhYmxlcyA9IFtdXHJcblx0XHQjIGVjaG8gJ21hdHJpeCcsQG1hdHJpeFxyXG5cdFx0ZmxpcCA9IGZhbHNlICMgb20gdHbDpSBzcGVsYXJlIGhhciBkaWZmPT0wLCBza2EgdmFyYW5uYW4gYmxpIHZpdCwgdmFyYW5uYW4gc3ZhcnRcclxuXHRcdGZvciBpZCBpbiBtYWdpY1xyXG5cdFx0XHRpID0gaWRcclxuXHRcdFx0aiA9IG1hZ2ljW2lkXVxyXG5cdFx0XHRpZiBpID09IEBtYXRyaXgubGVuZ3RoIG9yIGogPT0gQG1hdHJpeFswXS5sZW5ndGggdGhlbiBjb250aW51ZVxyXG5cdFx0XHRAbWF0cml4W2ldW2pdID0gXCIjeycxMjM0NTY3ODlhYmNkZWZnaCdbcl19XCJcclxuXHRcdFx0aWYgaSA+IGogdGhlbiBjb250aW51ZVxyXG5cdFx0XHRAc3VtbWEgKz0gTWF0aC5hYnMgQHBsYXllcnNbaV0uZWxvIC0gQHBsYXllcnNbal0uZWxvXHJcblx0XHRcdGEgPSBAcGxheWVyc1tpXVxyXG5cdFx0XHRiID0gQHBsYXllcnNbal1cclxuXHRcdFx0YS5vcHAucHVzaCBqXHJcblx0XHRcdGIub3BwLnB1c2ggaVxyXG5cdFx0XHRkaWZmID0gYS5iYWxhbnMoKSAtIGIuYmFsYW5zKClcclxuXHRcdFx0aWYgZGlmZiA+IDAgdGhlbiBAc2F2ZSBhLGIsJ2InLCd3JyxqLGlcclxuXHRcdFx0ZWxzZSBpZiBkaWZmIDwgMCB0aGVuIEBzYXZlIGEsYiwndycsJ2InLGksalxyXG5cdFx0XHRlbHNlIFxyXG5cdFx0XHRcdGlmIGZsaXAgdGhlbiBAc2F2ZSBhLGIsJ2InLCd3JyxqLGkgZWxzZSBAc2F2ZSBhLGIsJ3cnLCdiJyxpLGpcclxuXHRcdFx0XHRmbGlwID0gbm90IGZsaXBcclxuXHRcdEB0YWJsZXNcclxuIl19
//# sourceURL=c:\github\FloatingBerger\floating.coffee